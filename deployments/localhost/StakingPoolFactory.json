{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pmMembership",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pmTeamManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creatorManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FAILED_TO_TRANSFER_BNBS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_OWNER_OF_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_PREMIUM_OR_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "START_TIME_SHOULD_BE_FUTURE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Poolcreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "campaignFeeManager",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum StakingLibrary.CampaignCategories",
              "name": "category",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "enum StakingLibrary.ProfileType",
              "name": "profileType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLibrary.ProjectInfo",
          "name": "projectInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLibrary.RewardPoolInfo",
          "name": "rewardPoolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "image_3_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_6_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_12_months",
              "type": "string"
            }
          ],
          "internalType": "struct StakingLibrary.Images",
          "name": "images",
          "type": "tuple"
        }
      ],
      "name": "createAStakingPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPoolByID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "getPoolIdsOfATeam",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolIdsOfAUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmMembership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmTeamManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16c460b428e74c4e0ab5b61f3cf4b058c2dbd9ca06a522fa42ea2c134f75e05e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "5252966",
    "logsBloom": "0x
    "blockHash": "0x90358ae8ff8ed4a4f7d1313867280bb78c889ea87838652386b4a2d6a116e54e",
    "transactionHash": "0x16c460b428e74c4e0ab5b61f3cf4b058c2dbd9ca06a522fa42ea2c134f75e05e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x16c460b428e74c4e0ab5b61f3cf4b058c2dbd9ca06a522fa42ea2c134f75e05e",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x90358ae8ff8ed4a4f7d1313867280bb78c889ea87838652386b4a2d6a116e54e"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "5252966",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9"
  ],
  "numDeployments": 1,
  "solcInputHash": "4d1a6f06330d85ddb1b4e56efbcd8da6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pmMembership\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pmTeamManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creatorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FAILED_TO_TRANSFER_BNBS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_OWNER_OF_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PREMIUM_OR_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"START_TIME_SHOULD_BE_FUTURE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Poolcreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignFeeManager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum StakingLibrary.CampaignCategories\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"enum StakingLibrary.ProfileType\",\"name\":\"profileType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.ProjectInfo\",\"name\":\"projectInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image_3_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_6_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_12_months\",\"type\":\"string\"}],\"internalType\":\"struct StakingLibrary.Images\",\"name\":\"images\",\"type\":\"tuple\"}],\"name\":\"createAStakingPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPoolByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"getPoolIdsOfATeam\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolIdsOfAUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmMembership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmTeamManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingContract/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\nimport \\\"../interfaces/ICreatorManager.sol\\\";\\r\\nimport \\\"../interfaces/ICreatorContract.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n// error NothingToWithdraw();\\r\\nerror POOL_NOT_STARTED();\\r\\nerror NOT_ENOUGH_REWARD();\\r\\nerror OWNER_ONLY();\\r\\nerror NOT_ALLOWED();\\r\\nerror NOT_AUTHERIZED();\\r\\nerror NOTHING_TO_UNSTAKE();\\r\\nerror ALREADY_UNSTAKED();\\r\\nerror INSUFFICIENT_FUNDS();\\r\\nerror FAILED_TO_TRANSFER_BNBS();\\r\\n\\r\\n\\r\\ncontract StakingPool is ERC721Enumerable {\\r\\n   \\r\\n    uint256 internal constant ONE_DAY = 1;\\r\\n    address public creatorManager;\\r\\n    address payable public campaignFeeManager;\\r\\n\\r\\n    StakingLibrary.PoolInfo private poolInfo;\\r\\n    StakingLibrary.ProjectInfo private projectInfo;\\r\\n    StakingLibrary.RewardPoolInfo private rewardPoolInfo;\\r\\n    StakingLibrary.Images private images;\\r\\n\\r\\n    struct StakingCategeroy {\\r\\n        StakingType stakingType;\\r\\n        uint256 duration;\\r\\n        uint256 rewardPC;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    enum StakingType {THREE_MONTH, SIX_MONTH, TWELVE_MONTH}\\r\\n\\r\\n    /// @notice - reward structure (3months -> 30%, 6months -> 50%, 12months -> 80%);\\r\\n    StakingCategeroy public THREE_MONTH = StakingCategeroy(StakingType.THREE_MONTH, 90*ONE_DAY, 30, \\\"\\\");\\r\\n    StakingCategeroy public SIX_MONTH = StakingCategeroy(StakingType.SIX_MONTH, 180*ONE_DAY, 50, \\\"\\\");\\r\\n    StakingCategeroy public TWELVE_MONTH = StakingCategeroy(StakingType.TWELVE_MONTH, 365*ONE_DAY, 80, \\\"\\\");\\r\\n    \\r\\n    mapping (StakingType => StakingCategeroy) private stakingInfo;\\r\\n    mapping (uint256 => StakingLibrary.TokenData) private tokenData;\\r\\n\\r\\n    constructor (\\r\\n        uint256 _poolId,\\r\\n        StakingLibrary.ProjectInfo memory _projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory _rewardPoolInfo,\\r\\n        StakingLibrary.Images memory _images,\\r\\n        address _creatorManager,\\r\\n        address payable _campaignFeeManager,\\r\\n        address _ownerOfProject\\r\\n        ) \\r\\n        ERC721(_projectInfo.projectName, _projectInfo.projectName) {\\r\\n\\r\\n        THREE_MONTH.image = _images.image_3_months;\\r\\n        SIX_MONTH.image = _images.image_6_months;\\r\\n        TWELVE_MONTH.image = _images.image_12_months;\\r\\n\\r\\n        stakingInfo[StakingType.THREE_MONTH] = THREE_MONTH;\\r\\n        stakingInfo[StakingType.SIX_MONTH] = SIX_MONTH;\\r\\n        stakingInfo[StakingType.TWELVE_MONTH] = TWELVE_MONTH;\\r\\n\\r\\n        projectInfo = _projectInfo;\\r\\n        rewardPoolInfo = _rewardPoolInfo;\\r\\n        images = _images;\\r\\n\\r\\n        poolInfo.poolId = _poolId;\\r\\n        poolInfo.poolAddress = address(this);\\r\\n        poolInfo.remainingPool = _rewardPoolInfo.poolAmount;\\r\\n        poolInfo.poolOwner = _ownerOfProject;\\r\\n\\r\\n        creatorManager = _creatorManager;\\r\\n        campaignFeeManager = _campaignFeeManager;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice The main function to stake tokens\\r\\n    function stakeTokens(uint256 amount, StakingType _type) public {\\r\\n\\r\\n        // Check if pool has been started \\r\\n        if(block.timestamp < rewardPoolInfo.startedAt){\\r\\n            revert POOL_NOT_STARTED();\\r\\n        }\\r\\n\\r\\n        // Get Staking type info\\r\\n        StakingCategeroy memory category = stakingInfo[_type];\\r\\n\\r\\n        // Calculate reward of this person\\r\\n        uint256 reward = amount * category.rewardPC / 100;\\r\\n        // Check if pool has enough space to give this reward\\r\\n\\r\\n        if(poolInfo.remainingPool < reward){\\r\\n            revert NOT_ENOUGH_REWARD();\\r\\n        }\\r\\n\\r\\n        //Check if user has a creator contract\\r\\n        address creator = ICreatorManager(creatorManager).creatorAddress(msg.sender);\\r\\n        // Not already a creator then create one\\r\\n        if(creator == address(0)){\\r\\n            creator = ICreatorManager(creatorManager).createACreator(msg.sender);\\r\\n        }\\r\\n\\r\\n        // Update the tokenID\\r\\n        poolInfo.tokenCounter++;\\r\\n        // tokenUri\\r\\n        string memory tokenUri = stakingInfo[_type].image;\\r\\n\\r\\n\\r\\n        // address poolAddress;\\r\\n        // uint256 poolId;\\r\\n        // uint256 tokenStaked;\\r\\n        // address tokenAddress;\\r\\n        // address owner;\\r\\n        // address creator;\\r\\n        // uint256 tokenId;\\r\\n        // string tokenUri;\\r\\n        // uint8 stakingType;\\r\\n        // uint256 stakingTime;\\r\\n        // uint256 unlockTime;\\r\\n        // uint256 expectedReward;\\r\\n        // bool isUnskated;\\r\\n        // uint256 redeemedReward;\\r\\n        // uint8 pcReceived;\\r\\n\\r\\n\\r\\n        // Record the staking entry\\r\\n        tokenData[poolInfo.tokenCounter] = StakingLibrary.TokenData(\\r\\n            address(this),                          //poolAddress\\r\\n            poolInfo.poolId,                        //poolId\\r\\n            amount,                                 //tokenStaked\\r\\n            projectInfo.tokenAddress,               //tokenAddress\\r\\n            address(msg.sender),                    //owner\\r\\n            address(creator),                       //creator\\r\\n            poolInfo.tokenCounter,                  //tokenID\\r\\n            tokenUri,                               //tokenUri\\r\\n            uint8(_type),                           //stakingType;\\r\\n            block.timestamp,                        //stakingTime\\r\\n            block.timestamp + category.duration,    //unlockTime\\r\\n            reward,                                 //expectedReward\\r\\n            false,                                  //isUnskated\\r\\n            0,                                      //redeemedReward\\r\\n            0                                       //pcReceived\\r\\n        );\\r\\n\\r\\n        // Transfer user's tokens to his creator contract\\r\\n        IERC20(projectInfo.tokenAddress).transferFrom(msg.sender, address(creator), amount);\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        poolInfo.remainingPool -= reward;\\r\\n        // Update the total staked tokens variable\\r\\n        poolInfo.totalTokensStaked += amount;\\r\\n        // update totalParicipants\\r\\n        poolInfo.totalParicipants++;\\r\\n\\r\\n        // Mint An NFT to the creator contract with token detials\\r\\n        _safeMint(address(creator), poolInfo.tokenCounter, abi.encodePacked(address(this)));\\r\\n\\r\\n        emit JoinedPool(poolInfo.poolId, poolInfo.tokenCounter, msg.sender, amount, uint8(_type));\\r\\n        \\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice unstakeTokens can only be called by creator contract of the token holder. \\r\\n    function unstakeTokens(uint256 _tokenId) public payable {\\r\\n\\r\\n        StakingLibrary.TokenData memory _tokenData = tokenData[_tokenId];\\r\\n        \\r\\n        // Only owner of the token should be able to withdraw\\r\\n        if(msg.sender != _tokenData.owner){\\r\\n            revert NOT_AUTHERIZED();\\r\\n        }\\r\\n        // require(_tokenData.expectedReward > 0, \\\"Nothing to unstaked\\\");\\r\\n        if(_tokenData.expectedReward == 0){\\r\\n            revert NOTHING_TO_UNSTAKE();\\r\\n        }\\r\\n\\r\\n        // require(!_tokenData.isUnskated, \\\"Already unstaked\\\");\\r\\n        if(_tokenData.isUnskated){\\r\\n            revert ALREADY_UNSTAKED();\\r\\n        }\\r\\n\\r\\n        tokenData[_tokenId].isUnskated = true;\\r\\n\\r\\n        /// @notice Calculating the reward after pelanty;\\r\\n        (uint256 redeemableReward, uint8 pcReceived, uint256 fee) = findRedeemableReward(_tokenData.expectedReward, _tokenData.stakingTime, _tokenData.unlockTime);\\r\\n\\r\\n        tokenData[_tokenId].redeemedReward = redeemableReward;\\r\\n        tokenData[_tokenId].pcReceived = pcReceived;\\r\\n\\r\\n        uint256 leftoverReward = _tokenData.expectedReward - redeemableReward;\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        poolInfo.remainingPool += leftoverReward;\\r\\n        // _burn(_tokenData.tokenId);\\r\\n\\r\\n        if(msg.value < fee){\\r\\n            revert INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        // Transfer fee to FeeManager\\r\\n        (bool sent,) = campaignFeeManager.call{value: msg.value}(\\\"\\\");\\r\\n        if(!sent){\\r\\n            revert FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n\\r\\n        // Move tokens back to the user\\r\\n        address creator = ICreatorManager(creatorManager).creatorAddress(msg.sender);        \\r\\n        ICreatorContract(creator).sendTokensBackToOwner(address(this), _tokenId);\\r\\n\\r\\n\\r\\n        IERC20(projectInfo.tokenAddress).transfer(_tokenData.owner, redeemableReward);\\r\\n\\r\\n        emit ExitedPool(poolInfo.poolId, msg.sender, _tokenData.tokenStaked, uint8(_tokenData.stakingType), redeemableReward);\\r\\n\\r\\n    }\\r\\n    \\r\\n    /// @notice - penalties (50% completion -> 30% reward, 80% completion -> 50% reward, 100% completion -> 100% reward)\\r\\n    /// @notice an internal function to compute redeemable reward after pelanties.\\r\\n    function findRedeemableReward(\\r\\n        uint256 _expectedReward, \\r\\n        uint256 _stakingTime, \\r\\n        uint256 _unlockTime\\r\\n        ) public view returns(uint256 redeemableReward, uint8 pcReceived, uint256 fee) {\\r\\n        \\r\\n        // Either 90 days, 180 days or 365 days. \\r\\n        uint256 stakingPeriod = _unlockTime - _stakingTime;\\r\\n        uint256 durationCompleted = block.timestamp - _stakingTime;\\r\\n        uint256 pcCompleted = (durationCompleted * 100) / stakingPeriod;\\r\\n        \\r\\n\\r\\n        if(pcCompleted < 50 ){\\r\\n            pcReceived = 0;\\r\\n            redeemableReward = 0;\\r\\n            fee = ICampaignFeeManager(campaignFeeManager).getUnstakingFee(StakingLibrary.UnstakingCategories.REWARD_0pc);\\r\\n\\r\\n        }\\r\\n        else if(pcCompleted >= 50 && pcCompleted < 80 ){\\r\\n            pcReceived = 30;\\r\\n            redeemableReward = (_expectedReward * pcReceived) / 100;\\r\\n            fee = ICampaignFeeManager(campaignFeeManager).getUnstakingFee(StakingLibrary.UnstakingCategories.REWARD_30pc);\\r\\n        }\\r\\n        else if(pcCompleted >= 80 && pcCompleted < 100){\\r\\n            pcReceived = 50;\\r\\n            redeemableReward = (_expectedReward * 50) / 100;\\r\\n            fee = ICampaignFeeManager(campaignFeeManager).getUnstakingFee(StakingLibrary.UnstakingCategories.REWARD_50pc);\\r\\n        }\\r\\n        else {\\r\\n            pcReceived = 100;\\r\\n            redeemableReward = _expectedReward;\\r\\n            fee = ICampaignFeeManager(campaignFeeManager).getUnstakingFee(StakingLibrary.UnstakingCategories.REWARD_100pc);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function checkTokenReward(uint256 _tokenId) public view returns (\\r\\n        uint256 expectedReward, \\r\\n        uint256 redeemableReward,\\r\\n        uint8 pcReceived,\\r\\n        uint256 fee\\r\\n        ) {\\r\\n        StakingLibrary.TokenData memory _tokenData = tokenData[_tokenId];\\r\\n        expectedReward = _tokenData.expectedReward;\\r\\n        (redeemableReward,pcReceived,fee) = findRedeemableReward(_tokenData.expectedReward, _tokenData.stakingTime, _tokenData.unlockTime);\\r\\n    }\\r\\n    \\r\\n    /// @notice Getter functions\\r\\n    function getProjectInfo() public view returns (\\r\\n        StakingLibrary.PoolFullInfo memory\\r\\n    ){\\r\\n        return StakingLibrary.PoolFullInfo(poolInfo, projectInfo, rewardPoolInfo, images);\\r\\n    }\\r\\n\\r\\n    function getTokenData(uint256 _tokenId) public view returns(StakingLibrary.TokenData memory){\\r\\n        return tokenData[_tokenId];\\r\\n    }\\r\\n\\r\\n    function getTokensData(address _user) public view returns (\\r\\n        StakingLibrary.ProjectInfo memory,\\r\\n        StakingLibrary.TokenData[] memory\\r\\n        ) {\\r\\n        uint256 myBalance = balanceOf(_user);\\r\\n        StakingLibrary.TokenData[] memory tokensData = new StakingLibrary.TokenData[](myBalance);\\r\\n        for(uint256 i = 0; i < myBalance; i++){\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(_user, i);\\r\\n            StakingLibrary.TokenData memory data = tokenData[tokenId];\\r\\n            tokensData[i] = data;\\r\\n        }\\r\\n        return (projectInfo, tokensData);\\r\\n    }\\r\\n    \\r\\n    event JoinedPool(uint poolId, uint tokenId, address user, uint contribution, uint8 category);\\r\\n    event ExitedPool(uint id, address creator, uint contribution, uint8 category, uint redeemableReward);\\r\\n\\r\\n}\",\"keccak256\":\"0xa5634065cb1279cbb169fa8d2fb0f08bd9496ba193bd1ae1187fa0895a33a710\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./StakingPool.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ICreatorManager.sol\\\";\\r\\nimport \\\"../interfaces/IPMMembership.sol\\\";\\r\\nimport \\\"../interfaces/IPMTeamManager.sol\\\";\\r\\nimport \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror NOT_PREMIUM_OR_TEAM();\\r\\nerror NOT_OWNER_OF_TEAM();\\r\\n// error INSUFFICIENT_FUNDS();\\r\\n// error FAILED_TO_TRANSFER_BNBS();\\r\\nerror START_TIME_SHOULD_BE_FUTURE();\\r\\nerror PROFILE_IS_ALREADY_SET();\\r\\nerror NOT_THE_CAMPAIGN_OWNER();\\r\\n\\r\\ncontract StakingPoolFactory is Ownable {\\r\\n\\r\\n    address payable public campaignFeeManager;\\r\\n    address public pmMembership;\\r\\n    address public pmTeamManager;\\r\\n    address public creatorManager;\\r\\n\\r\\n    uint256 public projectsCount;\\r\\n\\r\\n    mapping(address => uint256[]) private poolsOfAUser;\\r\\n    mapping(uint256 => uint256[]) private poolsOfATeam;\\r\\n\\r\\n    mapping(address => address[]) private stakingPoolsByToken;\\r\\n    mapping(uint256 => address) private stakingPoolByID;\\r\\n\\r\\n    constructor(\\r\\n        address _campaignFeeManager,\\r\\n        address _pmMembership, \\r\\n        address _pmTeamManager,\\r\\n        address _creatorManager\\r\\n        ){\\r\\n        campaignFeeManager = payable(_campaignFeeManager);\\r\\n        pmMembership = _pmMembership;\\r\\n        pmTeamManager = _pmTeamManager;\\r\\n        creatorManager = _creatorManager;\\r\\n    }\\r\\n\\r\\n    function createAStakingPool(\\r\\n        StakingLibrary.ProjectInfo memory projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory rewardPoolInfo,\\r\\n        StakingLibrary.Images memory images\\r\\n        ) public payable {\\r\\n        \\r\\n\\r\\n        bool hasTeam = IPMTeamManager(pmTeamManager).balanceOf(msg.sender) > 0;\\r\\n        bool isPremiumMember = IPMMembership(pmMembership).getUserTokenData(msg.sender).isPremium;\\r\\n\\r\\n        // console.log(\\\"hasTeam\\\", hasTeam);\\r\\n        // console.log(\\\"isPremiumMember\\\", isPremiumMember);\\r\\n\\r\\n\\r\\n        if(!hasTeam && !isPremiumMember){\\r\\n            revert NOT_PREMIUM_OR_TEAM();\\r\\n        }\\r\\n        \\r\\n        if(projectInfo.profileType == StakingLibrary.ProfileType.TEAM){\\r\\n            address ownerOfTeam = IPMTeamManager(pmTeamManager).ownerOf(projectInfo.profileId);\\r\\n            if(ownerOfTeam != msg.sender) {\\r\\n                revert NOT_OWNER_OF_TEAM();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 requiredFee = ICampaignFeeManager(campaignFeeManager).getCampaignFee(projectInfo.category);\\r\\n\\r\\n        // require(msg.value >= requiredFee, \\\"Insufficient Funds\\\");\\r\\n        if(msg.value < requiredFee){\\r\\n            revert INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        // require(rewardPoolInfo.startedAt >= block.timestamp, \\\"Start time should be in future\\\");\\r\\n        if(rewardPoolInfo.startedAt < block.timestamp){\\r\\n            revert START_TIME_SHOULD_BE_FUTURE();\\r\\n        }\\r\\n\\r\\n\\r\\n        projectsCount++;\\r\\n        \\r\\n        StakingPool stakingContract = new StakingPool(\\r\\n            projectsCount, projectInfo, rewardPoolInfo, images, creatorManager, campaignFeeManager, msg.sender\\r\\n        );\\r\\n\\r\\n\\r\\n        if(projectInfo.profileType == StakingLibrary.ProfileType.TEAM){\\r\\n            poolsOfATeam[projectInfo.profileId].push(projectsCount);\\r\\n        }\\r\\n\\r\\n        stakingPoolsByToken[projectInfo.tokenAddress].push(address(stakingContract));\\r\\n        stakingPoolByID[projectsCount] = address(stakingContract);\\r\\n        poolsOfAUser[msg.sender].push(projectsCount);\\r\\n\\r\\n        IERC20(projectInfo.tokenAddress).transferFrom(msg.sender, address(stakingContract), rewardPoolInfo.poolAmount);\\r\\n\\r\\n        // Transfer fee to FeeManager\\r\\n        (bool sent,) = campaignFeeManager.call{value: msg.value}(\\\"\\\");\\r\\n        if(!sent){\\r\\n            revert FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n        emit Poolcreated(projectsCount, address(stakingContract), projectInfo.tokenAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getPoolsByToken(address token) public view returns (address[] memory) {\\r\\n        return stakingPoolsByToken[token];\\r\\n    }\\r\\n\\r\\n    function getPoolByID(uint256 id) public view returns (address) {\\r\\n        return stakingPoolByID[id];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfAUser(address user) public view returns (uint256[] memory) {\\r\\n        return poolsOfAUser[user];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfATeam(uint256 teamId) public view returns (uint256[] memory) {\\r\\n        return poolsOfATeam[teamId];\\r\\n    }\\r\\n\\r\\n\\r\\n    // function getPoolsDetail(uint256 from, uint256 length) public view\\r\\n    //     returns (StakingLibrary.PoolFullInfo[] memory)\\r\\n    //     {\\r\\n        \\r\\n    //     require(from > 0 && length > 0, \\\"Not Alllowed\\\");\\r\\n\\r\\n    //     if(from <= length){\\r\\n    //         length = from;\\r\\n    //     }\\r\\n\\r\\n    //     StakingLibrary.PoolFullInfo[] memory fullData = new StakingLibrary.PoolFullInfo[](length);\\r\\n    //     uint8 index = 0;\\r\\n\\r\\n    //     for(uint256 i = from; i > from - length; i--){\\r\\n    //         address poolAddr = getPoolByID(i);\\r\\n    //         StakingLibrary.PoolFullInfo memory poolFullInfo = StakingPool(poolAddr).getProjectInfo();\\r\\n    //         fullData[index] = poolFullInfo;\\r\\n    //         index++;\\r\\n    //     }\\r\\n    //     return fullData;\\r\\n\\r\\n    // }\\r\\n\\r\\n    /* Events */\\r\\n    event Poolcreated(uint256 poolId, address poolAddress, address tokenAddress);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6ea2af00a29910f81cfc06b8fe41b4811929d788c5201f56af33ec2221a9fd6d\",\"license\":\"MIT\"},\"contracts/interfaces/ICampaignFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface ICampaignFeeManager  {\\r\\n   \\r\\n\\r\\n    function getCampaignFee(StakingLibrary.CampaignCategories category) external view returns (uint256);\\r\\n    function getUnstakingFee(StakingLibrary.UnstakingCategories category) external view returns (uint256);\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x67df553a33d3902c1952f1d5589fd163e2216a7c6152efda1ae2cf83096eb925\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n\\r\\ninterface ICreatorContract  {\\r\\n\\r\\n    function sendTokensBackToOwner(address stakingPool, uint256 _tokenId) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x0c33e510b4a373fd2fc833ac70997389d748e20efc42a4d6dc131f6e72333471\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n\\r\\ninterface ICreatorManager  {\\r\\n\\r\\n    function creatorAddress(address user) external view returns (address);\\r\\n    function createACreator(address user) external returns (address);\\r\\n    function walletAddress(address creator) external view returns (address);\\r\\n\\r\\n}\",\"keccak256\":\"0x901a3a9f7c856e16375f65c636ac263d64960e53db0c36ee8802c3a55cbf88f4\",\"license\":\"MIT\"},\"contracts/interfaces/IPMMembership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface IPMMembership  {\\r\\n   \\r\\n    function getUserTokenData(address user) external view returns (StakingLibrary.UserDetail memory);\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n}\",\"keccak256\":\"0x9b3279eb83cc02247dde9af33d60f7b2632f94291d9f65a154afadf44c1f5d8e\",\"license\":\"MIT\"},\"contracts/interfaces/IPMTeamManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IPMTeamManager  {\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n}\",\"keccak256\":\"0x8d73d457e5360ab9fa3bda7b17ad07fa437db848a7f0498873917fc5abd1da32\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    enum UnstakingCategories {\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        REGULAR,\\r\\n        UPGRAGE,\\r\\n        PREMIUIM,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    enum ProfileType {NONE, TEAM, USER}\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct Images {\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_12_months;\\r\\n    }\\r\\n       \\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        Images images;\\r\\n    }\\r\\n\\r\\n    struct UserDetail {\\r\\n        uint256 memberSince;\\r\\n        uint256 memberId;\\r\\n        bool isPremium;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xfd4441f9ea3767d5dcabc5e52dc7ee35801ecdd99cfe5bd76c3d9dc21b3c2157\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005d6938038062005d69833981016040819052620000349162000100565b6200003f3362000093565b600180546001600160a01b039586166001600160a01b03199182161790915560028054948616948216949094179093556003805492851692841692909217909155600480549190931691161790556200015d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000fb57600080fd5b919050565b600080600080608085870312156200011757600080fd5b6200012285620000e3565b93506200013260208601620000e3565b92506200014260408601620000e3565b91506200015260608601620000e3565b905092959194509250565b615bfc806200016d6000396000f3fe608060405260043610620000d25760003560e01c80638dc6c5f61162000089578063a0ac50b91162000060578063a0ac50b91462000250578063c73b302e1462000272578063d4f47e931462000299578063f2fde38b14620002bb57600080fd5b80638dc6c5f614620001f2578063942cc30714620002175780639aa33636146200023957600080fd5b80635055149c14620000d7578063715018a6146200012e5780637a0e6ad314620001485780637f713037146200017c57806386959b4b146200019e5780638da5cb5b14620001d2575b600080fd5b348015620000e457600080fd5b5062000111620000f636600462000b09565b6000908152600960205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200013b57600080fd5b5062000146620002e0565b005b3480156200015557600080fd5b506200016d6200016736600462000b4b565b620002f8565b60405162000125919062000b72565b3480156200018957600080fd5b5060035462000111906001600160a01b031681565b348015620001ab57600080fd5b50620001c3620001bd36600462000b4b565b62000366565b60405162000125919062000bb8565b348015620001df57600080fd5b506000546001600160a01b031662000111565b348015620001ff57600080fd5b506200016d6200021136600462000b09565b620003dd565b3480156200022457600080fd5b5060015462000111906001600160a01b031681565b620001466200024a36600462000e04565b6200043f565b3480156200025d57600080fd5b5060025462000111906001600160a01b031681565b3480156200027f57600080fd5b506200028a60055481565b60405190815260200162000125565b348015620002a657600080fd5b5060045462000111906001600160a01b031681565b348015620002c857600080fd5b5062000146620002da36600462000b4b565b620009cc565b620002ea62000a4f565b620002f6600062000aab565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200035a57602002820191906000526020600020905b81548152602001906001019080831162000345575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200035a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003b35750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200035a5760200282019190600052602060002090815481526020019060010190808311620003455750505050509050919050565b6003546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156200048857600080fd5b505afa1580156200049d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c3919062000f59565b6002546040516329c59e0360e01b81523360048201529290911192506000916001600160a01b03909116906329c59e039060240160606040518083038186803b1580156200051057600080fd5b505afa15801562000525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054b919062000f84565b604001519050811580156200055e575080155b156200057d5760405163eb932d8b60e01b815260040160405180910390fd5b60018560c00151600281111562000598576200059862000fea565b1415620006545760035460e08601516040516331a9108f60e11b815260048101919091526000916001600160a01b031690636352211e9060240160206040518083038186803b158015620005eb57600080fd5b505afa15801562000600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000626919062001000565b90506001600160a01b03811633146200065257604051636edd33cd60e11b815260040160405180910390fd5b505b600154855160405163abe9836360e01b81526000926001600160a01b03169163abe98363916200068891906004016200104e565b60206040518083038186803b158015620006a157600080fd5b505afa158015620006b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006dc919062000f59565b9050803410156200070057604051631cf2628760e31b815260040160405180910390fd5b8451421115620007235760405163474435c160e01b815260040160405180910390fd5b60058054906000620007358362001063565b9091555050600554600454600154604051600093928a928a928a926001600160a01b0390811692169033906200076b9062000afb565b6200077d979695949392919062001134565b604051809103906000f0801580156200079a573d6000803e3d6000fd5b50905060018760c001516002811115620007b857620007b862000fea565b1415620007eb5760e087015160009081526007602090815260408220600554815460018101835591845291909220909101555b6060870180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092556005805487526009865284872080549092168317909155338087526006865284872091548254948501835591875295859020909201919091559451918b015190516323b872dd60e01b81526004810193909352602483019490945260448201939093529116906323b872dd90606401602060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f8919062001268565b506001546040516000916001600160a01b03169034908381818185875af1925050503d806000811462000948576040519150601f19603f3d011682016040523d82523d6000602084013e6200094d565b606091505b50509050806200097057604051635b77072160e11b815260040160405180910390fd5b6005546060808a0151604080519384526001600160a01b038087166020860152909116908301527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a15050505050505050565b620009d662000a4f565b6001600160a01b03811662000a415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a4c8162000aab565b50565b6000546001600160a01b03163314620002f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a38565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614940806200128783390190565b60006020828403121562000b1c57600080fd5b5035919050565b6001600160a01b038116811462000a4c57600080fd5b803562000b468162000b23565b919050565b60006020828403121562000b5e57600080fd5b813562000b6b8162000b23565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000bac5783518352928401929184019160010162000b8e565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000bac5783516001600160a01b03168352928401929184019160010162000bd4565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171562000c385762000c3862000bfb565b60405290565b80356003811062000b4657600080fd5b600082601f83011262000c6057600080fd5b813567ffffffffffffffff8082111562000c7e5762000c7e62000bfb565b604051601f8301601f19908116603f0116810190828211818310171562000ca95762000ca962000bfb565b8160405283815286602085880101111562000cc357600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b4657600080fd5b60006040828403121562000d0857600080fd5b6040516040810181811067ffffffffffffffff8211171562000d2e5762000d2e62000bfb565b604052823581526020928301359281019290925250919050565b60006060828403121562000d5b57600080fd5b6040516060810167ffffffffffffffff828210818311171562000d825762000d8262000bfb565b81604052829350843591508082111562000d9b57600080fd5b62000da98683870162000c4e565b8352602085013591508082111562000dc057600080fd5b62000dce8683870162000c4e565b6020840152604085013591508082111562000de857600080fd5b5062000df78582860162000c4e565b6040830152505092915050565b60008060006080848603121562000e1a57600080fd5b833567ffffffffffffffff8082111562000e3357600080fd5b90850190610100828803121562000e4957600080fd5b62000e5362000c11565b62000e5e8362000c3e565b815260208301358281111562000e7357600080fd5b62000e818982860162000c4e565b60208301525060408301358281111562000e9a57600080fd5b62000ea88982860162000c4e565b60408301525062000ebc6060840162000b39565b606082015262000ecf6080840162000ce3565b608082015260a08301358281111562000ee757600080fd5b62000ef58982860162000c4e565b60a08301525062000f0960c0840162000c3e565b60c082015260e08381013590820152945062000f29876020880162000cf5565b9350606086013591508082111562000f4057600080fd5b5062000f4f8682870162000d48565b9150509250925092565b60006020828403121562000f6c57600080fd5b5051919050565b8051801515811462000b4657600080fd5b60006060828403121562000f9757600080fd5b6040516060810181811067ffffffffffffffff8211171562000fbd5762000fbd62000bfb565b8060405250825181526020830151602082015262000fde6040840162000f73565b60408201529392505050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200101357600080fd5b815162000b6b8162000b23565b6003811062000a4c57634e487b7160e01b600052602160045260246000fd5b6200104a8162001020565b9052565b602081016200105d8362001020565b91905290565b60006000198214156200108657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845260005b81811015620010b55760208185018101518683018201520162001097565b81811115620010c8576000602083870101525b50601f01601f19169290920160200192915050565b6000815160608452620010f460608501826200108d565b9050602083015184820360208601526200110f82826200108d565b915050604083015184820360408601526200112b82826200108d565b95945050505050565b6000610100898352806020840152620011518184018a516200103f565b6020890151816101208501526200116d6102008501826200108d565b915050604089015160ff1980858403016101408601526200118f83836200108d565b925060608b01519150620011af6101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620011dc82826200108d565b91505060c0890151620011f46101c08501826200103f565b5060e08901516101e084015287516040840152602088015160608401528281036080840152620012258188620010dd565b9150506200123e60a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e083015298975050505050505050565b6000602082840312156200127b57600080fd5b62000b6b8262000f7356fe6101006040526000608090815260a06200001c6001605a62000744565b8152601e60208083019190915260408051918201815260008252909101528051601f8054909190829060ff191660018360028111156200006057620000606200072e565b02179055506020828101516001830155604083015160028301556060830151805162000093926003850192019062000604565b5050604080516080810190915290508060018152602001620000b8600160b462000744565b815260326020808301919091526040805191820181526000825290910152805160238054909190829060ff19166001836002811115620000fc57620000fc6200072e565b0217905550602082810151600183015560408301516002830155606083015180516200012f926003850192019062000604565b505060408051608081019091529050806002815260200162000155600161016d62000744565b815260506020808301919091526040805191820181526000825290910152805160278054909190829060ff191660018360028111156200019957620001996200072e565b021790555060208281015160018301556040830151600283015560608301518051620001cc926003850192019062000604565b505050348015620001dc57600080fd5b506040516200494038038062004940833981016040819052620001ff91620009c8565b6020808701518051909182916200021d916000919084019062000604565b5080516200023390600190602084019062000604565b5050845180516200024c92506022916020019062000604565b5060208085015180516200026592602692019062000604565b50604084015180516200028191602a9160209091019062000604565b5060008052602b602052601f80547fe18c65fb8491ea105d3652ed62258476aaccd771ae89682addbba12f33acc62a8054909160ff1690829060ff19166001836002811115620002d557620002d56200072e565b021790555060018201548160010155600282015481600201556003820181600301908054620003049062000b64565b6200031192919062000693565b505060016000819052602b602052602380547ffcc3d43705633578a5e8f1b6d6f38d08eb8cb891174edcc94b1a54972a1aebbd80549294509260ff90911691839160ff19909116908360028111156200036e576200036e6200072e565b0217905550600182015481600101556002820154816002015560038201816003019080546200039d9062000b64565b620003aa92919062000693565b505060026000819052602b602052602780547fbd6c10e6ce287735500a1c033be76c57d5e632addc2ff6eff6bb587b8ee0d95c80549294509260ff90911691839160ff199091169060019084908111156200040957620004096200072e565b021790555060018201548160010155600282015481600201556003820181600301908054620004389062000b64565b6200044592919062000693565b5050865160138054899350909190829060ff191660018360028111156200047057620004706200072e565b021790555060208281015180516200048f926001850192019062000604565b5060408201518051620004ad91600284019160209091019062000604565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a082015180516200050591600484019160209091019062000604565b5060c082015160058201805460ff191660018360028111156200052c576200052c6200072e565b021790555060e091909101516006909101558451601a55602080860151601b55845180518692601c9262000567928492919091019062000604565b50602082810151805162000582926001850192019062000604565b5060408201518051620005a091600284019160209091019062000604565b505050600c96909655600d8054306001600160a01b03199182161790915560209490940151600e556012805485166001600160a01b03978816179055600a8054851692871692909217909155600b805490931694169390931790555062000ba19050565b828054620006129062000b64565b90600052602060002090601f01602090048101928262000636576000855562000681565b82601f106200065157805160ff191683800117855562000681565b8280016001018555821562000681579182015b828111156200068157825182559160200191906001019062000664565b506200068f92915062000717565b5090565b828054620006a19062000b64565b90600052602060002090601f016020900481019282620006c5576000855562000681565b82601f10620006d8578054855562000681565b828001600101855582156200068157600052602060002091601f016020900482015b8281111562000681578254825591600101919060010190620006fa565b5b808211156200068f576000815560010162000718565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156200076d57634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620007ae57620007ae62000772565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007df57620007df62000772565b604052919050565b805160038110620007f757600080fd5b919050565b600082601f8301126200080e57600080fd5b81516001600160401b038111156200082a576200082a62000772565b602062000840601f8301601f19168201620007b4565b82815285828487010111156200085557600080fd5b60005b838110156200087557858101830151828201840152820162000858565b83811115620008875760008385840101525b5095945050505050565b80516001600160a01b0381168114620007f757600080fd5b805160ff81168114620007f757600080fd5b600060408284031215620008ce57600080fd5b604080519081016001600160401b0381118282101715620008f357620008f362000772565b604052825181526020928301519281019290925250919050565b6000606082840312156200092057600080fd5b604051606081016001600160401b03808211838310171562000946576200094662000772565b8160405282935084519150808211156200095f57600080fd5b6200096d86838701620007fc565b835260208501519150808211156200098457600080fd5b6200099286838701620007fc565b60208401526040850151915080821115620009ac57600080fd5b50620009bb85828601620007fc565b6040830152505092915050565b600080600080600080600061010080898b031215620009e657600080fd5b885160208a01519098506001600160401b038082111562000a0657600080fd5b818b01915082828d03121562000a1b57600080fd5b62000a2562000788565b925062000a3282620007e7565b835260208201518181111562000a4757600080fd5b62000a558d828501620007fc565b60208501525060408201518181111562000a6e57600080fd5b62000a7c8d828501620007fc565b60408501525062000a906060830162000891565b606084015262000aa360808301620008a9565b608084015260a08201518181111562000abb57600080fd5b62000ac98d828501620007fc565b60a08501525062000add60c08301620007e7565b60c084015260e082015160e084015282985062000afe8c60408d01620008bb565b975060808b015192508083111562000b1557600080fd5b505062000b258a828b016200090d565b94505062000b3660a0890162000891565b925062000b4660c0890162000891565b915062000b5660e0890162000891565b905092959891949750929550565b600181811c9082168062000b7957607f821691505b6020821081141562000b9b57634e487b7160e01b600052602260045260246000fd5b50919050565b613d8f8062000bb16000396000f3fe6080604052600436106101b75760003560e01c8063608e4dd0116100ec578063a3a439311161008a578063c87b56dd11610064578063c87b56dd14610531578063d4f47e9314610551578063e7301f0e14610571578063e985e9c51461058657600080fd5b8063a3a439311461049b578063b09afec1146104e4578063b88d4fde1461051157600080fd5b806370a08231116100c657806370a0823114610426578063942cc3071461044657806395d89b4114610466578063a22cb4651461047b57600080fd5b8063608e4dd0146103d15780636352211e146103e457806367c897fe1461040457600080fd5b80631df025c611610159578063277c2d6811610133578063277c2d68146103515780632f745c591461037157806342842e0e146103915780634f6ccce7146103b157600080fd5b80631df025c6146102c657806320e0c51c1461030357806323b872dd1461033157600080fd5b8063095ea7b311610195578063095ea7b31461024b5780630a851b401461026d5780630c12252b1461029257806318160ddd146102a757600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046133e4565b6105cf565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506102066105fa565b6040516101e89190613459565b34801561021f57600080fd5b5061023361022e36600461346c565b61068c565b6040516001600160a01b0390911681526020016101e8565b34801561025757600080fd5b5061026b61026636600461349a565b6106b3565b005b34801561027957600080fd5b506102826107ce565b6040516101e894939291906134ec565b34801561029e57600080fd5b50610282610873565b3480156102b357600080fd5b506008545b6040519081526020016101e8565b3480156102d257600080fd5b506102e66102e1366004613524565b610895565b6040805193845260ff9092166020840152908201526060016101e8565b34801561030f57600080fd5b5061032361031e366004613550565b610ac0565b6040516101e892919061372b565b34801561033d57600080fd5b5061026b61034c36600461379d565b610f47565b34801561035d57600080fd5b5061026b61036c3660046137de565b610f78565b34801561037d57600080fd5b506102b861038c36600461349a565b611626565b34801561039d57600080fd5b5061026b6103ac36600461379d565b6116bc565b3480156103bd57600080fd5b506102b86103cc36600461346c565b6116d7565b61026b6103df36600461346c565b61176a565b3480156103f057600080fd5b506102336103ff36600461346c565b611c37565b34801561041057600080fd5b50610419611c97565b6040516101e89190613863565b34801561043257600080fd5b506102b8610441366004613550565b61214d565b34801561045257600080fd5b50600b54610233906001600160a01b031681565b34801561047257600080fd5b506102066121d3565b34801561048757600080fd5b5061026b61049636600461391c565b6121e2565b3480156104a757600080fd5b506104bb6104b636600461346c565b6121f1565b6040516101e89493929190938452602084019290925260ff166040830152606082015260800190565b3480156104f057600080fd5b506105046104ff36600461346c565b612387565b6040516101e8919061394a565b34801561051d57600080fd5b5061026b61052c366004613973565b6124f0565b34801561053d57600080fd5b5061020661054c36600461346c565b612528565b34801561055d57600080fd5b50600a54610233906001600160a01b031681565b34801561057d57600080fd5b5061028261259c565b34801561059257600080fd5b506101dc6105a1366004613a53565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806105f457506105f4826125be565b92915050565b60606000805461060990613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461063590613a81565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505050905090565b60006106978261260e565b506000908152600460205260409020546001600160a01b031690565b60006106be82611c37565b9050806001600160a01b0316836001600160a01b031614156107315760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061074d575061074d81336105a1565b6107bf5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610728565b6107c98383612670565b505050565b602380546024546025546026805460ff9094169492939192916107f090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461081c90613a81565b80156108695780601f1061083e57610100808354040283529160200191610869565b820191906000526020600020905b81548152906001019060200180831161084c57829003601f168201915b5050505050905084565b601f80546020546021546022805460ff9094169492939192916107f090613a81565b60008080806108a48686613ad2565b905060006108b28742613ad2565b90506000826108c2836064613ae9565b6108cc9190613b08565b9050603281101561096557600b54604051633b6a8f1d60e01b8152600097508796506001600160a01b0390911690633b6a8f1d9061090e908890600401613b2a565b60206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190613b44565b9350610ab4565b603281101580156109765750605081105b156109c757601e9450606461098b868b613ae9565b6109959190613b08565b600b54604051633b6a8f1d60e01b81529197506001600160a01b031690633b6a8f1d9061090e90600190600401613b2a565b605081101580156109d85750606481105b15610a29576032945060646109ed8a87613ae9565b6109f79190613b08565b600b54604051633b6a8f1d60e01b81529197506001600160a01b031690633b6a8f1d9061090e90600290600401613b2a565b600b54604051633b6a8f1d60e01b81528a9750606496506001600160a01b0390911690633b6a8f1d90610a6190600390600401613b2a565b60206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190613b44565b93505b50505093509350939050565b610ac8613176565b60606000610ad58461214d565b905060008167ffffffffffffffff811115610af257610af261395d565b604051908082528060200260200182016040528015610b2b57816020015b610b186131d9565b815260200190600190039081610b105790505b50905060005b82811015610cde576000610b458783611626565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610bd090613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc90613a81565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e09091015284519091508190859085908110610cbe57610cbe613b5d565b602002602001018190525050508080610cd690613b73565b915050610b31565b5060408051610100810190915260138054909183918390829060ff166002811115610d0b57610d0b6134c6565b6002811115610d1c57610d1c6134c6565b8152602001600182018054610d3090613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c90613a81565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b50505050508152602001600282018054610dc290613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610dee90613a81565b8015610e3b5780601f10610e1057610100808354040283529160200191610e3b565b820191906000526020600020905b815481529060010190602001808311610e1e57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191610e7b90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea790613a81565b8015610ef45780601f10610ec957610100808354040283529160200191610ef4565b820191906000526020600020905b815481529060010190602001808311610ed757829003601f168201915b5050509183525050600582015460209091019060ff166002811115610f1b57610f1b6134c6565b6002811115610f2c57610f2c6134c6565b81526020016006820154815250509150935093505050915091565b610f5133826126de565b610f6d5760405162461bcd60e51b815260040161072890613b8e565b6107c983838361275d565b601a54421015610f9b57604051638f2d4c2d60e01b815260040160405180910390fd5b6000602b6000836002811115610fb357610fb36134c6565b6002811115610fc457610fc46134c6565b8152602081019190915260409081016000208151608081019092528054829060ff166002811115610ff757610ff76134c6565b6002811115611008576110086134c6565b8152602001600182015481526020016002820154815260200160038201805461103090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90613a81565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b5050505050815250509050600060648260400151856110c89190613ae9565b6110d29190613b08565b905080600c6002015410156110fa576040516348eb126760e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b15801561113e57600080fd5b505afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190613bdb565b90506001600160a01b03811661120657600a546040516331b77b8960e21b81523360048201526001600160a01b039091169063c6ddee2490602401602060405180830381600087803b1580156111cb57600080fd5b505af11580156111df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112039190613bdb565b90505b6011805490600061121683613b73565b91905055506000602b6000866002811115611233576112336134c6565b6002811115611244576112446134c6565b8152602001908152602001600020600301805461126090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461128c90613a81565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b5050604080516101e081018252308152600c5460208201529081018b90526016546001600160a01b039081166060830152336080830152871660a082015260115460c082015260e0810185905293945050610100830191508790506002811115611345576113456134c6565b60ff1681526020014281526020018560200151426113639190613bf8565b8152602080820186905260006040808401829052606080850183905260809485018390526011548352602c845291819020855181546001600160a01b039182166001600160a01b0319918216178355878601516001840155928701516002830155928601516003820180549185169184169190911790559385015160048501805491841691831691909117905560a085015160058501805491909316911617905560c0830151600683015560e08301518051611425926007850192019061327b565b5061010082015160088201805460ff1990811660ff938416179091556101208401516009840155610140840151600a840155610160840151600b840155610180840151600c8401805483169115159190911790556101a0840151600d8401556101c090930151600e909201805490931691161790556016546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201899052909116906323b872dd90606401602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613c10565b5082600c600201600082825461153c9190613ad2565b9091555050600f8054879190600090611556908490613bf8565b90915550506010805490600061156b83613b73565b90915550506011546040516bffffffffffffffffffffffff193060601b1660208201526115ab9184916034016040516020818303038152906040526128ce565b600c546011547fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa919033898960028111156115e8576115e86134c6565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a1505050505050565b60006116318361214d565b82106116935760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610728565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107c9838383604051806020016040528060008152506124f0565b60006116e260085490565b82106117455760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610728565b6008828154811061175857611758613b5d565b90600052602060002001549050919050565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e0840191906117f290613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461181e90613a81565b801561186b5780601f106118405761010080835404028352916020019161186b565b820191906000526020600020905b81548152906001019060200180831161184e57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b830154608080840191909152600c8401548216151560a0840152600d84015460c0840152600e909301541660e0909101528101519091506001600160a01b031633146118f757604051636ff49be560e01b815260040160405180910390fd5b61016081015161191a57604051630638c18f60e51b815260040160405180910390fd5b8061018001511561193e57604051636dc6682d60e01b815260040160405180910390fd5b6000828152602c60205260408120600c01805460ff191660011790556101608201516101208301516101408401518392839261197992610895565b6000888152602c60205260408120600d8101859055600e01805460ff191660ff85161790556101608801519396509194509250906119b8908590613ad2565b905080600c60020160008282546119cf9190613bf8565b9091555050348211156119f557604051631cf2628760e31b815260040160405180910390fd5b600b546040516000916001600160a01b03169034908381818185875af1925050503d8060008114611a42576040519150601f19603f3d011682016040523d82523d6000602084013e611a47565b606091505b5050905080611a6957604051635b77072160e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae59190613bdb565b6040516357fecd5d60e11b8152306004820152602481018a90529091506001600160a01b0382169063affd9aba90604401600060405180830381600087803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505060165460808a015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018b90529116925063a9059cbb9150604401602060405180830381600087803b158015611b9a57600080fd5b505af1158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190613c10565b50600c546040808901516101008a015182519384523360208501529183015260ff166060820152608081018790527f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d9060a00160405180910390a15050505050505050565b6000818152600260205260408120546001600160a01b0316806105f45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610728565b611c9f6132ff565b6040805161016081018252600c5460808201908152600d546001600160a01b0390811660a0840152600e5460c0840152600f5460e08401526010546101008085019190915260115461012085015260125490911661014084015290825282519081019092526013805491926020840192909190829060ff166002811115611d2857611d286134c6565b6002811115611d3957611d396134c6565b8152602001600182018054611d4d90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7990613a81565b8015611dc65780601f10611d9b57610100808354040283529160200191611dc6565b820191906000526020600020905b815481529060010190602001808311611da957829003601f168201915b50505050508152602001600282018054611ddf90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b90613a81565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611e9890613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec490613a81565b8015611f115780601f10611ee657610100808354040283529160200191611f11565b820191906000526020600020905b815481529060010190602001808311611ef457829003601f168201915b5050509183525050600582015460209091019060ff166002811115611f3857611f386134c6565b6002811115611f4957611f496134c6565b81526020016006820154815250508152602001601a604051806040016040529081600082015481526020016001820154815250508152602001601c604051806060016040529081600082018054611f9f90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcb90613a81565b80156120185780601f10611fed57610100808354040283529160200191612018565b820191906000526020600020905b815481529060010190602001808311611ffb57829003601f168201915b5050505050815260200160018201805461203190613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461205d90613a81565b80156120aa5780601f1061207f576101008083540402835291602001916120aa565b820191906000526020600020905b81548152906001019060200180831161208d57829003601f168201915b505050505081526020016002820180546120c390613a81565b80601f01602080910402602001604051908101604052809291908181526020018280546120ef90613a81565b801561213c5780601f106121115761010080835404028352916020019161213c565b820191906000526020600020905b81548152906001019060200180831161211f57829003601f168201915b505050505081525050815250905090565b60006001600160a01b0382166121b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610728565b506001600160a01b031660009081526003602052604090205490565b60606001805461060990613a81565b6121ed338383612901565b5050565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e08401919061228190613a81565b80601f01602080910402602001604051908101604052809291908181526020018280546122ad90613a81565b80156122fa5780601f106122cf576101008083540402835291602001916122fa565b820191906000526020600020905b8154815290600101906020018083116122dd57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e090910152610160810151610120820151610140830151919750919250612379918791610895565b969891975095945092505050565b61238f6131d9565b6000828152602c602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061241590613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461244190613a81565b801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e09091015292915050565b6124fa33836126de565b6125165760405162461bcd60e51b815260040161072890613b8e565b612522848484846129d0565b50505050565b60606125338261260e565b600061254a60408051602081019091526000815290565b9050600081511161256a5760405180602001604052806000815250612595565b8061257484612a03565b604051602001612585929190613c2d565b6040516020818303038152906040525b9392505050565b60278054602854602954602a805460ff9094169492939192916107f090613a81565b60006001600160e01b031982166380ac58cd60e01b14806125ef57506001600160e01b03198216635b5e139f60e01b145b806105f457506301ffc9a760e01b6001600160e01b03198316146105f4565b6000818152600260205260409020546001600160a01b031661266d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610728565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906126a582611c37565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806126ea83611c37565b9050806001600160a01b0316846001600160a01b0316148061273157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806127555750836001600160a01b031661274a8461068c565b6001600160a01b0316145b949350505050565b826001600160a01b031661277082611c37565b6001600160a01b0316146127965760405162461bcd60e51b815260040161072890613c5c565b6001600160a01b0382166127f85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610728565b6128058383836001612aa0565b826001600160a01b031661281882611c37565b6001600160a01b03161461283e5760405162461bcd60e51b815260040161072890613c5c565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6128d88383612be0565b6128e56000848484612d79565b6107c95760405162461bcd60e51b815260040161072890613ca1565b816001600160a01b0316836001600160a01b031614156129635760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610728565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6129db84848461275d565b6129e784848484612d79565b6125225760405162461bcd60e51b815260040161072890613ca1565b60606000612a1083612e86565b600101905060008167ffffffffffffffff811115612a3057612a3061395d565b6040519080825280601f01601f191660200182016040528015612a5a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612a9357612a98565b612a64565b509392505050565b612aac84848484612f5e565b6001811115612b1b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610728565b816001600160a01b038516612b7757612b7281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612b9a565b836001600160a01b0316856001600160a01b031614612b9a57612b9a8582612fe6565b6001600160a01b038416612bb657612bb181613083565b612bd9565b846001600160a01b0316846001600160a01b031614612bd957612bd98482613132565b5050505050565b6001600160a01b038216612c365760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610728565b6000818152600260205260409020546001600160a01b031615612c9b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610728565b612ca9600083836001612aa0565b6000818152600260205260409020546001600160a01b031615612d0e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610728565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15612e7b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612dbd903390899088908890600401613cf3565b602060405180830381600087803b158015612dd757600080fd5b505af1925050508015612e07575060408051601f3d908101601f19168201909252612e0491810190613d26565b60015b612e61573d808015612e35576040519150601f19603f3d011682016040523d82523d6000602084013e612e3a565b606091505b508051612e595760405162461bcd60e51b815260040161072890613ca1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612755565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612ec55772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612ef1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612f0f57662386f26fc10000830492506010015b6305f5e1008310612f27576305f5e100830492506008015b6127108310612f3b57612710830492506004015b60648310612f4d576064830492506002015b600a83106105f45760010192915050565b6001811115612522576001600160a01b03841615612fa4576001600160a01b03841660009081526003602052604081208054839290612f9e908490613ad2565b90915550505b6001600160a01b03831615612522576001600160a01b03831660009081526003602052604081208054839290612fdb908490613bf8565b909155505050505050565b60006001612ff38461214d565b612ffd9190613ad2565b600083815260076020526040902054909150808214613050576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061309590600190613ad2565b600083815260096020526040812054600880549394509092849081106130bd576130bd613b5d565b9060005260206000200154905080600883815481106130de576130de613b5d565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061311657613116613d43565b6001900381819060005260206000200160009055905550505050565b600061313d8361214d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001600060028111156131cc576131cc6134c6565b8152602001600081525090565b604051806101e0016040528060006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b82805461328790613a81565b90600052602060002090601f0160209004810192826132a957600085556132ef565b82601f106132c257805160ff19168380011785556132ef565b828001600101855582156132ef579182015b828111156132ef5782518255916020019190600101906132d4565b506132fb9291506133b9565b5090565b604051806080016040528061335c6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001613369613176565b815260200161338b604051806040016040528060008152602001600081525090565b81526020016133b460405180606001604052806060815260200160608152602001606081525090565b905290565b5b808211156132fb57600081556001016133ba565b6001600160e01b03198116811461266d57600080fd5b6000602082840312156133f657600080fd5b8135612595816133ce565b60005b8381101561341c578181015183820152602001613404565b838111156125225750506000910152565b60008151808452613445816020860160208601613401565b601f01601f19169290920160200192915050565b602081526000612595602083018461342d565b60006020828403121561347e57600080fd5b5035919050565b6001600160a01b038116811461266d57600080fd5b600080604083850312156134ad57600080fd5b82356134b881613485565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6003811061266d5761266d6134c6565b6134f5856134dc565b84815283602082015282604082015260806060820152600061351a608083018461342d565b9695505050505050565b60008060006060848603121561353957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561356257600080fd5b813561259581613485565b613576816134dc565b9052565b6000610100825161358a816134dc565b8085525060208301518160208601526135a58286018261342d565b915050604083015184820360408601526135bf828261342d565b91505060018060a01b03606084015116606085015260808301516135e8608086018260ff169052565b5060a083015184820360a0860152613600828261342d565b91505060c083015161361560c086018261356d565b5060e083015160e08501528091505092915050565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161366a60608601826001600160a01b03169052565b50608083015161368560808601826001600160a01b03169052565b5060a08301516136a060a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136c28286018261342d565b915050610100808401516136da8287018260ff169052565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c09283015160ff1692909301919091525090565b60408152600061373e604083018561357a565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101561378e57601f1987840301855261377c83835161362a565b94860194925090850190600101613760565b50909998505050505050505050565b6000806000606084860312156137b257600080fd5b83356137bd81613485565b925060208401356137cd81613485565b929592945050506040919091013590565b600080604083850312156137f157600080fd5b8235915060208301356003811061380757600080fd5b809150509250929050565b6000815160608452613827606085018261342d565b905060208301518482036020860152613840828261342d565b9150506040830151848203604086015261385a828261342d565b95945050505050565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526138da61018085018361357a565b60408601518051610120870152602001516101408601526060860151858203601f19018387015290925061351a8382613812565b801515811461266d57600080fd5b6000806040838503121561392f57600080fd5b823561393a81613485565b915060208301356138078161390e565b602081526000612595602083018461362a565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561398957600080fd5b843561399481613485565b935060208501356139a481613485565b925060408501359150606085013567ffffffffffffffff808211156139c857600080fd5b818701915087601f8301126139dc57600080fd5b8135818111156139ee576139ee61395d565b604051601f8201601f19908116603f01168101908382118183101715613a1657613a1661395d565b816040528281528a6020848701011115613a2f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613a6657600080fd5b8235613a7181613485565b9150602083013561380781613485565b600181811c90821680613a9557607f821691505b60208210811415613ab657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ae457613ae4613abc565b500390565b6000816000190483118215151615613b0357613b03613abc565b500290565b600082613b2557634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613b3e57613b3e6134c6565b91905290565b600060208284031215613b5657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613b8757613b87613abc565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060208284031215613bed57600080fd5b815161259581613485565b60008219821115613c0b57613c0b613abc565b500190565b600060208284031215613c2257600080fd5b81516125958161390e565b60008351613c3f818460208801613401565b835190830190613c53818360208801613401565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061351a9083018461342d565b600060208284031215613d3857600080fd5b8151612595816133ce565b634e487b7160e01b600052603160045260246000fdfea264697066735822122001691b08364f6e1d905c5d209dd5f514f6ed2d7f3fdd310013c6d579611493ab64736f6c63430008090033a26469706673582212200dbfe57bc17a0a5676a2d2135fefec6402074465ca771b04503253cf784a748264736f6c63430008090033",
  "deployedBytecode": "0x608060405260043610620000d25760003560e01c80638dc6c5f61162000089578063a0ac50b91162000060578063a0ac50b91462000250578063c73b302e1462000272578063d4f47e931462000299578063f2fde38b14620002bb57600080fd5b80638dc6c5f614620001f2578063942cc30714620002175780639aa33636146200023957600080fd5b80635055149c14620000d7578063715018a6146200012e5780637a0e6ad314620001485780637f713037146200017c57806386959b4b146200019e5780638da5cb5b14620001d2575b600080fd5b348015620000e457600080fd5b5062000111620000f636600462000b09565b6000908152600960205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200013b57600080fd5b5062000146620002e0565b005b3480156200015557600080fd5b506200016d6200016736600462000b4b565b620002f8565b60405162000125919062000b72565b3480156200018957600080fd5b5060035462000111906001600160a01b031681565b348015620001ab57600080fd5b50620001c3620001bd36600462000b4b565b62000366565b60405162000125919062000bb8565b348015620001df57600080fd5b506000546001600160a01b031662000111565b348015620001ff57600080fd5b506200016d6200021136600462000b09565b620003dd565b3480156200022457600080fd5b5060015462000111906001600160a01b031681565b620001466200024a36600462000e04565b6200043f565b3480156200025d57600080fd5b5060025462000111906001600160a01b031681565b3480156200027f57600080fd5b506200028a60055481565b60405190815260200162000125565b348015620002a657600080fd5b5060045462000111906001600160a01b031681565b348015620002c857600080fd5b5062000146620002da36600462000b4b565b620009cc565b620002ea62000a4f565b620002f6600062000aab565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200035a57602002820191906000526020600020905b81548152602001906001019080831162000345575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200035a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003b35750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200035a5760200282019190600052602060002090815481526020019060010190808311620003455750505050509050919050565b6003546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156200048857600080fd5b505afa1580156200049d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c3919062000f59565b6002546040516329c59e0360e01b81523360048201529290911192506000916001600160a01b03909116906329c59e039060240160606040518083038186803b1580156200051057600080fd5b505afa15801562000525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054b919062000f84565b604001519050811580156200055e575080155b156200057d5760405163eb932d8b60e01b815260040160405180910390fd5b60018560c00151600281111562000598576200059862000fea565b1415620006545760035460e08601516040516331a9108f60e11b815260048101919091526000916001600160a01b031690636352211e9060240160206040518083038186803b158015620005eb57600080fd5b505afa15801562000600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000626919062001000565b90506001600160a01b03811633146200065257604051636edd33cd60e11b815260040160405180910390fd5b505b600154855160405163abe9836360e01b81526000926001600160a01b03169163abe98363916200068891906004016200104e565b60206040518083038186803b158015620006a157600080fd5b505afa158015620006b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006dc919062000f59565b9050803410156200070057604051631cf2628760e31b815260040160405180910390fd5b8451421115620007235760405163474435c160e01b815260040160405180910390fd5b60058054906000620007358362001063565b9091555050600554600454600154604051600093928a928a928a926001600160a01b0390811692169033906200076b9062000afb565b6200077d979695949392919062001134565b604051809103906000f0801580156200079a573d6000803e3d6000fd5b50905060018760c001516002811115620007b857620007b862000fea565b1415620007eb5760e087015160009081526007602090815260408220600554815460018101835591845291909220909101555b6060870180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092556005805487526009865284872080549092168317909155338087526006865284872091548254948501835591875295859020909201919091559451918b015190516323b872dd60e01b81526004810193909352602483019490945260448201939093529116906323b872dd90606401602060405180830381600087803b158015620008bd57600080fd5b505af1158015620008d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f8919062001268565b506001546040516000916001600160a01b03169034908381818185875af1925050503d806000811462000948576040519150601f19603f3d011682016040523d82523d6000602084013e6200094d565b606091505b50509050806200097057604051635b77072160e11b815260040160405180910390fd5b6005546060808a0151604080519384526001600160a01b038087166020860152909116908301527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a15050505050505050565b620009d662000a4f565b6001600160a01b03811662000a415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a4c8162000aab565b50565b6000546001600160a01b03163314620002f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a38565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614940806200128783390190565b60006020828403121562000b1c57600080fd5b5035919050565b6001600160a01b038116811462000a4c57600080fd5b803562000b468162000b23565b919050565b60006020828403121562000b5e57600080fd5b813562000b6b8162000b23565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000bac5783518352928401929184019160010162000b8e565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000bac5783516001600160a01b03168352928401929184019160010162000bd4565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171562000c385762000c3862000bfb565b60405290565b80356003811062000b4657600080fd5b600082601f83011262000c6057600080fd5b813567ffffffffffffffff8082111562000c7e5762000c7e62000bfb565b604051601f8301601f19908116603f0116810190828211818310171562000ca95762000ca962000bfb565b8160405283815286602085880101111562000cc357600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b4657600080fd5b60006040828403121562000d0857600080fd5b6040516040810181811067ffffffffffffffff8211171562000d2e5762000d2e62000bfb565b604052823581526020928301359281019290925250919050565b60006060828403121562000d5b57600080fd5b6040516060810167ffffffffffffffff828210818311171562000d825762000d8262000bfb565b81604052829350843591508082111562000d9b57600080fd5b62000da98683870162000c4e565b8352602085013591508082111562000dc057600080fd5b62000dce8683870162000c4e565b6020840152604085013591508082111562000de857600080fd5b5062000df78582860162000c4e565b6040830152505092915050565b60008060006080848603121562000e1a57600080fd5b833567ffffffffffffffff8082111562000e3357600080fd5b90850190610100828803121562000e4957600080fd5b62000e5362000c11565b62000e5e8362000c3e565b815260208301358281111562000e7357600080fd5b62000e818982860162000c4e565b60208301525060408301358281111562000e9a57600080fd5b62000ea88982860162000c4e565b60408301525062000ebc6060840162000b39565b606082015262000ecf6080840162000ce3565b608082015260a08301358281111562000ee757600080fd5b62000ef58982860162000c4e565b60a08301525062000f0960c0840162000c3e565b60c082015260e08381013590820152945062000f29876020880162000cf5565b9350606086013591508082111562000f4057600080fd5b5062000f4f8682870162000d48565b9150509250925092565b60006020828403121562000f6c57600080fd5b5051919050565b8051801515811462000b4657600080fd5b60006060828403121562000f9757600080fd5b6040516060810181811067ffffffffffffffff8211171562000fbd5762000fbd62000bfb565b8060405250825181526020830151602082015262000fde6040840162000f73565b60408201529392505050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200101357600080fd5b815162000b6b8162000b23565b6003811062000a4c57634e487b7160e01b600052602160045260246000fd5b6200104a8162001020565b9052565b602081016200105d8362001020565b91905290565b60006000198214156200108657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845260005b81811015620010b55760208185018101518683018201520162001097565b81811115620010c8576000602083870101525b50601f01601f19169290920160200192915050565b6000815160608452620010f460608501826200108d565b9050602083015184820360208601526200110f82826200108d565b915050604083015184820360408601526200112b82826200108d565b95945050505050565b6000610100898352806020840152620011518184018a516200103f565b6020890151816101208501526200116d6102008501826200108d565b915050604089015160ff1980858403016101408601526200118f83836200108d565b925060608b01519150620011af6101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620011dc82826200108d565b91505060c0890151620011f46101c08501826200103f565b5060e08901516101e084015287516040840152602088015160608401528281036080840152620012258188620010dd565b9150506200123e60a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e083015298975050505050505050565b6000602082840312156200127b57600080fd5b62000b6b8262000f7356fe6101006040526000608090815260a06200001c6001605a62000744565b8152601e60208083019190915260408051918201815260008252909101528051601f8054909190829060ff191660018360028111156200006057620000606200072e565b02179055506020828101516001830155604083015160028301556060830151805162000093926003850192019062000604565b5050604080516080810190915290508060018152602001620000b8600160b462000744565b815260326020808301919091526040805191820181526000825290910152805160238054909190829060ff19166001836002811115620000fc57620000fc6200072e565b0217905550602082810151600183015560408301516002830155606083015180516200012f926003850192019062000604565b505060408051608081019091529050806002815260200162000155600161016d62000744565b815260506020808301919091526040805191820181526000825290910152805160278054909190829060ff191660018360028111156200019957620001996200072e565b021790555060208281015160018301556040830151600283015560608301518051620001cc926003850192019062000604565b505050348015620001dc57600080fd5b506040516200494038038062004940833981016040819052620001ff91620009c8565b6020808701518051909182916200021d916000919084019062000604565b5080516200023390600190602084019062000604565b5050845180516200024c92506022916020019062000604565b5060208085015180516200026592602692019062000604565b50604084015180516200028191602a9160209091019062000604565b5060008052602b602052601f80547fe18c65fb8491ea105d3652ed62258476aaccd771ae89682addbba12f33acc62a8054909160ff1690829060ff19166001836002811115620002d557620002d56200072e565b021790555060018201548160010155600282015481600201556003820181600301908054620003049062000b64565b6200031192919062000693565b505060016000819052602b602052602380547ffcc3d43705633578a5e8f1b6d6f38d08eb8cb891174edcc94b1a54972a1aebbd80549294509260ff90911691839160ff19909116908360028111156200036e576200036e6200072e565b0217905550600182015481600101556002820154816002015560038201816003019080546200039d9062000b64565b620003aa92919062000693565b505060026000819052602b602052602780547fbd6c10e6ce287735500a1c033be76c57d5e632addc2ff6eff6bb587b8ee0d95c80549294509260ff90911691839160ff199091169060019084908111156200040957620004096200072e565b021790555060018201548160010155600282015481600201556003820181600301908054620004389062000b64565b6200044592919062000693565b5050865160138054899350909190829060ff191660018360028111156200047057620004706200072e565b021790555060208281015180516200048f926001850192019062000604565b5060408201518051620004ad91600284019160209091019062000604565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a082015180516200050591600484019160209091019062000604565b5060c082015160058201805460ff191660018360028111156200052c576200052c6200072e565b021790555060e091909101516006909101558451601a55602080860151601b55845180518692601c9262000567928492919091019062000604565b50602082810151805162000582926001850192019062000604565b5060408201518051620005a091600284019160209091019062000604565b505050600c96909655600d8054306001600160a01b03199182161790915560209490940151600e556012805485166001600160a01b03978816179055600a8054851692871692909217909155600b805490931694169390931790555062000ba19050565b828054620006129062000b64565b90600052602060002090601f01602090048101928262000636576000855562000681565b82601f106200065157805160ff191683800117855562000681565b8280016001018555821562000681579182015b828111156200068157825182559160200191906001019062000664565b506200068f92915062000717565b5090565b828054620006a19062000b64565b90600052602060002090601f016020900481019282620006c5576000855562000681565b82601f10620006d8578054855562000681565b828001600101855582156200068157600052602060002091601f016020900482015b8281111562000681578254825591600101919060010190620006fa565b5b808211156200068f576000815560010162000718565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156200076d57634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b0381118282101715620007ae57620007ae62000772565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007df57620007df62000772565b604052919050565b805160038110620007f757600080fd5b919050565b600082601f8301126200080e57600080fd5b81516001600160401b038111156200082a576200082a62000772565b602062000840601f8301601f19168201620007b4565b82815285828487010111156200085557600080fd5b60005b838110156200087557858101830151828201840152820162000858565b83811115620008875760008385840101525b5095945050505050565b80516001600160a01b0381168114620007f757600080fd5b805160ff81168114620007f757600080fd5b600060408284031215620008ce57600080fd5b604080519081016001600160401b0381118282101715620008f357620008f362000772565b604052825181526020928301519281019290925250919050565b6000606082840312156200092057600080fd5b604051606081016001600160401b03808211838310171562000946576200094662000772565b8160405282935084519150808211156200095f57600080fd5b6200096d86838701620007fc565b835260208501519150808211156200098457600080fd5b6200099286838701620007fc565b60208401526040850151915080821115620009ac57600080fd5b50620009bb85828601620007fc565b6040830152505092915050565b600080600080600080600061010080898b031215620009e657600080fd5b885160208a01519098506001600160401b038082111562000a0657600080fd5b818b01915082828d03121562000a1b57600080fd5b62000a2562000788565b925062000a3282620007e7565b835260208201518181111562000a4757600080fd5b62000a558d828501620007fc565b60208501525060408201518181111562000a6e57600080fd5b62000a7c8d828501620007fc565b60408501525062000a906060830162000891565b606084015262000aa360808301620008a9565b608084015260a08201518181111562000abb57600080fd5b62000ac98d828501620007fc565b60a08501525062000add60c08301620007e7565b60c084015260e082015160e084015282985062000afe8c60408d01620008bb565b975060808b015192508083111562000b1557600080fd5b505062000b258a828b016200090d565b94505062000b3660a0890162000891565b925062000b4660c0890162000891565b915062000b5660e0890162000891565b905092959891949750929550565b600181811c9082168062000b7957607f821691505b6020821081141562000b9b57634e487b7160e01b600052602260045260246000fd5b50919050565b613d8f8062000bb16000396000f3fe6080604052600436106101b75760003560e01c8063608e4dd0116100ec578063a3a439311161008a578063c87b56dd11610064578063c87b56dd14610531578063d4f47e9314610551578063e7301f0e14610571578063e985e9c51461058657600080fd5b8063a3a439311461049b578063b09afec1146104e4578063b88d4fde1461051157600080fd5b806370a08231116100c657806370a0823114610426578063942cc3071461044657806395d89b4114610466578063a22cb4651461047b57600080fd5b8063608e4dd0146103d15780636352211e146103e457806367c897fe1461040457600080fd5b80631df025c611610159578063277c2d6811610133578063277c2d68146103515780632f745c591461037157806342842e0e146103915780634f6ccce7146103b157600080fd5b80631df025c6146102c657806320e0c51c1461030357806323b872dd1461033157600080fd5b8063095ea7b311610195578063095ea7b31461024b5780630a851b401461026d5780630c12252b1461029257806318160ddd146102a757600080fd5b806301ffc9a7146101bc57806306fdde03146101f1578063081812fc14610213575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046133e4565b6105cf565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506102066105fa565b6040516101e89190613459565b34801561021f57600080fd5b5061023361022e36600461346c565b61068c565b6040516001600160a01b0390911681526020016101e8565b34801561025757600080fd5b5061026b61026636600461349a565b6106b3565b005b34801561027957600080fd5b506102826107ce565b6040516101e894939291906134ec565b34801561029e57600080fd5b50610282610873565b3480156102b357600080fd5b506008545b6040519081526020016101e8565b3480156102d257600080fd5b506102e66102e1366004613524565b610895565b6040805193845260ff9092166020840152908201526060016101e8565b34801561030f57600080fd5b5061032361031e366004613550565b610ac0565b6040516101e892919061372b565b34801561033d57600080fd5b5061026b61034c36600461379d565b610f47565b34801561035d57600080fd5b5061026b61036c3660046137de565b610f78565b34801561037d57600080fd5b506102b861038c36600461349a565b611626565b34801561039d57600080fd5b5061026b6103ac36600461379d565b6116bc565b3480156103bd57600080fd5b506102b86103cc36600461346c565b6116d7565b61026b6103df36600461346c565b61176a565b3480156103f057600080fd5b506102336103ff36600461346c565b611c37565b34801561041057600080fd5b50610419611c97565b6040516101e89190613863565b34801561043257600080fd5b506102b8610441366004613550565b61214d565b34801561045257600080fd5b50600b54610233906001600160a01b031681565b34801561047257600080fd5b506102066121d3565b34801561048757600080fd5b5061026b61049636600461391c565b6121e2565b3480156104a757600080fd5b506104bb6104b636600461346c565b6121f1565b6040516101e89493929190938452602084019290925260ff166040830152606082015260800190565b3480156104f057600080fd5b506105046104ff36600461346c565b612387565b6040516101e8919061394a565b34801561051d57600080fd5b5061026b61052c366004613973565b6124f0565b34801561053d57600080fd5b5061020661054c36600461346c565b612528565b34801561055d57600080fd5b50600a54610233906001600160a01b031681565b34801561057d57600080fd5b5061028261259c565b34801561059257600080fd5b506101dc6105a1366004613a53565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806105f457506105f4826125be565b92915050565b60606000805461060990613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461063590613a81565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505050905090565b60006106978261260e565b506000908152600460205260409020546001600160a01b031690565b60006106be82611c37565b9050806001600160a01b0316836001600160a01b031614156107315760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061074d575061074d81336105a1565b6107bf5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610728565b6107c98383612670565b505050565b602380546024546025546026805460ff9094169492939192916107f090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461081c90613a81565b80156108695780601f1061083e57610100808354040283529160200191610869565b820191906000526020600020905b81548152906001019060200180831161084c57829003601f168201915b5050505050905084565b601f80546020546021546022805460ff9094169492939192916107f090613a81565b60008080806108a48686613ad2565b905060006108b28742613ad2565b90506000826108c2836064613ae9565b6108cc9190613b08565b9050603281101561096557600b54604051633b6a8f1d60e01b8152600097508796506001600160a01b0390911690633b6a8f1d9061090e908890600401613b2a565b60206040518083038186803b15801561092657600080fd5b505afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190613b44565b9350610ab4565b603281101580156109765750605081105b156109c757601e9450606461098b868b613ae9565b6109959190613b08565b600b54604051633b6a8f1d60e01b81529197506001600160a01b031690633b6a8f1d9061090e90600190600401613b2a565b605081101580156109d85750606481105b15610a29576032945060646109ed8a87613ae9565b6109f79190613b08565b600b54604051633b6a8f1d60e01b81529197506001600160a01b031690633b6a8f1d9061090e90600290600401613b2a565b600b54604051633b6a8f1d60e01b81528a9750606496506001600160a01b0390911690633b6a8f1d90610a6190600390600401613b2a565b60206040518083038186803b158015610a7957600080fd5b505afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab19190613b44565b93505b50505093509350939050565b610ac8613176565b60606000610ad58461214d565b905060008167ffffffffffffffff811115610af257610af261395d565b604051908082528060200260200182016040528015610b2b57816020015b610b186131d9565b815260200190600190039081610b105790505b50905060005b82811015610cde576000610b458783611626565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610bd090613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc90613a81565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e09091015284519091508190859085908110610cbe57610cbe613b5d565b602002602001018190525050508080610cd690613b73565b915050610b31565b5060408051610100810190915260138054909183918390829060ff166002811115610d0b57610d0b6134c6565b6002811115610d1c57610d1c6134c6565b8152602001600182018054610d3090613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c90613a81565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b50505050508152602001600282018054610dc290613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610dee90613a81565b8015610e3b5780601f10610e1057610100808354040283529160200191610e3b565b820191906000526020600020905b815481529060010190602001808311610e1e57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191610e7b90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea790613a81565b8015610ef45780601f10610ec957610100808354040283529160200191610ef4565b820191906000526020600020905b815481529060010190602001808311610ed757829003601f168201915b5050509183525050600582015460209091019060ff166002811115610f1b57610f1b6134c6565b6002811115610f2c57610f2c6134c6565b81526020016006820154815250509150935093505050915091565b610f5133826126de565b610f6d5760405162461bcd60e51b815260040161072890613b8e565b6107c983838361275d565b601a54421015610f9b57604051638f2d4c2d60e01b815260040160405180910390fd5b6000602b6000836002811115610fb357610fb36134c6565b6002811115610fc457610fc46134c6565b8152602081019190915260409081016000208151608081019092528054829060ff166002811115610ff757610ff76134c6565b6002811115611008576110086134c6565b8152602001600182015481526020016002820154815260200160038201805461103090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461105c90613a81565b80156110a95780601f1061107e576101008083540402835291602001916110a9565b820191906000526020600020905b81548152906001019060200180831161108c57829003601f168201915b5050505050815250509050600060648260400151856110c89190613ae9565b6110d29190613b08565b905080600c6002015410156110fa576040516348eb126760e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b15801561113e57600080fd5b505afa158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190613bdb565b90506001600160a01b03811661120657600a546040516331b77b8960e21b81523360048201526001600160a01b039091169063c6ddee2490602401602060405180830381600087803b1580156111cb57600080fd5b505af11580156111df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112039190613bdb565b90505b6011805490600061121683613b73565b91905055506000602b6000866002811115611233576112336134c6565b6002811115611244576112446134c6565b8152602001908152602001600020600301805461126090613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461128c90613a81565b80156112d95780601f106112ae576101008083540402835291602001916112d9565b820191906000526020600020905b8154815290600101906020018083116112bc57829003601f168201915b5050604080516101e081018252308152600c5460208201529081018b90526016546001600160a01b039081166060830152336080830152871660a082015260115460c082015260e0810185905293945050610100830191508790506002811115611345576113456134c6565b60ff1681526020014281526020018560200151426113639190613bf8565b8152602080820186905260006040808401829052606080850183905260809485018390526011548352602c845291819020855181546001600160a01b039182166001600160a01b0319918216178355878601516001840155928701516002830155928601516003820180549185169184169190911790559385015160048501805491841691831691909117905560a085015160058501805491909316911617905560c0830151600683015560e08301518051611425926007850192019061327b565b5061010082015160088201805460ff1990811660ff938416179091556101208401516009840155610140840151600a840155610160840151600b840155610180840151600c8401805483169115159190911790556101a0840151600d8401556101c090930151600e909201805490931691161790556016546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201899052909116906323b872dd90606401602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190613c10565b5082600c600201600082825461153c9190613ad2565b9091555050600f8054879190600090611556908490613bf8565b90915550506010805490600061156b83613b73565b90915550506011546040516bffffffffffffffffffffffff193060601b1660208201526115ab9184916034016040516020818303038152906040526128ce565b600c546011547fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa919033898960028111156115e8576115e86134c6565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a1505050505050565b60006116318361214d565b82106116935760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610728565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107c9838383604051806020016040528060008152506124f0565b60006116e260085490565b82106117455760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610728565b6008828154811061175857611758613b5d565b90600052602060002001549050919050565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e0840191906117f290613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461181e90613a81565b801561186b5780601f106118405761010080835404028352916020019161186b565b820191906000526020600020905b81548152906001019060200180831161184e57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b830154608080840191909152600c8401548216151560a0840152600d84015460c0840152600e909301541660e0909101528101519091506001600160a01b031633146118f757604051636ff49be560e01b815260040160405180910390fd5b61016081015161191a57604051630638c18f60e51b815260040160405180910390fd5b8061018001511561193e57604051636dc6682d60e01b815260040160405180910390fd5b6000828152602c60205260408120600c01805460ff191660011790556101608201516101208301516101408401518392839261197992610895565b6000888152602c60205260408120600d8101859055600e01805460ff191660ff85161790556101608801519396509194509250906119b8908590613ad2565b905080600c60020160008282546119cf9190613bf8565b9091555050348211156119f557604051631cf2628760e31b815260040160405180910390fd5b600b546040516000916001600160a01b03169034908381818185875af1925050503d8060008114611a42576040519150601f19603f3d011682016040523d82523d6000602084013e611a47565b606091505b5050905080611a6957604051635b77072160e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b158015611aad57600080fd5b505afa158015611ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae59190613bdb565b6040516357fecd5d60e11b8152306004820152602481018a90529091506001600160a01b0382169063affd9aba90604401600060405180830381600087803b158015611b3057600080fd5b505af1158015611b44573d6000803e3d6000fd5b505060165460808a015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018b90529116925063a9059cbb9150604401602060405180830381600087803b158015611b9a57600080fd5b505af1158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190613c10565b50600c546040808901516101008a015182519384523360208501529183015260ff166060820152608081018790527f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d9060a00160405180910390a15050505050505050565b6000818152600260205260408120546001600160a01b0316806105f45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610728565b611c9f6132ff565b6040805161016081018252600c5460808201908152600d546001600160a01b0390811660a0840152600e5460c0840152600f5460e08401526010546101008085019190915260115461012085015260125490911661014084015290825282519081019092526013805491926020840192909190829060ff166002811115611d2857611d286134c6565b6002811115611d3957611d396134c6565b8152602001600182018054611d4d90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7990613a81565b8015611dc65780601f10611d9b57610100808354040283529160200191611dc6565b820191906000526020600020905b815481529060010190602001808311611da957829003601f168201915b50505050508152602001600282018054611ddf90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b90613a81565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611e9890613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec490613a81565b8015611f115780601f10611ee657610100808354040283529160200191611f11565b820191906000526020600020905b815481529060010190602001808311611ef457829003601f168201915b5050509183525050600582015460209091019060ff166002811115611f3857611f386134c6565b6002811115611f4957611f496134c6565b81526020016006820154815250508152602001601a604051806040016040529081600082015481526020016001820154815250508152602001601c604051806060016040529081600082018054611f9f90613a81565b80601f0160208091040260200160405190810160405280929190818152602001828054611fcb90613a81565b80156120185780601f10611fed57610100808354040283529160200191612018565b820191906000526020600020905b815481529060010190602001808311611ffb57829003601f168201915b5050505050815260200160018201805461203190613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461205d90613a81565b80156120aa5780601f1061207f576101008083540402835291602001916120aa565b820191906000526020600020905b81548152906001019060200180831161208d57829003601f168201915b505050505081526020016002820180546120c390613a81565b80601f01602080910402602001604051908101604052809291908181526020018280546120ef90613a81565b801561213c5780601f106121115761010080835404028352916020019161213c565b820191906000526020600020905b81548152906001019060200180831161211f57829003601f168201915b505050505081525050815250905090565b60006001600160a01b0382166121b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610728565b506001600160a01b031660009081526003602052604090205490565b60606001805461060990613a81565b6121ed338383612901565b5050565b6000818152602c6020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e08401919061228190613a81565b80601f01602080910402602001604051908101604052809291908181526020018280546122ad90613a81565b80156122fa5780601f106122cf576101008083540402835291602001916122fa565b820191906000526020600020905b8154815290600101906020018083116122dd57829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e090910152610160810151610120820151610140830151919750919250612379918791610895565b969891975095945092505050565b61238f6131d9565b6000828152602c602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061241590613a81565b80601f016020809104026020016040519081016040528092919081815260200182805461244190613a81565b801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050509183525050600882015460ff908116602083015260098301546040830152600a8301546060830152600b8301546080830152600c8301548116151560a0830152600d83015460c0830152600e9092015490911660e09091015292915050565b6124fa33836126de565b6125165760405162461bcd60e51b815260040161072890613b8e565b612522848484846129d0565b50505050565b60606125338261260e565b600061254a60408051602081019091526000815290565b9050600081511161256a5760405180602001604052806000815250612595565b8061257484612a03565b604051602001612585929190613c2d565b6040516020818303038152906040525b9392505050565b60278054602854602954602a805460ff9094169492939192916107f090613a81565b60006001600160e01b031982166380ac58cd60e01b14806125ef57506001600160e01b03198216635b5e139f60e01b145b806105f457506301ffc9a760e01b6001600160e01b03198316146105f4565b6000818152600260205260409020546001600160a01b031661266d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610728565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906126a582611c37565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806126ea83611c37565b9050806001600160a01b0316846001600160a01b0316148061273157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806127555750836001600160a01b031661274a8461068c565b6001600160a01b0316145b949350505050565b826001600160a01b031661277082611c37565b6001600160a01b0316146127965760405162461bcd60e51b815260040161072890613c5c565b6001600160a01b0382166127f85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610728565b6128058383836001612aa0565b826001600160a01b031661281882611c37565b6001600160a01b03161461283e5760405162461bcd60e51b815260040161072890613c5c565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6128d88383612be0565b6128e56000848484612d79565b6107c95760405162461bcd60e51b815260040161072890613ca1565b816001600160a01b0316836001600160a01b031614156129635760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610728565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6129db84848461275d565b6129e784848484612d79565b6125225760405162461bcd60e51b815260040161072890613ca1565b60606000612a1083612e86565b600101905060008167ffffffffffffffff811115612a3057612a3061395d565b6040519080825280601f01601f191660200182016040528015612a5a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612a9357612a98565b612a64565b509392505050565b612aac84848484612f5e565b6001811115612b1b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610728565b816001600160a01b038516612b7757612b7281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612b9a565b836001600160a01b0316856001600160a01b031614612b9a57612b9a8582612fe6565b6001600160a01b038416612bb657612bb181613083565b612bd9565b846001600160a01b0316846001600160a01b031614612bd957612bd98482613132565b5050505050565b6001600160a01b038216612c365760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610728565b6000818152600260205260409020546001600160a01b031615612c9b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610728565b612ca9600083836001612aa0565b6000818152600260205260409020546001600160a01b031615612d0e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610728565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15612e7b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612dbd903390899088908890600401613cf3565b602060405180830381600087803b158015612dd757600080fd5b505af1925050508015612e07575060408051601f3d908101601f19168201909252612e0491810190613d26565b60015b612e61573d808015612e35576040519150601f19603f3d011682016040523d82523d6000602084013e612e3a565b606091505b508051612e595760405162461bcd60e51b815260040161072890613ca1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612755565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612ec55772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612ef1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612f0f57662386f26fc10000830492506010015b6305f5e1008310612f27576305f5e100830492506008015b6127108310612f3b57612710830492506004015b60648310612f4d576064830492506002015b600a83106105f45760010192915050565b6001811115612522576001600160a01b03841615612fa4576001600160a01b03841660009081526003602052604081208054839290612f9e908490613ad2565b90915550505b6001600160a01b03831615612522576001600160a01b03831660009081526003602052604081208054839290612fdb908490613bf8565b909155505050505050565b60006001612ff38461214d565b612ffd9190613ad2565b600083815260076020526040902054909150808214613050576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061309590600190613ad2565b600083815260096020526040812054600880549394509092849081106130bd576130bd613b5d565b9060005260206000200154905080600883815481106130de576130de613b5d565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061311657613116613d43565b6001900381819060005260206000200160009055905550505050565b600061313d8361214d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001600060028111156131cc576131cc6134c6565b8152602001600081525090565b604051806101e0016040528060006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b82805461328790613a81565b90600052602060002090601f0160209004810192826132a957600085556132ef565b82601f106132c257805160ff19168380011785556132ef565b828001600101855582156132ef579182015b828111156132ef5782518255916020019190600101906132d4565b506132fb9291506133b9565b5090565b604051806080016040528061335c6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b8152602001613369613176565b815260200161338b604051806040016040528060008152602001600081525090565b81526020016133b460405180606001604052806060815260200160608152602001606081525090565b905290565b5b808211156132fb57600081556001016133ba565b6001600160e01b03198116811461266d57600080fd5b6000602082840312156133f657600080fd5b8135612595816133ce565b60005b8381101561341c578181015183820152602001613404565b838111156125225750506000910152565b60008151808452613445816020860160208601613401565b601f01601f19169290920160200192915050565b602081526000612595602083018461342d565b60006020828403121561347e57600080fd5b5035919050565b6001600160a01b038116811461266d57600080fd5b600080604083850312156134ad57600080fd5b82356134b881613485565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6003811061266d5761266d6134c6565b6134f5856134dc565b84815283602082015282604082015260806060820152600061351a608083018461342d565b9695505050505050565b60008060006060848603121561353957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561356257600080fd5b813561259581613485565b613576816134dc565b9052565b6000610100825161358a816134dc565b8085525060208301518160208601526135a58286018261342d565b915050604083015184820360408601526135bf828261342d565b91505060018060a01b03606084015116606085015260808301516135e8608086018260ff169052565b5060a083015184820360a0860152613600828261342d565b91505060c083015161361560c086018261356d565b5060e083015160e08501528091505092915050565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161366a60608601826001600160a01b03169052565b50608083015161368560808601826001600160a01b03169052565b5060a08301516136a060a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136c28286018261342d565b915050610100808401516136da8287018260ff169052565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c09283015160ff1692909301919091525090565b60408152600061373e604083018561357a565b6020838203818501528185518084528284019150828160051b85010183880160005b8381101561378e57601f1987840301855261377c83835161362a565b94860194925090850190600101613760565b50909998505050505050505050565b6000806000606084860312156137b257600080fd5b83356137bd81613485565b925060208401356137cd81613485565b929592945050506040919091013590565b600080604083850312156137f157600080fd5b8235915060208301356003811061380757600080fd5b809150509250929050565b6000815160608452613827606085018261342d565b905060208301518482036020860152613840828261342d565b9150506040830151848203604086015261385a828261342d565b95945050505050565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526138da61018085018361357a565b60408601518051610120870152602001516101408601526060860151858203601f19018387015290925061351a8382613812565b801515811461266d57600080fd5b6000806040838503121561392f57600080fd5b823561393a81613485565b915060208301356138078161390e565b602081526000612595602083018461362a565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561398957600080fd5b843561399481613485565b935060208501356139a481613485565b925060408501359150606085013567ffffffffffffffff808211156139c857600080fd5b818701915087601f8301126139dc57600080fd5b8135818111156139ee576139ee61395d565b604051601f8201601f19908116603f01168101908382118183101715613a1657613a1661395d565b816040528281528a6020848701011115613a2f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613a6657600080fd5b8235613a7181613485565b9150602083013561380781613485565b600181811c90821680613a9557607f821691505b60208210811415613ab657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ae457613ae4613abc565b500390565b6000816000190483118215151615613b0357613b03613abc565b500290565b600082613b2557634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613b3e57613b3e6134c6565b91905290565b600060208284031215613b5657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613b8757613b87613abc565b5060010190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060208284031215613bed57600080fd5b815161259581613485565b60008219821115613c0b57613c0b613abc565b500190565b600060208284031215613c2257600080fd5b81516125958161390e565b60008351613c3f818460208801613401565b835190830190613c53818360208801613401565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061351a9083018461342d565b600060208284031215613d3857600080fd5b8151612595816133ce565b634e487b7160e01b600052603160045260246000fdfea264697066735822122001691b08364f6e1d905c5d209dd5f514f6ed2d7f3fdd310013c6d579611493ab64736f6c63430008090033a26469706673582212200dbfe57bc17a0a5676a2d2135fefec6402074465ca771b04503253cf784a748264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9247,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "campaignFeeManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 9249,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "pmMembership",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9251,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "pmTeamManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9253,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "creatorManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9255,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "projectsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9260,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "poolsOfAUser",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9265,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "poolsOfATeam",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 9270,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolsByToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 9274,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolByID",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}