{
  "address": "0x7a8321fA84D5D79A2A664fB56D4D5ded8cD94513",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SplitFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.CampaignCategories",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "campaingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributionScheme",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributionWallets",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "buyBackAndburn",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CampaignFeeManager.FeesType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getAllCampaignFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CampaignFeeManager.FeesType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getAllUnstakingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.CampaignCategories",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getCampaignFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceOfOneUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.UnstakingCategories",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getUnstakingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        }
      ],
      "name": "setCampaignFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "name": "setDistributionScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyBackAndburn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeDistributionWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "name": "setUnstakingFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.UnstakingCategories",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "unStakingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1cf4a5a93b5435dc55c53fcb9aa803fbccc50680ab96bbfc4ec1982a98bed2a2",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0x7a8321fA84D5D79A2A664fB56D4D5ded8cD94513",
    "transactionIndex": 1,
    "gasUsed": "1145934",
    "logsBloom": "0x
    "blockHash": "0x4cae68ef07e62da564f4495f52d410517bebe5567c827e6f3ae46f4e38487a05",
    "transactionHash": "0x1cf4a5a93b5435dc55c53fcb9aa803fbccc50680ab96bbfc4ec1982a98bed2a2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 3245588,
        "transactionHash": "0x1cf4a5a93b5435dc55c53fcb9aa803fbccc50680ab96bbfc4ec1982a98bed2a2",
        "address": "0x7a8321fA84D5D79A2A664fB56D4D5ded8cD94513",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4cae68ef07e62da564f4495f52d410517bebe5567c827e6f3ae46f4e38487a05"
      }
    ],
    "blockNumber": 3245588,
    "cumulativeGasUsed": "1237967",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "e61dfc8c28feed11111b89b9ad43a47f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SplitFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.CampaignCategories\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"campaingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributionScheme\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributionWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"buyBackAndburn\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CampaignFeeManager.FeesType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getAllCampaignFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CampaignFeeManager.FeesType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getAllUnstakingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.CampaignCategories\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getCampaignFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceOfOneUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.UnstakingCategories\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getUnstakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"}],\"name\":\"setCampaignFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"name\":\"setDistributionScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyBackAndburn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"name\":\"setFeeDistributionWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.UnstakingCategories\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"unStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Network: BNB Chain Mainnet Aggregator: BNB/USD Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Planetmoon/CampaignFeeManager.sol\":\"CampaignFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Planetmoon/CampaignFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n    /**\\r\\n    * Network: Goerli\\r\\n    * Aggregator: ETH/USD\\r\\n    * Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * Network: BNB Chain Mainnet\\r\\n    * Aggregator: BNB/USD\\r\\n    * Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\\r\\n    */\\r\\n\\r\\ncontract CampaignFeeManager is Ownable {\\r\\n\\r\\n    // AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // BNB Chain Mainnet BNB/USD\\r\\n    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);  // Goerli ETH/USD\\r\\n\\r\\n    // IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\\r\\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap router goerli testnet - ETH\\r\\n\\r\\n\\r\\n    mapping (StakingLibrary.CampaignCategories => uint256) public campaingFee;\\r\\n    mapping (StakingLibrary.UnstakingCategories => uint256) public unStakingFee;\\r\\n    \\r\\n    event Received(address, uint);\\r\\n    enum FeesType {USD, BNB}\\r\\n    \\r\\n    FeeDistributionScheme public feeDistributionScheme;\\r\\n    struct FeeDistributionScheme {\\r\\n        uint8 buyBackAndburn;\\r\\n        uint8 rewardPool;\\r\\n        uint8 corporate;\\r\\n    }\\r\\n\\r\\n    FeeDistributionWallets public feeDistributionWallets;\\r\\n    struct FeeDistributionWallets {\\r\\n        address payable buyBackAndburn;\\r\\n        address payable rewardPool;\\r\\n        address payable corporate;\\r\\n        address buyBackReceiver;\\r\\n    }\\r\\n\\r\\n    constructor( \\r\\n        uint256 silver, uint256 gold, uint256 diamond,\\r\\n        uint256 reward_0pc, uint256 reward_30pc, uint256 reward_50pc, uint256 reward_100pc\\r\\n    ) {\\r\\n\\r\\n        campaingFee[StakingLibrary.CampaignCategories.SILVER] = silver;\\r\\n        campaingFee[StakingLibrary.CampaignCategories.GOLD] = gold;\\r\\n        campaingFee[StakingLibrary.CampaignCategories.DIAMOND] = diamond;\\r\\n\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_0pc] = reward_0pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_30pc] = reward_30pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_50pc] = reward_50pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_100pc] = reward_100pc;\\r\\n    }\\r\\n\\r\\n    function getCampaignFee(StakingLibrary.CampaignCategories category) public view returns (uint256){\\r\\n        uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n        return campaingFee[category] * priceOfOneUSD;\\r\\n    }\\r\\n\\r\\n    function getAllCampaignFees(FeesType feeType) public view returns (\\r\\n        uint256 silver,  \\r\\n        uint256 gold,  \\r\\n        uint256 diamond\\r\\n    ){\\r\\n\\r\\n        silver = campaingFee[StakingLibrary.CampaignCategories.SILVER];\\r\\n        gold = campaingFee[StakingLibrary.CampaignCategories.GOLD];\\r\\n        diamond = campaingFee[StakingLibrary.CampaignCategories.DIAMOND];\\r\\n\\r\\n        if(feeType == FeesType.BNB){\\r\\n            uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n            silver = silver * priceOfOneUSD;\\r\\n            gold = gold * priceOfOneUSD;\\r\\n            diamond = diamond * priceOfOneUSD;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setCampaignFees(uint256 silver, uint256 gold, uint256 diamond) public onlyOwner {\\r\\n        campaingFee[StakingLibrary.CampaignCategories.SILVER] = silver;\\r\\n        campaingFee[StakingLibrary.CampaignCategories.GOLD] = gold;\\r\\n        campaingFee[StakingLibrary.CampaignCategories.DIAMOND] = diamond;\\r\\n    }\\r\\n\\r\\n    function getUnstakingFee(StakingLibrary.UnstakingCategories category) public view returns (uint256) {\\r\\n        uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n        return unStakingFee[category] * priceOfOneUSD;\\r\\n    }\\r\\n\\r\\n    function getAllUnstakingFees(FeesType feeType) public view returns (\\r\\n        uint256 reward_0pc, \\r\\n        uint256 reward_30pc, \\r\\n        uint256 reward_50pc, \\r\\n        uint256 reward_100pc\\r\\n    ){\\r\\n\\r\\n        reward_0pc = unStakingFee[StakingLibrary.UnstakingCategories.REWARD_0pc];\\r\\n        reward_30pc = unStakingFee[StakingLibrary.UnstakingCategories.REWARD_30pc];\\r\\n        reward_50pc = unStakingFee[StakingLibrary.UnstakingCategories.REWARD_50pc];\\r\\n        reward_100pc = unStakingFee[StakingLibrary.UnstakingCategories.REWARD_100pc];\\r\\n\\r\\n        if(feeType == FeesType.BNB){\\r\\n            uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n            reward_0pc = reward_0pc * priceOfOneUSD;\\r\\n            reward_30pc = reward_30pc * priceOfOneUSD;\\r\\n            reward_50pc = reward_50pc * priceOfOneUSD;\\r\\n            reward_100pc = reward_100pc * priceOfOneUSD;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setUnstakingFees(\\r\\n        uint256 reward_0pc, \\r\\n        uint256 reward_30pc, \\r\\n        uint256 reward_50pc, \\r\\n        uint256 reward_100pc\\r\\n    ) public onlyOwner {\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_0pc] = reward_0pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_30pc] = reward_30pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_50pc] = reward_50pc;\\r\\n        unStakingFee[StakingLibrary.UnstakingCategories.REWARD_100pc] = reward_100pc;\\r\\n    }\\r\\n\\r\\n    function setDistributionScheme(uint8 buyBackAndburn, uint8 rewardPool, uint8 corporate ) public onlyOwner {\\r\\n        feeDistributionScheme.buyBackAndburn = buyBackAndburn;\\r\\n        feeDistributionScheme.rewardPool = rewardPool;\\r\\n        feeDistributionScheme.corporate = corporate;\\r\\n    }\\r\\n\\r\\n    function setFeeDistributionWallets(address buyBackAndburn, address rewardPool, address corporate, address buyBackReceiver) public onlyOwner {\\r\\n        feeDistributionWallets.buyBackAndburn = payable(buyBackAndburn);\\r\\n        feeDistributionWallets.rewardPool = payable(rewardPool);\\r\\n        feeDistributionWallets.corporate = payable(corporate);\\r\\n        feeDistributionWallets.buyBackReceiver = buyBackReceiver;        \\r\\n    }\\r\\n\\r\\n    function SplitFunds() public onlyOwner {\\r\\n\\r\\n        require(\\r\\n            feeDistributionWallets.buyBackAndburn != address(0) && \\r\\n            feeDistributionWallets.rewardPool != address(0) && \\r\\n            feeDistributionWallets.corporate != address(0) &&\\r\\n            feeDistributionWallets.buyBackReceiver != address(0),\\r\\n            \\\"Distribution wallets are not being set\\\" \\r\\n        );\\r\\n\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for split\\\");\\r\\n\\r\\n        uint256 corporateShare =  (totalBalance * feeDistributionScheme.corporate) / 100;\\r\\n        uint256 rewardPoolShare =  (totalBalance * feeDistributionScheme.rewardPool) / 100;\\r\\n        uint256 buyBackAndBurnShare =  totalBalance - corporateShare - rewardPoolShare;\\r\\n\\r\\n\\r\\n        feeDistributionWallets.corporate.transfer(corporateShare);\\r\\n        feeDistributionWallets.rewardPool.transfer(rewardPoolShare);\\r\\n        swapETHForTokensNoFee(feeDistributionWallets.buyBackAndburn, feeDistributionWallets.buyBackReceiver, buyBackAndBurnShare);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() public onlyOwner {\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for withdraw\\\");\\r\\n        payable(owner()).transfer(totalBalance);\\r\\n    }\\r\\n\\r\\n    function setRouter(IUniswapV2Router02 _uniswapV2Router) public onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function swapETHForTokensNoFee( address tokenAddress, address toAddress, uint256 amount ) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = tokenAddress;\\r\\n\\r\\n        uniswapV2Router.swapExactETHForTokens{\\r\\n            value: amount\\r\\n        }(\\r\\n            0, // accept any amount of Tokens\\r\\n            path,\\r\\n            toAddress, // The contract\\r\\n            block.timestamp + 500\\r\\n        );      \\r\\n\\r\\n    }\\r\\n\\r\\n    function getLatestPriceOfOneUSD() public pure returns (int price) {\\r\\n\\r\\n        // this is the price of 1 Eth in USDs  => 1 ETh = price USDs\\r\\n        // Find price of 1 USD => 1 USD = 1/price ETH\\r\\n\\r\\n        // (, int price,,,) = priceFeed.latestRoundData();\\r\\n        // int ONE_ETH = 1 ether;\\r\\n        // price = (ONE_ETH * 10**8)/price;\\r\\n        price = int(756881949122395); \\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x341a40cbe0c5c98bd4390011f28f4f02ed191ab75288864dff1ea2d10973cecf\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd0efab4476d5d6b65f8b9a5f80060d0d50c8b5c8f2fb282ebdfabf26257695b\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6a7de32da180b1a8225fe41c4335ef9e6bce9c85b2d8a23b896af54884ff77cb\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    enum UnstakingCategories {\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        REGULAR,\\r\\n        UPGRAGE,\\r\\n        PREMIUIM,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    enum ProfileType {NONE, TEAM, USER}\\r\\n    \\r\\n    enum StakingType {THREE_MONTH, SIX_MONTH, TWELVE_MONTH}\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct Images {\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_12_months;\\r\\n    }\\r\\n       \\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        Images images;\\r\\n    }\\r\\n\\r\\n    struct UserDetail {\\r\\n        uint256 memberSince;\\r\\n        uint256 memberId;\\r\\n        bool isPremium;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x85905823036fb75f8f4f2825db9f6925e5bcb52aaba53fe8bfdb7bbe156be28b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031990811673d4a33860578de61dbabdc8bfdb98fd742fa7028e1790915560028054909116737a250d5630b4cf539739df2c5dacb4c659f2488d17905534801561005857600080fd5b5060405161144d38038061144d833981016040819052610077916101d6565b61008033610186565b7f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff969096557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c949094557fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d9290925560046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec557fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05557f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75560036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa05561022a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600060e0888a0312156101f157600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b611214806102396000396000f3fe6080604052600436106101235760003560e01c8063715018a6116100a0578063c0d7865511610064578063c0d78655146103cb578063c390a314146103eb578063c691068d14610418578063db2e21bc1461047e578063f2fde38b1461049357600080fd5b8063715018a6146103385780637d2b6fe11461034d5780638da5cb5b1461036d578063a1d8f53c1461038b578063abe98363146103ab57600080fd5b806329a3bcbf116100e757806329a3bcbf146102945780633b6a8f1d146102ab5780635072d33d146102cb57806358041b57146102f857806370085f5c1461031857600080fd5b806302a64a4b146101675780630e3cab5a146101905780630f6b2cf4146101d05780631694505e1461020b578063178e8e3d1461024357600080fd5b3661016257604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561017357600080fd5b506602b0614fb6df5b5b6040519081526020015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004610e29565b6104b3565b604080519485526020850193909352918301526060820152608001610187565b3480156101dc57600080fd5b506101f06101eb366004610e29565b61059f565b60408051938452602084019290925290820152606001610187565b34801561021757600080fd5b5060025461022b906001600160a01b031681565b6040516001600160a01b039091168152602001610187565b34801561024f57600080fd5b506005546102709060ff808216916101008104821691620100009091041683565b6040805160ff94851681529284166020840152921691810191909152606001610187565b3480156102a057600080fd5b506102a961065d565b005b3480156102b757600080fd5b5061017d6102c6366004610e4a565b610864565b3480156102d757600080fd5b5061017d6102e6366004610e4a565b60046020526000908152604090205481565b34801561030457600080fd5b506102a9610313366004610e81565b6108b5565b34801561032457600080fd5b506102a9610333366004610ec4565b6108f3565b34801561034457600080fd5b506102a9610970565b34801561035957600080fd5b506102a9610368366004610ef0565b610984565b34801561037957600080fd5b506000546001600160a01b031661022b565b34801561039757600080fd5b506102a96103a6366004610f37565b610a26565b3480156103b757600080fd5b5061017d6103c6366004610f93565b610a7e565b3480156103d757600080fd5b506102a96103e6366004610fb4565b610aaf565b3480156103f757600080fd5b5061017d610406366004610f93565b60036020526000908152604090205481565b34801561042457600080fd5b5060065460075460085460095461044b936001600160a01b03908116938116928116911684565b604080516001600160a01b0395861681529385166020850152918416918301919091529091166060820152608001610187565b34801561048a57600080fd5b506102a9610ad9565b34801561049f57600080fd5b506102a96104ae366004610fb4565b610b76565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05547f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75460036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0546001858181111561055857610558610fd1565b1415610598576602b0614fb6df5b6105708186610ffd565b945061057c8185610ffd565b93506105888184610ffd565b92506105948183610ffd565b9150505b9193509193565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff547fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5460026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d546001848181111561062257610622610fd1565b1415610656576602b0614fb6df5b61063a8185610ffd565b93506106468184610ffd565b92506106528183610ffd565b9150505b9193909250565b610665610bef565b6006546001600160a01b03161580159061068957506007546001600160a01b031615155b801561069f57506008546001600160a01b031615155b80156106b557506009546001600160a01b031615155b6107155760405162461bcd60e51b815260206004820152602660248201527f446973747269627574696f6e2077616c6c65747320617265206e6f74206265696044820152651b99c81cd95d60d21b60648201526084015b60405180910390fd5b47806107635760405162461bcd60e51b815260206004820152601e60248201527f4e6f2062616c616e63652061766169616c626c6520666f722073706c69740000604482015260640161070c565b60055460009060649061077f9062010000900460ff1684610ffd565b610789919061101c565b6005549091506000906064906107a790610100900460ff1685610ffd565b6107b1919061101c565b90506000816107c0848661103e565b6107ca919061103e565b6008546040519192506001600160a01b03169084156108fc029085906000818181858888f19350505050158015610805573d6000803e3d6000fd5b506007546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015610840573d6000803e3d6000fd5b5060065460095461085e916001600160a01b03908116911683610c49565b50505050565b60006602b0614fb6df5b8060048385600381111561088457610884610fd1565b600381111561089557610895610fd1565b8152602001908152602001600020546108ae9190610ffd565b9392505050565b6108bd610bef565b6005805460ff94851661ffff1990911617610100938516939093029290921762ff00001916620100009190931602919091179055565b6108fb610bef565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff929092557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5560026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d55565b610978610bef565b6109826000610dd9565b565b61098c610bef565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec939093557fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05919091557f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75560036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa055565b610a2e610bef565b600680546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600880549285169284169290921790915560098054919093169116179055565b60006602b0614fb6df5b80600383856002811115610a9e57610a9e610fd1565b600281111561089557610895610fd1565b610ab7610bef565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610ae1610bef565b4780610b395760405162461bcd60e51b815260206004820152602160248201527f4e6f2062616c616e63652061766169616c626c6520666f7220776974686472616044820152607760f81b606482015260840161070c565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610b72573d6000803e3d6000fd5b5050565b610b7e610bef565b6001600160a01b038116610be35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161070c565b610bec81610dd9565b50565b6000546001600160a01b031633146109825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161070c565b6040805160028082526060820183526000926020830190803683375050600254604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c464892506004808301926020929190829003018186803b158015610cae57600080fd5b505afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce6919061106b565b81600081518110610cf957610cf9611088565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610d2d57610d2d611088565b6001600160a01b03928316602091820292909201015260025416637ff36ab58360008487610d5d426101f461109e565b6040518663ffffffff1660e01b8152600401610d7c94939291906110b6565b6000604051808303818588803b158015610d9557600080fd5b505af1158015610da9573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610dd29190810190611120565b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610e3b57600080fd5b8135600281106108ae57600080fd5b600060208284031215610e5c57600080fd5b8135600481106108ae57600080fd5b803560ff81168114610e7c57600080fd5b919050565b600080600060608486031215610e9657600080fd5b610e9f84610e6b565b9250610ead60208501610e6b565b9150610ebb60408501610e6b565b90509250925092565b600080600060608486031215610ed957600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610f0657600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114610bec57600080fd5b60008060008060808587031215610f4d57600080fd5b8435610f5881610f22565b93506020850135610f6881610f22565b92506040850135610f7881610f22565b91506060850135610f8881610f22565b939692955090935050565b600060208284031215610fa557600080fd5b8135600381106108ae57600080fd5b600060208284031215610fc657600080fd5b81356108ae81610f22565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561101757611017610fe7565b500290565b60008261103957634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561105057611050610fe7565b500390565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561107d57600080fd5b81516108ae81610f22565b634e487b7160e01b600052603260045260246000fd5b600082198211156110b1576110b1610fe7565b500190565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156111005784516001600160a01b0316835293830193918301916001016110db565b50506001600160a01b039690961660408501525050506060015292915050565b6000602080838503121561113357600080fd5b825167ffffffffffffffff8082111561114b57600080fd5b818501915085601f83011261115f57600080fd5b81518181111561117157611171611055565b8060051b604051601f19603f8301168101818110858211171561119657611196611055565b6040529182528482019250838101850191888311156111b457600080fd5b938501935b828510156111d2578451845293850193928501926111b9565b9897505050505050505056fea2646970667358221220cfd1eeccc8e6f3726ac9c74aa9e9caaa3b5ff63877017d6e1477bf12bac8865664736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Network: BNB Chain Mainnet Aggregator: BNB/USD Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7016,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 7022,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)10816"
      },
      {
        "astId": 7027,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "campaingFee",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(CampaignCategories)10832,t_uint256)"
      },
      {
        "astId": 7032,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "unStakingFee",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(UnstakingCategories)10823,t_uint256)"
      },
      {
        "astId": 7044,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "feeDistributionScheme",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(FeeDistributionScheme)7051_storage"
      },
      {
        "astId": 7054,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "feeDistributionWallets",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FeeDistributionWallets)7063_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)10816": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignCategories)10832": {
        "encoding": "inplace",
        "label": "enum StakingLibrary.CampaignCategories",
        "numberOfBytes": "1"
      },
      "t_enum(UnstakingCategories)10823": {
        "encoding": "inplace",
        "label": "enum StakingLibrary.UnstakingCategories",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(CampaignCategories)10832,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(CampaignCategories)10832",
        "label": "mapping(enum StakingLibrary.CampaignCategories => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(UnstakingCategories)10823,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(UnstakingCategories)10823",
        "label": "mapping(enum StakingLibrary.UnstakingCategories => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FeeDistributionScheme)7051_storage": {
        "encoding": "inplace",
        "label": "struct CampaignFeeManager.FeeDistributionScheme",
        "members": [
          {
            "astId": 7046,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackAndburn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7048,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "rewardPool",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7050,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "corporate",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FeeDistributionWallets)7063_storage": {
        "encoding": "inplace",
        "label": "struct CampaignFeeManager.FeeDistributionWallets",
        "members": [
          {
            "astId": 7056,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackAndburn",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 7058,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "rewardPool",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 7060,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "corporate",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 7062,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackReceiver",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}