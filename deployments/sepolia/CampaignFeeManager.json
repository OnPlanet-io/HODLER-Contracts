{
  "address": "0xF0C13D4Cb19bD7eD2317128Cc1C4a37C79E9b664",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SplitFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CampaignFeeManager.FeesType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getAllCampaignFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CampaignFeeManager.FeesType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getAllUnstakingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.CampaignCategories",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getCampaignFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionShares",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackAndburnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceOfOneUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.UnstakingCategories",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getUnstakingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "silver",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "diamond",
          "type": "uint256"
        }
      ],
      "name": "setCampaignFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "name": "setFeeDistributionShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackAndburnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeDistributionWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward_0pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_30pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_50pc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward_100pc",
          "type": "uint256"
        }
      ],
      "name": "setUnstakingFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x469fc79e1abe8a14788b03cd60a40785482e772abbe7dd08fa1ab9bd4eb5e2c9",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0xF0C13D4Cb19bD7eD2317128Cc1C4a37C79E9b664",
    "transactionIndex": 1,
    "gasUsed": "1339975",
    "logsBloom": "0x
    "blockHash": "0xc58b18d3ee484ad0151927eec8708f6d191c74ed431d4138326bec319cd1bc76",
    "transactionHash": "0x469fc79e1abe8a14788b03cd60a40785482e772abbe7dd08fa1ab9bd4eb5e2c9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 3960972,
        "transactionHash": "0x469fc79e1abe8a14788b03cd60a40785482e772abbe7dd08fa1ab9bd4eb5e2c9",
        "address": "0xF0C13D4Cb19bD7eD2317128Cc1C4a37C79E9b664",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc58b18d3ee484ad0151927eec8708f6d191c74ed431d4138326bec319cd1bc76"
      }
    ],
    "blockNumber": 3960972,
    "cumulativeGasUsed": "1443543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0"
  ],
  "numDeployments": 2,
  "solcInputHash": "ff90382ca52f6de2cccd362cf2d8eec2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SplitFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CampaignFeeManager.FeesType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getAllCampaignFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CampaignFeeManager.FeesType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getAllUnstakingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.CampaignCategories\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getCampaignFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionShares\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackAndburnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceOfOneUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.UnstakingCategories\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getUnstakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamond\",\"type\":\"uint256\"}],\"name\":\"setCampaignFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"name\":\"setFeeDistributionShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackAndburnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"name\":\"setFeeDistributionWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_0pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_30pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_50pc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_100pc\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Planetmoon/CampaignFeeManager.sol\":\"CampaignFeeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Planetmoon/CampaignFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {StakingLibrary} from \\\"../library/StakingLibrary.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {PriceFeed} from \\\"./PriceFeed.sol\\\";\\r\\nimport {SwapETHForTokens} from \\\"./SwapETHForTokens.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract CampaignFeeManager is Ownable, PriceFeed, SwapETHForTokens {\\r\\n    mapping(StakingLibrary.CampaignCategories category => uint256 fee)\\r\\n        private s_campaingFee;\\r\\n    mapping(StakingLibrary.UnstakingCategories category => uint256 fee)\\r\\n        private s_unStakingFee;\\r\\n\\r\\n    FeeDistributionShares private s_feeDistributionShares;\\r\\n    FeeDistributionWallets private s_feeDistributionWallets;\\r\\n\\r\\n    event Received(address, uint);\\r\\n    enum FeesType {\\r\\n        USD,\\r\\n        BNB\\r\\n    }\\r\\n\\r\\n    struct FeeDistributionShares {\\r\\n        uint8 buyBackAndburn;\\r\\n        uint8 rewardPool;\\r\\n        uint8 corporate;\\r\\n    }\\r\\n\\r\\n    struct FeeDistributionWallets {\\r\\n        address payable rewardPool;\\r\\n        address payable corporate;\\r\\n        address buyBackAndburnToken;\\r\\n        address buyBackReceiver;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 silver,\\r\\n        uint256 gold,\\r\\n        uint256 diamond,\\r\\n        uint256 reward_0pc,\\r\\n        uint256 reward_30pc,\\r\\n        uint256 reward_50pc,\\r\\n        uint256 reward_100pc\\r\\n    ) {\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.SILVER] = silver;\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.GOLD] = gold;\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.DIAMOND] = diamond;\\r\\n\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_0pc\\r\\n        ] = reward_0pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_30pc\\r\\n        ] = reward_30pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_50pc\\r\\n        ] = reward_50pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_100pc\\r\\n        ] = reward_100pc;\\r\\n    }\\r\\n\\r\\n    function getCampaignFee(\\r\\n        StakingLibrary.CampaignCategories category\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n        return s_campaingFee[category] * priceOfOneUSD;\\r\\n    }\\r\\n\\r\\n    function getAllCampaignFees(\\r\\n        FeesType feeType\\r\\n    ) public view returns (uint256 silver, uint256 gold, uint256 diamond) {\\r\\n        silver = s_campaingFee[StakingLibrary.CampaignCategories.SILVER];\\r\\n        gold = s_campaingFee[StakingLibrary.CampaignCategories.GOLD];\\r\\n        diamond = s_campaingFee[StakingLibrary.CampaignCategories.DIAMOND];\\r\\n\\r\\n        if (feeType == FeesType.BNB) {\\r\\n            uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n            silver = silver * priceOfOneUSD;\\r\\n            gold = gold * priceOfOneUSD;\\r\\n            diamond = diamond * priceOfOneUSD;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDistributionShares()\\r\\n        public\\r\\n        view\\r\\n        returns (uint8 buyBackAndburn, uint8 rewardPool, uint8 corporate)\\r\\n    {\\r\\n        buyBackAndburn = s_feeDistributionShares.buyBackAndburn;\\r\\n        rewardPool = s_feeDistributionShares.rewardPool;\\r\\n        corporate = s_feeDistributionShares.corporate;\\r\\n    }\\r\\n\\r\\n    function getDistributionWallets()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            address rewardPool,\\r\\n            address corporate,\\r\\n            address buyBackAndburnToken,\\r\\n            address buyBackReceiver\\r\\n        )\\r\\n    {\\r\\n        rewardPool = s_feeDistributionWallets.rewardPool;\\r\\n        corporate = s_feeDistributionWallets.corporate;\\r\\n        buyBackAndburnToken = s_feeDistributionWallets.buyBackAndburnToken;\\r\\n        buyBackReceiver = s_feeDistributionWallets.buyBackReceiver;\\r\\n    }\\r\\n\\r\\n    function setCampaignFees(\\r\\n        uint256 silver,\\r\\n        uint256 gold,\\r\\n        uint256 diamond\\r\\n    ) public onlyOwner {\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.SILVER] = silver;\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.GOLD] = gold;\\r\\n        s_campaingFee[StakingLibrary.CampaignCategories.DIAMOND] = diamond;\\r\\n    }\\r\\n\\r\\n    function getUnstakingFee(\\r\\n        StakingLibrary.UnstakingCategories category\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n        return s_unStakingFee[category] * priceOfOneUSD;\\r\\n    }\\r\\n\\r\\n    function getAllUnstakingFees(\\r\\n        FeesType feeType\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 reward_0pc,\\r\\n            uint256 reward_30pc,\\r\\n            uint256 reward_50pc,\\r\\n            uint256 reward_100pc\\r\\n        )\\r\\n    {\\r\\n        reward_0pc = s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_0pc\\r\\n        ];\\r\\n        reward_30pc = s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_30pc\\r\\n        ];\\r\\n        reward_50pc = s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_50pc\\r\\n        ];\\r\\n        reward_100pc = s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_100pc\\r\\n        ];\\r\\n\\r\\n        if (feeType == FeesType.BNB) {\\r\\n            uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n            reward_0pc = reward_0pc * priceOfOneUSD;\\r\\n            reward_30pc = reward_30pc * priceOfOneUSD;\\r\\n            reward_50pc = reward_50pc * priceOfOneUSD;\\r\\n            reward_100pc = reward_100pc * priceOfOneUSD;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUnstakingFees(\\r\\n        uint256 reward_0pc,\\r\\n        uint256 reward_30pc,\\r\\n        uint256 reward_50pc,\\r\\n        uint256 reward_100pc\\r\\n    ) public onlyOwner {\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_0pc\\r\\n        ] = reward_0pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_30pc\\r\\n        ] = reward_30pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_50pc\\r\\n        ] = reward_50pc;\\r\\n        s_unStakingFee[\\r\\n            StakingLibrary.UnstakingCategories.REWARD_100pc\\r\\n        ] = reward_100pc;\\r\\n    }\\r\\n\\r\\n    function setFeeDistributionShares(\\r\\n        uint8 buyBackAndburn,\\r\\n        uint8 rewardPool,\\r\\n        uint8 corporate\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            corporate > 0 &&\\r\\n                rewardPool > 0 &&\\r\\n                buyBackAndburn + rewardPool + corporate == 100,\\r\\n            \\\"Distribution fees are not adding up to 100pc\\\"\\r\\n        );\\r\\n\\r\\n        s_feeDistributionShares.buyBackAndburn = buyBackAndburn;\\r\\n        s_feeDistributionShares.rewardPool = rewardPool;\\r\\n        s_feeDistributionShares.corporate = corporate;\\r\\n    }\\r\\n\\r\\n    function setFeeDistributionWallets(\\r\\n        address rewardPool,\\r\\n        address corporate,\\r\\n        address buyBackAndburnToken,\\r\\n        address buyBackReceiver\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            rewardPool != address(0) &&\\r\\n                corporate != address(0) &&\\r\\n                buyBackAndburnToken != address(0) &&\\r\\n                buyBackReceiver != address(0),\\r\\n            \\\"Distribution wallets are not being set properly\\\"\\r\\n        );\\r\\n\\r\\n        s_feeDistributionWallets.rewardPool = payable(rewardPool);\\r\\n        s_feeDistributionWallets.corporate = payable(corporate);\\r\\n        s_feeDistributionWallets.buyBackAndburnToken = buyBackAndburnToken;\\r\\n        s_feeDistributionWallets.buyBackReceiver = buyBackReceiver;\\r\\n    }\\r\\n\\r\\n    function SplitFunds() public onlyOwner {\\r\\n        FeeDistributionWallets memory wallets = s_feeDistributionWallets;\\r\\n        FeeDistributionShares memory fees = s_feeDistributionShares;\\r\\n\\r\\n        require(\\r\\n            wallets.rewardPool != address(0) &&\\r\\n                wallets.corporate != address(0) &&\\r\\n                wallets.buyBackAndburnToken != address(0) &&\\r\\n                wallets.buyBackReceiver != address(0),\\r\\n            \\\"Distribution wallets are not being set properly\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            fees.corporate > 0 &&\\r\\n                fees.rewardPool > 0 &&\\r\\n                fees.buyBackAndburn + fees.rewardPool + fees.corporate == 100,\\r\\n            \\\"Distribution fees are not being set properly\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for split\\\");\\r\\n\\r\\n        uint256 corporateShare = (totalBalance * fees.corporate) / 100;\\r\\n        uint256 rewardPoolShare = (totalBalance * fees.rewardPool) / 100;\\r\\n        uint256 buyBackAndBurnShare = totalBalance -\\r\\n            corporateShare -\\r\\n            rewardPoolShare;\\r\\n\\r\\n        wallets.corporate.transfer(corporateShare);\\r\\n        wallets.rewardPool.transfer(rewardPoolShare);\\r\\n        if (buyBackAndBurnShare > 0) {\\r\\n            swapETHForTokens(\\r\\n                wallets.buyBackAndburnToken,\\r\\n                wallets.buyBackReceiver,\\r\\n                buyBackAndBurnShare\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() public onlyOwner {\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for withdraw\\\");\\r\\n        payable(owner()).transfer(totalBalance);\\r\\n    }\\r\\n\\r\\n    function updateRouter(\\r\\n        IUniswapV2Router02 _uniswapV2Router\\r\\n    ) public onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function updatePriceFeed(\\r\\n        AggregatorV3Interface _priceFeed\\r\\n    ) public onlyOwner {\\r\\n        priceFeed = _priceFeed;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2dd1406a7724f4113cd504c7018886b1b274a990024a87946002503a9164206d\",\"license\":\"MIT\"},\"contracts/Planetmoon/PriceFeed.sol\":{\"content\":\"/**\\r\\n* Network: Goerli\\r\\n* Aggregator: ETH/USD\\r\\n* Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n*/\\r\\n\\r\\n\\r\\n/**\\r\\n* Network: BNB Chain Mainnet\\r\\n* Aggregator: BNB/USD\\r\\n* Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceFeed {\\r\\n\\r\\n    // AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // BNB Chain Mainnet BNB/USD\\r\\n    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);  // Sepolia ETH/USD\\r\\n\\r\\n    function getLatestPriceOfOneUSD() public view returns (int price) {\\r\\n\\r\\n        // this is the price of 1 Eth in USDs  => 1 ETh = price USDs\\r\\n        // Find price of 1 USD => 1 USD = 1/price ETH\\r\\n\\r\\n        (, price,,,) = priceFeed.latestRoundData();\\r\\n        int ONE_ETH = 1 ether;\\r\\n        price = (ONE_ETH * 10**8)/price;\\r\\n\\r\\n        // price = int(756881949122395); \\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe9ab82ea8da4f030153126d3e42e1cf8ff5c1a274553cdcd6f756950b5574fa8\",\"license\":\"MIT\"},\"contracts/Planetmoon/SwapETHForTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// import {} \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract SwapETHForTokens {\\r\\n\\r\\n    // IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\\r\\n    // IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap router goerli testnet - ETH\\r\\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0xB26B2De65D07eBB5E54C7F6282424D3be670E1f0); //Uniswap router sepolia testnet - ETH\\r\\n\\r\\n    function swapETHForTokens(\\r\\n        address tokenAddress,\\r\\n        address toAddress,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = tokenAddress;\\r\\n\\r\\n        uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{\\r\\n            value: amount\\r\\n        }(\\r\\n            0, // accept any amount of Tokens\\r\\n            path,\\r\\n            toAddress, // The contract\\r\\n            block.timestamp + 500\\r\\n        );\\r\\n        uint256 boughtTokens = amounts[amounts.length - 1];\\r\\n        return boughtTokens;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x529c11382fd61f97ee3afee3aafef02ebae674d69a73bf59766a7d3b9b5e1065\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x265c32a069532ab22c1ba8dd561463fde89d09b281473d89be27255066d20938\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IUniswapV2Router01} from './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6e8f01dd531f3da21e13755484d3c6361c4197f5433561b4d6b8f9bfa75bd357\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n    \\r\\n    enum ProfileType {\\r\\n        NONE,\\r\\n        TEAM,\\r\\n        USER\\r\\n    }\\r\\n    enum StakingType {\\r\\n        ONE_MONTH,\\r\\n        THREE_MONTH,\\r\\n        SIX_MONTH,\\r\\n        NINE_MONTH,\\r\\n        TWELVE_MONTH\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        MEMBER,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum UnstakingCategories {\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct NFTData {\\r\\n        string image_1_months;\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_9_months;\\r\\n        string image_12_months;\\r\\n        uint8 APY_1_months;\\r\\n        uint8 APY_3_months;\\r\\n        uint8 APY_6_months;\\r\\n        uint8 APY_9_months;\\r\\n        uint8 APY_12_months;\\r\\n    }\\r\\n\\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        StakingType stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo;\\r\\n        RewardPoolInfo rewardPoolInfo;\\r\\n        NFTData nftData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x199cea57c5efa012bd58ae5afc581b161025b685073cacb973f18521f8b28932\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031990811673694aa1769357215de4fac081bf1f309adc325306179091556002805490911673b26b2de65d07ebb5e54c7f6282424d3be670e1f017905534801561005857600080fd5b506040516117cf3803806117cf833981016040819052610077916101d6565b61008033610186565b7f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff969096557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c949094557fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d9290925560046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec557fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05557f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75560036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa05561022a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600060e0888a0312156101f157600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b611596806102396000396000f3fe6080604052600436106101185760003560e01c8063715018a6116100a0578063abe9836311610064578063abe983631461038e578063c851cc32146103ae578063cf5b2f9c146103ce578063db2e21bc1461040b578063f2fde38b1461042057600080fd5b8063715018a6146102fb5780637d2b6fe1146103105780638da5cb5b1461033057806395877f781461034e578063a1d8f53c1461036e57600080fd5b806329a3bcbf116100e757806329a3bcbf146102375780633b6a8f1d1461024e57806347dd490a1461026e57806365b3f9b01461028e57806370085f5c146102db57600080fd5b806302a64a4b1461015c5780630e3cab5a146101845780630f6b2cf4146101c45780631694505e146101ff57600080fd5b3661015757604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561016857600080fd5b50610171610440565b6040519081526020015b60405180910390f35b34801561019057600080fd5b506101a461019f36600461107e565b6104e0565b60408051948552602085019390935291830152606082015260800161017b565b3480156101d057600080fd5b506101e46101df36600461107e565b6105cf565b6040805193845260208401929092529082015260600161017b565b34801561020b57600080fd5b5060025461021f906001600160a01b031681565b6040516001600160a01b03909116815260200161017b565b34801561024357600080fd5b5061024c610690565b005b34801561025a57600080fd5b5061017161026936600461109f565b61096e565b34801561027a57600080fd5b5061024c6102893660046110d6565b6109c3565b34801561029a57600080fd5b50600654600754600854600954604080516001600160a01b03958616815293851660208501529184169183019190915291909116606082015260800161017b565b3480156102e757600080fd5b5061024c6102f6366004611119565b610a9b565b34801561030757600080fd5b5061024c610b18565b34801561031c57600080fd5b5061024c61032b366004611145565b610b2c565b34801561033c57600080fd5b506000546001600160a01b031661021f565b34801561035a57600080fd5b5061024c61036936600461118c565b610bce565b34801561037a57600080fd5b5061024c6103893660046111a9565b610bf8565b34801561039a57600080fd5b506101716103a9366004611205565b610cb4565b3480156103ba57600080fd5b5061024c6103c936600461118c565b610ce9565b3480156103da57600080fd5b506005546040805160ff8084168252610100840481166020830152620100009093049092169082015260600161017b565b34801561041757600080fd5b5061024c610d13565b34801561042c57600080fd5b5061024c61043b36600461118c565b610db0565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190611240565b50919350670de0b6b3a764000092508391506104d09050826305f5e1006112a6565b6104da91906112f2565b91505090565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05547f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75460036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0546001858181111561058557610585611320565b036105c8576000610594610440565b90506105a08186611336565b94506105ac8185611336565b93506105b88184611336565b92506105c48183611336565b9150505b9193509193565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff547fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5460026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d546001848181111561065257610652611320565b03610689576000610661610440565b905061066d8185611336565b93506106798184611336565b92506106858183611336565b9150505b9193909250565b610698610e29565b604080516080810182526006546001600160a01b039081168252600754811660208084019190915260085482168385015260095482166060808501919091528451908101855260055460ff808216835261010082048116938301939093526201000090049091169381019390935281519192911615801590610726575060208201516001600160a01b031615155b801561073e575060408201516001600160a01b031615155b8015610756575060608201516001600160a01b031615155b61077b5760405162461bcd60e51b81526004016107729061134d565b60405180910390fd5b6000816040015160ff1611801561079957506000816020015160ff16115b80156107c757506040810151602082015182516107b6919061139c565b6107c0919061139c565b60ff166064145b6108285760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f74206265696e672060448201526b7365742070726f7065726c7960a01b6064820152608401610772565b47806108765760405162461bcd60e51b815260206004820152601e60248201527f4e6f2062616c616e63652061766169616c626c6520666f722073706c697400006044820152606401610772565b60006064836040015160ff168361088d9190611336565b61089791906113b5565b905060006064846020015160ff16846108b09190611336565b6108ba91906113b5565b90506000816108c984866113c9565b6108d391906113c9565b60208701516040519192506001600160a01b03169084156108fc029085906000818181858888f19350505050158015610910573d6000803e3d6000fd5b5085516040516001600160a01b039091169083156108fc029084906000818181858888f1935050505015801561094a573d6000803e3d6000fd5b508015610966576109648660400151876060015183610e83565b505b505050505050565b600080610979610440565b9050806004600085600381111561099257610992611320565b60038111156109a3576109a3611320565b8152602001908152602001600020546109bc9190611336565b9392505050565b6109cb610e29565b60008160ff161180156109e1575060008260ff16115b8015610a045750806109f3838561139c565b6109fd919061139c565b60ff166064145b610a655760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f7420616464696e6760448201526b20757020746f20313030706360a01b6064820152608401610772565b6005805460ff94851661ffff1990911617610100938516939093029290921762ff00001916620100009190931602919091179055565b610aa3610e29565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff929092557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5560026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d55565b610b20610e29565b610b2a600061102e565b565b610b34610e29565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec939093557fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05919091557f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75560036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa055565b610bd6610e29565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610c00610e29565b6001600160a01b03841615801590610c2057506001600160a01b03831615155b8015610c3457506001600160a01b03821615155b8015610c4857506001600160a01b03811615155b610c645760405162461bcd60e51b81526004016107729061134d565b600680546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600880549285169284169290921790915560098054919093169116179055565b600080610cbf610440565b90508060036000856002811115610cd857610cd8611320565b60028111156109a3576109a3611320565b610cf1610e29565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610d1b610e29565b4780610d735760405162461bcd60e51b815260206004820152602160248201527f4e6f2062616c616e63652061766169616c626c6520666f7220776974686472616044820152607760f81b6064820152608401610772565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610dac573d6000803e3d6000fd5b5050565b610db8610e29565b6001600160a01b038116610e1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610772565b610e268161102e565b50565b6000546001600160a01b03163314610b2a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610772565b604080516002808252606082018352600092839291906020830190803683375050600254604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1591906113f2565b81600081518110610f2857610f2861140f565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610f5c57610f5c61140f565b6001600160a01b03928316602091820292909201015260025460009116637ff36ab585838589610f8e426101f4611425565b6040518663ffffffff1660e01b8152600401610fad9493929190611438565b60006040518083038185885af1158015610fcb573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610ff491908101906114a2565b90506000816001835161100791906113c9565b815181106110175761101761140f565b602002602001015190508093505050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561109057600080fd5b8135600281106109bc57600080fd5b6000602082840312156110b157600080fd5b8135600481106109bc57600080fd5b803560ff811681146110d157600080fd5b919050565b6000806000606084860312156110eb57600080fd5b6110f4846110c0565b9250611102602085016110c0565b9150611110604085016110c0565b90509250925092565b60008060006060848603121561112e57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561115b57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114610e2657600080fd5b60006020828403121561119e57600080fd5b81356109bc81611177565b600080600080608085870312156111bf57600080fd5b84356111ca81611177565b935060208501356111da81611177565b925060408501356111ea81611177565b915060608501356111fa81611177565b939692955090935050565b60006020828403121561121757600080fd5b8135600381106109bc57600080fd5b805169ffffffffffffffffffff811681146110d157600080fd5b600080600080600060a0868803121561125857600080fd5b61126186611226565b945060208601519350604086015192506060860151915061128460808701611226565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b80820260008212600160ff1b841416156112c2576112c2611290565b81810583148215176112d6576112d6611290565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611301576113016112dc565b600160ff1b82146000198414161561131b5761131b611290565b500590565b634e487b7160e01b600052602160045260246000fd5b80820281158282048414176112d6576112d6611290565b6020808252602f908201527f446973747269627574696f6e2077616c6c65747320617265206e6f742062656960408201526e6e67207365742070726f7065726c7960881b606082015260800190565b60ff81811683821601908111156112d6576112d6611290565b6000826113c4576113c46112dc565b500490565b818103818111156112d6576112d6611290565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561140457600080fd5b81516109bc81611177565b634e487b7160e01b600052603260045260246000fd5b808201808211156112d6576112d6611290565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156114825784516001600160a01b03168352938301939183019160010161145d565b50506001600160a01b039690961660408501525050506060015292915050565b600060208083850312156114b557600080fd5b825167ffffffffffffffff808211156114cd57600080fd5b818501915085601f8301126114e157600080fd5b8151818111156114f3576114f36113dc565b8060051b604051601f19603f83011681018181108582111715611518576115186113dc565b60405291825284820192508381018501918883111561153657600080fd5b938501935b828510156115545784518452938501939285019261153b565b9897505050505050505056fea26469706673582212203ec2b677c5cd06f0b78eafd7bfae5126981ef2f568c7b1292cc482867ee6e01a64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c8063715018a6116100a0578063abe9836311610064578063abe983631461038e578063c851cc32146103ae578063cf5b2f9c146103ce578063db2e21bc1461040b578063f2fde38b1461042057600080fd5b8063715018a6146102fb5780637d2b6fe1146103105780638da5cb5b1461033057806395877f781461034e578063a1d8f53c1461036e57600080fd5b806329a3bcbf116100e757806329a3bcbf146102375780633b6a8f1d1461024e57806347dd490a1461026e57806365b3f9b01461028e57806370085f5c146102db57600080fd5b806302a64a4b1461015c5780630e3cab5a146101845780630f6b2cf4146101c45780631694505e146101ff57600080fd5b3661015757604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561016857600080fd5b50610171610440565b6040519081526020015b60405180910390f35b34801561019057600080fd5b506101a461019f36600461107e565b6104e0565b60408051948552602085019390935291830152606082015260800161017b565b3480156101d057600080fd5b506101e46101df36600461107e565b6105cf565b6040805193845260208401929092529082015260600161017b565b34801561020b57600080fd5b5060025461021f906001600160a01b031681565b6040516001600160a01b03909116815260200161017b565b34801561024357600080fd5b5061024c610690565b005b34801561025a57600080fd5b5061017161026936600461109f565b61096e565b34801561027a57600080fd5b5061024c6102893660046110d6565b6109c3565b34801561029a57600080fd5b50600654600754600854600954604080516001600160a01b03958616815293851660208501529184169183019190915291909116606082015260800161017b565b3480156102e757600080fd5b5061024c6102f6366004611119565b610a9b565b34801561030757600080fd5b5061024c610b18565b34801561031c57600080fd5b5061024c61032b366004611145565b610b2c565b34801561033c57600080fd5b506000546001600160a01b031661021f565b34801561035a57600080fd5b5061024c61036936600461118c565b610bce565b34801561037a57600080fd5b5061024c6103893660046111a9565b610bf8565b34801561039a57600080fd5b506101716103a9366004611205565b610cb4565b3480156103ba57600080fd5b5061024c6103c936600461118c565b610ce9565b3480156103da57600080fd5b506005546040805160ff8084168252610100840481166020830152620100009093049092169082015260600161017b565b34801561041757600080fd5b5061024c610d13565b34801561042c57600080fd5b5061024c61043b36600461118c565b610db0565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190611240565b50919350670de0b6b3a764000092508391506104d09050826305f5e1006112a6565b6104da91906112f2565b91505090565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05547f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75460036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0546001858181111561058557610585611320565b036105c8576000610594610440565b90506105a08186611336565b94506105ac8185611336565b93506105b88184611336565b92506105c48183611336565b9150505b9193509193565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff547fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5460026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d546001848181111561065257610652611320565b03610689576000610661610440565b905061066d8185611336565b93506106798184611336565b92506106858183611336565b9150505b9193909250565b610698610e29565b604080516080810182526006546001600160a01b039081168252600754811660208084019190915260085482168385015260095482166060808501919091528451908101855260055460ff808216835261010082048116938301939093526201000090049091169381019390935281519192911615801590610726575060208201516001600160a01b031615155b801561073e575060408201516001600160a01b031615155b8015610756575060608201516001600160a01b031615155b61077b5760405162461bcd60e51b81526004016107729061134d565b60405180910390fd5b6000816040015160ff1611801561079957506000816020015160ff16115b80156107c757506040810151602082015182516107b6919061139c565b6107c0919061139c565b60ff166064145b6108285760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f74206265696e672060448201526b7365742070726f7065726c7960a01b6064820152608401610772565b47806108765760405162461bcd60e51b815260206004820152601e60248201527f4e6f2062616c616e63652061766169616c626c6520666f722073706c697400006044820152606401610772565b60006064836040015160ff168361088d9190611336565b61089791906113b5565b905060006064846020015160ff16846108b09190611336565b6108ba91906113b5565b90506000816108c984866113c9565b6108d391906113c9565b60208701516040519192506001600160a01b03169084156108fc029085906000818181858888f19350505050158015610910573d6000803e3d6000fd5b5085516040516001600160a01b039091169083156108fc029084906000818181858888f1935050505015801561094a573d6000803e3d6000fd5b508015610966576109648660400151876060015183610e83565b505b505050505050565b600080610979610440565b9050806004600085600381111561099257610992611320565b60038111156109a3576109a3611320565b8152602001908152602001600020546109bc9190611336565b9392505050565b6109cb610e29565b60008160ff161180156109e1575060008260ff16115b8015610a045750806109f3838561139c565b6109fd919061139c565b60ff166064145b610a655760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f7420616464696e6760448201526b20757020746f20313030706360a01b6064820152608401610772565b6005805460ff94851661ffff1990911617610100938516939093029290921762ff00001916620100009190931602919091179055565b610aa3610e29565b60036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff929092557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c5560026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d55565b610b20610e29565b610b2a600061102e565b565b610b34610e29565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec939093557fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05919091557f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a75560036000527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa055565b610bd6610e29565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610c00610e29565b6001600160a01b03841615801590610c2057506001600160a01b03831615155b8015610c3457506001600160a01b03821615155b8015610c4857506001600160a01b03811615155b610c645760405162461bcd60e51b81526004016107729061134d565b600680546001600160a01b039586166001600160a01b0319918216179091556007805494861694821694909417909355600880549285169284169290921790915560098054919093169116179055565b600080610cbf610440565b90508060036000856002811115610cd857610cd8611320565b60028111156109a3576109a3611320565b610cf1610e29565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610d1b610e29565b4780610d735760405162461bcd60e51b815260206004820152602160248201527f4e6f2062616c616e63652061766169616c626c6520666f7220776974686472616044820152607760f81b6064820152608401610772565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610dac573d6000803e3d6000fd5b5050565b610db8610e29565b6001600160a01b038116610e1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610772565b610e268161102e565b50565b6000546001600160a01b03163314610b2a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610772565b604080516002808252606082018352600092839291906020830190803683375050600254604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1591906113f2565b81600081518110610f2857610f2861140f565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610f5c57610f5c61140f565b6001600160a01b03928316602091820292909201015260025460009116637ff36ab585838589610f8e426101f4611425565b6040518663ffffffff1660e01b8152600401610fad9493929190611438565b60006040518083038185885af1158015610fcb573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610ff491908101906114a2565b90506000816001835161100791906113c9565b815181106110175761101761140f565b602002602001015190508093505050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561109057600080fd5b8135600281106109bc57600080fd5b6000602082840312156110b157600080fd5b8135600481106109bc57600080fd5b803560ff811681146110d157600080fd5b919050565b6000806000606084860312156110eb57600080fd5b6110f4846110c0565b9250611102602085016110c0565b9150611110604085016110c0565b90509250925092565b60008060006060848603121561112e57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561115b57600080fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0381168114610e2657600080fd5b60006020828403121561119e57600080fd5b81356109bc81611177565b600080600080608085870312156111bf57600080fd5b84356111ca81611177565b935060208501356111da81611177565b925060408501356111ea81611177565b915060608501356111fa81611177565b939692955090935050565b60006020828403121561121757600080fd5b8135600381106109bc57600080fd5b805169ffffffffffffffffffff811681146110d157600080fd5b600080600080600060a0868803121561125857600080fd5b61126186611226565b945060208601519350604086015192506060860151915061128460808701611226565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b80820260008212600160ff1b841416156112c2576112c2611290565b81810583148215176112d6576112d6611290565b92915050565b634e487b7160e01b600052601260045260246000fd5b600082611301576113016112dc565b600160ff1b82146000198414161561131b5761131b611290565b500590565b634e487b7160e01b600052602160045260246000fd5b80820281158282048414176112d6576112d6611290565b6020808252602f908201527f446973747269627574696f6e2077616c6c65747320617265206e6f742062656960408201526e6e67207365742070726f7065726c7960881b606082015260800190565b60ff81811683821601908111156112d6576112d6611290565b6000826113c4576113c46112dc565b500490565b818103818111156112d6576112d6611290565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561140457600080fd5b81516109bc81611177565b634e487b7160e01b600052603260045260246000fd5b808201808211156112d6576112d6611290565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156114825784516001600160a01b03168352938301939183019160010161145d565b50506001600160a01b039690961660408501525050506060015292915050565b600060208083850312156114b557600080fd5b825167ffffffffffffffff808211156114cd57600080fd5b818501915085601f8301126114e157600080fd5b8151818111156114f3576114f36113dc565b8060051b604051601f19603f83011681018181108582111715611518576115186113dc565b60405291825284820192508381018501918883111561153657600080fd5b938501935b828510156115545784518452938501939285019261153b565b9897505050505050505056fea26469706673582212203ec2b677c5cd06f0b78eafd7bfae5126981ef2f568c7b1292cc482867ee6e01a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8746,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 8785,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)16213"
      },
      {
        "astId": 7017,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "s_campaingFee",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(CampaignCategories)16237,t_uint256)"
      },
      {
        "astId": 7022,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "s_unStakingFee",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(UnstakingCategories)16233,t_uint256)"
      },
      {
        "astId": 7025,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "s_feeDistributionShares",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(FeeDistributionShares)7044_storage"
      },
      {
        "astId": 7028,
        "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
        "label": "s_feeDistributionWallets",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FeeDistributionWallets)7053_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)16213": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(CampaignCategories)16237": {
        "encoding": "inplace",
        "label": "enum StakingLibrary.CampaignCategories",
        "numberOfBytes": "1"
      },
      "t_enum(UnstakingCategories)16233": {
        "encoding": "inplace",
        "label": "enum StakingLibrary.UnstakingCategories",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(CampaignCategories)16237,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(CampaignCategories)16237",
        "label": "mapping(enum StakingLibrary.CampaignCategories => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(UnstakingCategories)16233,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(UnstakingCategories)16233",
        "label": "mapping(enum StakingLibrary.UnstakingCategories => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FeeDistributionShares)7044_storage": {
        "encoding": "inplace",
        "label": "struct CampaignFeeManager.FeeDistributionShares",
        "members": [
          {
            "astId": 7039,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackAndburn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7041,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "rewardPool",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7043,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "corporate",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FeeDistributionWallets)7053_storage": {
        "encoding": "inplace",
        "label": "struct CampaignFeeManager.FeeDistributionWallets",
        "members": [
          {
            "astId": 7046,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "rewardPool",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 7048,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "corporate",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 7050,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackAndburnToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7052,
            "contract": "contracts/Planetmoon/CampaignFeeManager.sol:CampaignFeeManager",
            "label": "buyBackReceiver",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}