{
  "address": "0xf8a8Acfea832Cd265d26e31BAB411b03B01180e6",
  "abi": [
    {
      "inputs": [],
      "name": "CreatorManager__ALREADY_EXIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CreatorManager__NOT_EXIST",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreatorCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "createACreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCreatorAddressOfUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolAddressesOfCreator",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getWalletAddressOfCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a400b3304f4f6b65213ffb2620bbc90fce77731e82a6ea4296a85dfcf626ddb",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0xf8a8Acfea832Cd265d26e31BAB411b03B01180e6",
    "transactionIndex": 0,
    "gasUsed": "824321",
    "logsBloom": "0x
    "blockHash": "0xd5a600a7f132891105272a6ce7245e320945c3dcdb0208e54cbd95e1111c5d9f",
    "transactionHash": "0x7a400b3304f4f6b65213ffb2620bbc90fce77731e82a6ea4296a85dfcf626ddb",
    "logs": [],
    "blockNumber": 3980410,
    "cumulativeGasUsed": "824321",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f70cc6159e2047674f7d9b58e11ac41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CreatorManager__ALREADY_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorManager__NOT_EXIST\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"createACreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCreatorAddressOfUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolAddressesOfCreator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getWalletAddressOfCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreatorContract/CreatorManager.sol\":\"CreatorManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/CreatorContract/CreatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {PMLibrary} from \\\"../library/PMLibrary.sol\\\";\\r\\nimport {IRewardCampaign} from \\\"../interfaces/IRewardCampaign.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract CreatorContract is ERC721Holder {\\r\\n    error CreatorContract__NOT_AUTHERIZED();\\r\\n\\r\\n    EnumerableSet.AddressSet private s_myPoolAddresses;\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bytes4) {\\r\\n        // onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4\\r\\n\\r\\n        address poolAddress;\\r\\n        assembly {\\r\\n            poolAddress := mload(add(data, 20))\\r\\n        }\\r\\n\\r\\n        if (!EnumerableSet.contains(s_myPoolAddresses, poolAddress)) {\\r\\n            EnumerableSet.add(s_myPoolAddresses, poolAddress);\\r\\n        }\\r\\n\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function sendTokensBackToOwner(\\r\\n        address rewardPool,\\r\\n        uint256 tokenId\\r\\n    ) public returns (bool transfered) {\\r\\n        PMLibrary.TokenData memory token = IRewardCampaign(rewardPool)\\r\\n            .getTokenData(tokenId);\\r\\n\\r\\n        if (msg.sender != token.poolAddress) {\\r\\n            revert CreatorContract__NOT_AUTHERIZED();\\r\\n        }\\r\\n\\r\\n        transfered = IERC20(token.tokenAddress).transfer(\\r\\n            token.owner,\\r\\n            token.tokenInvested\\r\\n        );\\r\\n\\r\\n        if (IERC721(rewardPool).balanceOf(address(this)) == 0) {\\r\\n            EnumerableSet.remove(s_myPoolAddresses, rewardPool);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPoolAddresses() public view returns (address[] memory) {\\r\\n        return EnumerableSet.values(s_myPoolAddresses);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd3a3f794d95624dd7c2a87ea41ad71f5ddcb784f025d5bf989fa1ed520cfb5c9\",\"license\":\"MIT\"},\"contracts/CreatorContract/CreatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {CreatorContract} from \\\"./CreatorContract.sol\\\";\\r\\n\\r\\n// import {console} from \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract CreatorManager {\\r\\n    error CreatorManager__ALREADY_EXIST();\\r\\n    error CreatorManager__NOT_EXIST();\\r\\n\\r\\n    uint256 private s_creatorsCount;\\r\\n    mapping(address user => CreatorContract creator) private s_creatorAddress;\\r\\n    mapping(address creator => address user) private s_walletAddress;\\r\\n\\r\\n    event CreatorCreated(address user, address creator);\\r\\n\\r\\n    function createACreator(address user) public returns (address) {\\r\\n        if (address(s_creatorAddress[user]) != address(0)) {\\r\\n            revert CreatorManager__ALREADY_EXIST();\\r\\n        }\\r\\n\\r\\n        CreatorContract newCreator = new CreatorContract();\\r\\n        s_creatorAddress[user] = newCreator;\\r\\n        s_walletAddress[address(newCreator)] = user;\\r\\n        s_creatorsCount++;\\r\\n\\r\\n        emit CreatorCreated(user, address(newCreator));\\r\\n\\r\\n        return address(newCreator);\\r\\n    }\\r\\n\\r\\n    function getCreatorAddressOfUser(\\r\\n        address user\\r\\n    ) external view returns (address) {\\r\\n        return address(s_creatorAddress[user]);\\r\\n    }\\r\\n\\r\\n    function getWalletAddressOfCreator(\\r\\n        address creator\\r\\n    ) external view returns (address) {\\r\\n        if (address(s_walletAddress[creator]) == address(0)) {\\r\\n            revert CreatorManager__NOT_EXIST();\\r\\n        }\\r\\n\\r\\n        return address(s_walletAddress[creator]);\\r\\n    }\\r\\n\\r\\n    function getPoolAddressesOfCreator(\\r\\n        address user\\r\\n    ) external view returns (address[] memory) {\\r\\n        address creator = address(s_creatorAddress[user]);\\r\\n        if (creator == address(0)) {\\r\\n            revert CreatorManager__NOT_EXIST();\\r\\n        }\\r\\n        return CreatorContract(creator).getPoolAddresses();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c95647c09353ecc7aa70009f59ceb34bf60fd84bce49f4eab9cb97a28dcdb0a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardCampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {PMLibrary} from \\\"../library/PMLibrary.sol\\\";\\r\\n\\r\\ninterface IRewardCampaign {\\r\\n    function investTokens(address onBehalf, uint256 amount, PMLibrary.InvestmentType _type) external;\\r\\n    function claimTokensAndReward(uint256 _tokenId) external;  \\r\\n    function getTokenData(uint256 _tokenId) external view returns(PMLibrary.TokenData memory);\\r\\n    function getProjectInfo() external view returns ( PMLibrary.PoolFullInfo memory poolFullInfo);\\r\\n}\",\"keccak256\":\"0xeaf7f61156374ea9d3d1d4349e7f1c28307e438a42d2310ab1df8312bf397544\",\"license\":\"MIT\"},\"contracts/library/PMLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PMLibrary {\\r\\n    \\r\\n    enum ProfileType {\\r\\n        NONE,\\r\\n        TEAM,\\r\\n        USER\\r\\n    }\\r\\n\\r\\n    enum InvestmentType {\\r\\n        ONE_MONTH,\\r\\n        THREE_MONTH,\\r\\n        SIX_MONTH,\\r\\n        NINE_MONTH,\\r\\n        TWELVE_MONTH\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        MEMBER,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum ClaimCategories{\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    enum FeesType {\\r\\n        USD,\\r\\n        BNB\\r\\n    }\\r\\n\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensInvested;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct NFTData {\\r\\n        string image_1_months;\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_9_months;\\r\\n        string image_12_months;\\r\\n        uint8 APY_1_months;\\r\\n        uint8 APY_3_months;\\r\\n        uint8 APY_6_months;\\r\\n        uint8 APY_9_months;\\r\\n        uint8 APY_12_months;\\r\\n    }\\r\\n\\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenInvested;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        InvestmentType investmentType;\\r\\n        uint256 investmentTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo;\\r\\n        RewardPoolInfo rewardPoolInfo;\\r\\n        NFTData nftData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe61cedbea1529220a58c89e0233d8fce48b12129422d53530c6f4e482ecf1ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610df5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063209fba0f146100515780632c09e39214610081578063865c79a9146100ad578063c6ddee24146100cd575b600080fd5b61006461005f366004610310565b6100e0565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f366004610310565b6001600160a01b039081166000908152600160205260409020541690565b6100c06100bb366004610310565b610139565b604051610078919061032d565b6100646100db366004610310565b6101e2565b6001600160a01b0381811660009081526002602052604081205490911661011a5760405163312d19bf60e21b815260040160405180910390fd5b506001600160a01b039081166000908152600260205260409020541690565b6001600160a01b0380821660009081526001602052604090205460609116806101755760405163312d19bf60e21b815260040160405180910390fd5b806001600160a01b031663e4b6db4c6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101db91908101906103a0565b9392505050565b6001600160a01b038181166000908152600160205260408120549091161561021d57604051636250ec4d60e01b815260040160405180910390fd5b600060405161022b906102eb565b604051809103906000f080158015610247573d6000803e3d6000fd5b506001600160a01b03808516600081815260016020908152604080832080549587166001600160a01b03199687168117909155835260029091528120805490931690911790915580549192508061029d83610465565b9091555050604080516001600160a01b038086168252831660208201527f2cf58b2dfc67dd9fd9d3be318ce396658897594c9e8d321599127060601c9a95910160405180910390a192915050565b6109338061048d83390190565b6001600160a01b038116811461030d57600080fd5b50565b60006020828403121561032257600080fd5b81356101db816102f8565b6020808252825182820181905260009190848201906040850190845b8181101561036e5783516001600160a01b031683529284019291840191600101610349565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b805161039b816102f8565b919050565b600060208083850312156103b357600080fd5b825167ffffffffffffffff808211156103cb57600080fd5b818501915085601f8301126103df57600080fd5b8151818111156103f1576103f161037a565b8060051b604051601f19603f830116810181811085821117156104165761041661037a565b60405291825284820192508381018501918883111561043457600080fd5b938501935b828510156104595761044a85610390565b84529385019392850192610439565b98975050505050505050565b60006001820161048557634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50610913806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a0214610046578063affd9aba14610077578063e4b6db4c1461009a575b600080fd5b610059610054366004610551565b6100af565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a610085366004610600565b6100e4565b604051901515815260200161006e565b6100a261028c565b60405161006e919061062c565b60148101516000906100c1828261029d565b6100d2576100d06000826102c4565b505b50630a85bd0160e11b95945050505050565b60405163b09afec160e01b81526004810182905260009081906001600160a01b0385169063b09afec190602401600060405180830381865afa15801561012e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610156919081019061071e565b80519091506001600160a01b031633146101835760405163dc467f7760e01b815260040160405180910390fd5b60608101516080820151604080840151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156101e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610206919061085c565b6040516370a0823160e01b81523060048201529092506001600160a01b038516906370a0823190602401602060405180830381865afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610877565b600003610285576102836000856102d9565b505b5092915050565b606061029860006102ee565b905090565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b60006102bb836001600160a01b038416610302565b60006102bb836001600160a01b038416610351565b606060006102fb83610444565b9392505050565b6000818152600183016020526040812054610349575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102be565b5060006102be565b6000818152600183016020526040812054801561043a576000610375600183610890565b855490915060009061038990600190610890565b90508181146103ee5760008660000182815481106103a9576103a96108b1565b90600052602060002001549050808760000184815481106103cc576103cc6108b1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806103ff576103ff6108c7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102be565b60009150506102be565b60608160000180548060200260200160405190810160405280929190818152602001828054801561049457602002820191906000526020600020905b815481526020019060010190808311610480575b50505050509050919050565b6001600160a01b03811681146104b557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156104f2576104f26104b8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610521576105216104b8565b604052919050565b600067ffffffffffffffff821115610543576105436104b8565b50601f01601f191660200190565b6000806000806080858703121561056757600080fd5b8435610572816104a0565b93506020850135610582816104a0565b925060408501359150606085013567ffffffffffffffff8111156105a557600080fd5b8501601f810187136105b657600080fd5b80356105c96105c482610529565b6104f8565b8181528860208385010111156105de57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561061357600080fd5b823561061e816104a0565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561066d5783516001600160a01b031683529284019291840191600101610648565b50909695505050505050565b8051610684816104a0565b919050565b600082601f83011261069a57600080fd5b81516106a86105c482610529565b818152602085818487010111156106be57600080fd5b60005b838110156106dc5785810182015183820183015281016106c1565b50600092820101919091529392505050565b80516005811061068457600080fd5b8051801515811461068457600080fd5b805160ff8116811461068457600080fd5b60006020828403121561073057600080fd5b815167ffffffffffffffff8082111561074857600080fd5b908301906101e0828603121561075d57600080fd5b6107656104ce565b61076e83610679565b8152602083015160208201526040830151604082015261079060608401610679565b60608201526107a160808401610679565b60808201526107b260a08401610679565b60a082015260c083015160c082015260e0830151828111156107d357600080fd5b6107df87828601610689565b60e08301525061010091506107f58284016106ee565b918101919091526101208281015190820152610140808301519082015261016080830151908201526101809061082c8284016106fd565b828201526101a0915081830151828201526101c0915061084d82840161070d565b91810191909152949350505050565b60006020828403121561086e57600080fd5b6102bb826106fd565b60006020828403121561088957600080fd5b5051919050565b818103818111156102be57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212200d59c8e9b4cd29afc45ebb8ce19a6c847cdce46eedfbabc3d84b08314a678c2664736f6c63430008120033a26469706673582212200a6f3e3410e03ecc0bf8ba274135673cb1a3e2c0c36bdf634258f24225dcc22564736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063209fba0f146100515780632c09e39214610081578063865c79a9146100ad578063c6ddee24146100cd575b600080fd5b61006461005f366004610310565b6100e0565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f366004610310565b6001600160a01b039081166000908152600160205260409020541690565b6100c06100bb366004610310565b610139565b604051610078919061032d565b6100646100db366004610310565b6101e2565b6001600160a01b0381811660009081526002602052604081205490911661011a5760405163312d19bf60e21b815260040160405180910390fd5b506001600160a01b039081166000908152600260205260409020541690565b6001600160a01b0380821660009081526001602052604090205460609116806101755760405163312d19bf60e21b815260040160405180910390fd5b806001600160a01b031663e4b6db4c6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101db91908101906103a0565b9392505050565b6001600160a01b038181166000908152600160205260408120549091161561021d57604051636250ec4d60e01b815260040160405180910390fd5b600060405161022b906102eb565b604051809103906000f080158015610247573d6000803e3d6000fd5b506001600160a01b03808516600081815260016020908152604080832080549587166001600160a01b03199687168117909155835260029091528120805490931690911790915580549192508061029d83610465565b9091555050604080516001600160a01b038086168252831660208201527f2cf58b2dfc67dd9fd9d3be318ce396658897594c9e8d321599127060601c9a95910160405180910390a192915050565b6109338061048d83390190565b6001600160a01b038116811461030d57600080fd5b50565b60006020828403121561032257600080fd5b81356101db816102f8565b6020808252825182820181905260009190848201906040850190845b8181101561036e5783516001600160a01b031683529284019291840191600101610349565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b805161039b816102f8565b919050565b600060208083850312156103b357600080fd5b825167ffffffffffffffff808211156103cb57600080fd5b818501915085601f8301126103df57600080fd5b8151818111156103f1576103f161037a565b8060051b604051601f19603f830116810181811085821117156104165761041661037a565b60405291825284820192508381018501918883111561043457600080fd5b938501935b828510156104595761044a85610390565b84529385019392850192610439565b98975050505050505050565b60006001820161048557634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50610913806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063150b7a0214610046578063affd9aba14610077578063e4b6db4c1461009a575b600080fd5b610059610054366004610551565b6100af565b6040516001600160e01b031990911681526020015b60405180910390f35b61008a610085366004610600565b6100e4565b604051901515815260200161006e565b6100a261028c565b60405161006e919061062c565b60148101516000906100c1828261029d565b6100d2576100d06000826102c4565b505b50630a85bd0160e11b95945050505050565b60405163b09afec160e01b81526004810182905260009081906001600160a01b0385169063b09afec190602401600060405180830381865afa15801561012e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610156919081019061071e565b80519091506001600160a01b031633146101835760405163dc467f7760e01b815260040160405180910390fd5b60608101516080820151604080840151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af11580156101e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610206919061085c565b6040516370a0823160e01b81523060048201529092506001600160a01b038516906370a0823190602401602060405180830381865afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610877565b600003610285576102836000856102d9565b505b5092915050565b606061029860006102ee565b905090565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b60006102bb836001600160a01b038416610302565b60006102bb836001600160a01b038416610351565b606060006102fb83610444565b9392505050565b6000818152600183016020526040812054610349575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102be565b5060006102be565b6000818152600183016020526040812054801561043a576000610375600183610890565b855490915060009061038990600190610890565b90508181146103ee5760008660000182815481106103a9576103a96108b1565b90600052602060002001549050808760000184815481106103cc576103cc6108b1565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806103ff576103ff6108c7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102be565b60009150506102be565b60608160000180548060200260200160405190810160405280929190818152602001828054801561049457602002820191906000526020600020905b815481526020019060010190808311610480575b50505050509050919050565b6001600160a01b03811681146104b557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156104f2576104f26104b8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610521576105216104b8565b604052919050565b600067ffffffffffffffff821115610543576105436104b8565b50601f01601f191660200190565b6000806000806080858703121561056757600080fd5b8435610572816104a0565b93506020850135610582816104a0565b925060408501359150606085013567ffffffffffffffff8111156105a557600080fd5b8501601f810187136105b657600080fd5b80356105c96105c482610529565b6104f8565b8181528860208385010111156105de57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561061357600080fd5b823561061e816104a0565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b8181101561066d5783516001600160a01b031683529284019291840191600101610648565b50909695505050505050565b8051610684816104a0565b919050565b600082601f83011261069a57600080fd5b81516106a86105c482610529565b818152602085818487010111156106be57600080fd5b60005b838110156106dc5785810182015183820183015281016106c1565b50600092820101919091529392505050565b80516005811061068457600080fd5b8051801515811461068457600080fd5b805160ff8116811461068457600080fd5b60006020828403121561073057600080fd5b815167ffffffffffffffff8082111561074857600080fd5b908301906101e0828603121561075d57600080fd5b6107656104ce565b61076e83610679565b8152602083015160208201526040830151604082015261079060608401610679565b60608201526107a160808401610679565b60808201526107b260a08401610679565b60a082015260c083015160c082015260e0830151828111156107d357600080fd5b6107df87828601610689565b60e08301525061010091506107f58284016106ee565b918101919091526101208281015190820152610140808301519082015261016080830151908201526101809061082c8284016106fd565b828201526101a0915081830151828201526101c0915061084d82840161070d565b91810191909152949350505050565b60006020828403121561086e57600080fd5b6102bb826106fd565b60006020828403121561088957600080fd5b5051919050565b818103818111156102be57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212200d59c8e9b4cd29afc45ebb8ce19a6c847cdce46eedfbabc3d84b08314a678c2664736f6c63430008120033a26469706673582212200a6f3e3410e03ecc0bf8ba274135673cb1a3e2c0c36bdf634258f24225dcc22564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3998,
        "contract": "contracts/CreatorContract/CreatorManager.sol:CreatorManager",
        "label": "s_creatorsCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4003,
        "contract": "contracts/CreatorContract/CreatorManager.sol:CreatorManager",
        "label": "s_creatorAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(CreatorContract)3988)"
      },
      {
        "astId": 4007,
        "contract": "contracts/CreatorContract/CreatorManager.sol:CreatorManager",
        "label": "s_walletAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(CreatorContract)3988": {
        "encoding": "inplace",
        "label": "contract CreatorContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(CreatorContract)3988)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CreatorContract)",
        "numberOfBytes": "32",
        "value": "t_contract(CreatorContract)3988"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}