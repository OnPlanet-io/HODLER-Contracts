{
  "address": "0x36B4dd453481936962246440f8aD0A3059dcEf99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "campaignFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pmMembershipManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pmTeamManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creatorManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__CONTRACT_IS_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__FAILED_TO_TRANSFER_BNBS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__FAILED_TO_TRANSFER_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__NOT_MEMBER_OR_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__NOT_OWNER_OF_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardCampaignFactory__START_TIME_SHOULD_BE_FUTURE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Poolcreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "action",
          "type": "bool"
        }
      ],
      "name": "changePauseStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum PMLibrary.CampaignCategories",
              "name": "category",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "enum PMLibrary.ProfileType",
              "name": "profileType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            }
          ],
          "internalType": "struct PMLibrary.ProjectInfo",
          "name": "projectInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PMLibrary.RewardPoolInfo",
          "name": "rewardPoolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "image_1_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_3_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_6_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_9_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_12_months",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "APY_1_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_3_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_6_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_9_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_12_months",
              "type": "uint8"
            }
          ],
          "internalType": "struct PMLibrary.NFTData",
          "name": "nftData",
          "type": "tuple"
        }
      ],
      "name": "createARewardCampaign",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPMAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPoolByID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "getPoolIdsOfATeam",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolIdsOfAUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9329635aefbc95376f79340a30ec197e940183de0f1952dc67be792886f2da7",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0x36B4dd453481936962246440f8aD0A3059dcEf99",
    "transactionIndex": 0,
    "gasUsed": "5434290",
    "logsBloom": "0x
    "blockHash": "0x829a857985bf68c57b3204a7e75532ad7de2c00140dfac922ed24d54988015d9",
    "transactionHash": "0xd9329635aefbc95376f79340a30ec197e940183de0f1952dc67be792886f2da7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3980415,
        "transactionHash": "0xd9329635aefbc95376f79340a30ec197e940183de0f1952dc67be792886f2da7",
        "address": "0x36B4dd453481936962246440f8aD0A3059dcEf99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x829a857985bf68c57b3204a7e75532ad7de2c00140dfac922ed24d54988015d9"
      }
    ],
    "blockNumber": 3980415,
    "cumulativeGasUsed": "5434290",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF67F00E32507B9201d44c9d5a3540768EbC2104f",
    "0x3C17C3Dfe724A89b6Ca538912d7d7FFE08dBf90e",
    "0xFB2ac5244D4BD3d0B00cF3e91434cdE0DC562e9c",
    "0xf8a8Acfea832Cd265d26e31BAB411b03B01180e6"
  ],
  "numDeployments": 1,
  "solcInputHash": "f3f6c715391d995e0d22c3812177edd2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"campaignFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pmMembershipManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pmTeamManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__CONTRACT_IS_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__FAILED_TO_TRANSFER_BNBS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__FAILED_TO_TRANSFER_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__NOT_MEMBER_OR_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__NOT_OWNER_OF_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardCampaignFactory__START_TIME_SHOULD_BE_FUTURE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Poolcreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"}],\"name\":\"changePauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum PMLibrary.CampaignCategories\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"enum PMLibrary.ProfileType\",\"name\":\"profileType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"internalType\":\"struct PMLibrary.ProjectInfo\",\"name\":\"projectInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PMLibrary.RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image_1_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_3_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_6_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_9_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_12_months\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"APY_1_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_3_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_6_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_9_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_12_months\",\"type\":\"uint8\"}],\"internalType\":\"struct PMLibrary.NFTData\",\"name\":\"nftData\",\"type\":\"tuple\"}],\"name\":\"createARewardCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPMAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPoolByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"getPoolIdsOfATeam\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolIdsOfAUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardCampaign/RewardCampaignFactory.sol\":\"RewardCampaignFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RewardCampaign/RewardCampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {ERC721Enumerable, ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {PMLibrary} from \\\"../library/PMLibrary.sol\\\";\\r\\n\\r\\nimport {ICreatorContract} from \\\"../interfaces/ICreatorContract.sol\\\";\\r\\nimport {ICreatorManager} from \\\"../interfaces/ICreatorManager.sol\\\";\\r\\nimport {ICampaignFeeManager} from \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract RewardCampaign is ERC721, ERC721Enumerable {\\r\\n\\r\\n    error RewardCampaign__POOL_NOT_STARTED();\\r\\n    error RewardCampaign__NOT_ENOUGH_REWARD_IN_POOL();\\r\\n    error RewardCampaign__NOT_AUTHERIZED();\\r\\n    error RewardCampaign__NOTHING_TO_CLAIM();\\r\\n    error RewardCampaign__ALREADY_CLAIMED();\\r\\n    error RewardCampaign__INSUFFICIENT_FUNDS();\\r\\n    error RewardCampaign__FAILED_TO_TRANSFER_BNBS();\\r\\n    error RewardCampaign__FAILED_TO_TRANSFER_TOEKNS();\\r\\n    error RewardCampaign__FAILED_TO_TRANSFER_ORIGNAL_TOEKNS();\\r\\n    error RewardCampaign__FAILED_TO_TRANSFER_REWARD_TOEKNS();\\r\\n    error RewardCampaign__NO_CREATOR_CONTRACT_FOUND();\\r\\n    error RewardCampaign__NOT_A_VALID_CLAIM_TYPE();\\r\\n\\r\\n    uint256 internal constant ONE_DAY = 24 * 60 * 60;\\r\\n    PMLibrary.PoolInfo private s_poolInfo;\\r\\n    PMLibrary.ProjectInfo private s_projectInfo;\\r\\n    PMLibrary.RewardPoolInfo private s_rewardPoolInfo;\\r\\n\\r\\n    ICreatorManager private immutable s_creatorManager;\\r\\n    address private immutable s_campaignFeeManager;\\r\\n    PMLibrary.NFTData private s_nftData;\\r\\n\\r\\n    struct InvestmentCategeroy {\\r\\n        uint256 duration;\\r\\n        uint256 rewardPC;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    mapping(PMLibrary.InvestmentType => InvestmentCategeroy) private s_investmentInfo;\\r\\n    mapping(uint256 => PMLibrary.TokenData) private s_tokenData;\\r\\n\\r\\n    event JoinedPool(\\r\\n        uint256 poolId,\\r\\n        uint256 tokenId,\\r\\n        address user,\\r\\n        uint256 contribution,\\r\\n        uint8 category\\r\\n    );\\r\\n\\r\\n\\r\\n    event ExitedPool(\\r\\n        uint256 id,\\r\\n        address creator,\\r\\n        uint256 contribution,\\r\\n        uint8 category,\\r\\n        uint256 redeemableReward\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        uint256 _poolId,\\r\\n        PMLibrary.ProjectInfo memory _projectInfo,\\r\\n        PMLibrary.RewardPoolInfo memory _rewardPoolInfo,\\r\\n        PMLibrary.NFTData memory _nftData,\\r\\n        address _creatorManager,\\r\\n        address _campaignFeeManager,\\r\\n        address _ownerOfProject\\r\\n    ) ERC721(_projectInfo.projectName, _projectInfo.projectSymbol) {\\r\\n\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.ONE_MONTH].duration = 30 * ONE_DAY;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.ONE_MONTH].rewardPC = _nftData.APY_1_months;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.ONE_MONTH].image = _nftData.image_1_months;\\r\\n\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.THREE_MONTH].duration = 90 * ONE_DAY;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.THREE_MONTH].rewardPC = _nftData.APY_3_months;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.THREE_MONTH].image = _nftData.image_3_months;\\r\\n\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.SIX_MONTH].duration = 180 * ONE_DAY;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.SIX_MONTH].rewardPC = _nftData.APY_6_months;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.SIX_MONTH].image = _nftData.image_6_months;\\r\\n\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.NINE_MONTH].duration = 270 * ONE_DAY;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.NINE_MONTH].rewardPC = _nftData.APY_9_months;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.NINE_MONTH].image = _nftData.image_9_months;\\r\\n\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.TWELVE_MONTH].duration = 365 * ONE_DAY;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.TWELVE_MONTH].rewardPC = _nftData.APY_12_months;\\r\\n        s_investmentInfo[PMLibrary.InvestmentType.TWELVE_MONTH].image = _nftData.image_12_months;\\r\\n\\r\\n        s_projectInfo = _projectInfo;\\r\\n        s_rewardPoolInfo = _rewardPoolInfo;\\r\\n        s_nftData = _nftData;\\r\\n\\r\\n        s_poolInfo.poolId = _poolId;\\r\\n        s_poolInfo.poolOwner = _ownerOfProject;\\r\\n        s_poolInfo.poolAddress = address(this);\\r\\n        s_poolInfo.remainingPool = _rewardPoolInfo.poolAmount;\\r\\n\\r\\n        s_creatorManager = ICreatorManager(_creatorManager);\\r\\n        s_campaignFeeManager = _campaignFeeManager;\\r\\n    }\\r\\n\\r\\n    /// @notice The main function to invest tokens\\r\\n    function investTokens(\\r\\n        address onBehalf,\\r\\n        uint256 amount,\\r\\n        PMLibrary.InvestmentType investmentType\\r\\n    ) public {\\r\\n        PMLibrary.PoolInfo memory poolInfo = s_poolInfo;\\r\\n        PMLibrary.RewardPoolInfo memory rewardPoolInfo = s_rewardPoolInfo;\\r\\n        PMLibrary.ProjectInfo memory projectInfo = s_projectInfo;\\r\\n        InvestmentCategeroy memory category = s_investmentInfo[investmentType];\\r\\n\\r\\n        // Check if pool has been started\\r\\n        if (block.timestamp < rewardPoolInfo.startedAt) {\\r\\n            revert RewardCampaign__POOL_NOT_STARTED();\\r\\n        }\\r\\n\\r\\n        // Check if category is valid\\r\\n        if (category.rewardPC == 0) {\\r\\n            revert RewardCampaign__NOT_A_VALID_CLAIM_TYPE();\\r\\n        }\\r\\n\\r\\n        // Calculate reward of this person\\r\\n        uint256 reward = (amount * category.rewardPC) / 100;\\r\\n\\r\\n        // Check if pool has enough space to give this reward\\r\\n        if (poolInfo.remainingPool < reward) {\\r\\n            revert RewardCampaign__NOT_ENOUGH_REWARD_IN_POOL();\\r\\n        }\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        s_poolInfo.remainingPool -= reward;\\r\\n        // Update the total invested tokens variable\\r\\n        s_poolInfo.totalTokensInvested += amount;\\r\\n        // update totalParicipants\\r\\n        s_poolInfo.totalParicipants++;\\r\\n        // Update the tokenID\\r\\n        uint256 tokenId = ++s_poolInfo.tokenCounter;\\r\\n\\r\\n        //Check if user has a creator contract\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(onBehalf);\\r\\n\\r\\n        // Not already a creator then create one\\r\\n        if (creator == address(0)) {\\r\\n            creator = s_creatorManager.createACreator(onBehalf);\\r\\n        }\\r\\n\\r\\n        // Record the investment entry\\r\\n        s_tokenData[tokenId] = PMLibrary.TokenData({\\r\\n            poolAddress: address(this),\\r\\n            poolId: poolInfo.poolId,\\r\\n            tokenInvested: amount,\\r\\n            tokenAddress: projectInfo.tokenAddress,\\r\\n            owner: address(onBehalf),\\r\\n            creator: address(creator),\\r\\n            tokenId: tokenId,\\r\\n            tokenUri: category.image,\\r\\n            investmentType: investmentType,\\r\\n            investmentTime: block.timestamp,\\r\\n            unlockTime: block.timestamp + category.duration,\\r\\n            expectedReward: reward,\\r\\n            isUnskated: false,\\r\\n            redeemedReward: 0,\\r\\n            pcReceived: 0\\r\\n        });\\r\\n\\r\\n        bool transfered = IERC20(projectInfo.tokenAddress).transferFrom(\\r\\n            msg.sender,\\r\\n            address(creator),\\r\\n            amount\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert RewardCampaign__FAILED_TO_TRANSFER_TOEKNS();\\r\\n        }\\r\\n\\r\\n        // Mint An NFT to the creator contract with token detials\\r\\n        _safeMint(\\r\\n            creator,\\r\\n            tokenId,\\r\\n            abi.encodePacked(address(this))\\r\\n        );\\r\\n\\r\\n        emit JoinedPool(\\r\\n            poolInfo.poolId,\\r\\n            tokenId,\\r\\n            onBehalf,\\r\\n            amount,\\r\\n            uint8(investmentType)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice claimTokensAndReward can only be called by creator contract of the token holder.\\r\\n    function claimTokensAndReward(uint256 tokenId) public payable {\\r\\n        PMLibrary.TokenData memory tokenData = s_tokenData[tokenId];\\r\\n\\r\\n        if (msg.sender != tokenData.owner) {\\r\\n            revert RewardCampaign__NOT_AUTHERIZED();\\r\\n        }\\r\\n\\r\\n        /// @notice Calculating the reward after pelanty;\\r\\n        (\\r\\n            uint256 redeemableReward,\\r\\n            uint8 pcReceived,\\r\\n            uint256 fee\\r\\n        ) = findRedeemableReward(\\r\\n                tokenData.expectedReward,\\r\\n                tokenData.investmentTime,\\r\\n                tokenData.unlockTime\\r\\n            );\\r\\n\\r\\n        if (msg.value < fee) {\\r\\n            revert RewardCampaign__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        if (tokenData.expectedReward == 0) {\\r\\n            revert RewardCampaign__NOTHING_TO_CLAIM();\\r\\n        }\\r\\n\\r\\n        if (tokenData.isUnskated) {\\r\\n            revert RewardCampaign__ALREADY_CLAIMED();\\r\\n        }\\r\\n\\r\\n        s_tokenData[tokenId].isUnskated = true;\\r\\n        s_tokenData[tokenId].redeemedReward = redeemableReward;\\r\\n        s_tokenData[tokenId].pcReceived = pcReceived;\\r\\n\\r\\n        uint256 leftoverReward = tokenData.expectedReward - redeemableReward;\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        s_poolInfo.remainingPool += leftoverReward;\\r\\n\\r\\n        // Transfer fee to FeeManager\\r\\n        (bool sent, ) = payable(s_campaignFeeManager).call{value: msg.value}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        if (!sent) {\\r\\n            revert RewardCampaign__FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n        _burn(tokenId);\\r\\n\\r\\n        // Move tokens back to the user\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(msg.sender);\\r\\n        bool transfered = ICreatorContract(creator).sendTokensBackToOwner(\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert RewardCampaign__FAILED_TO_TRANSFER_ORIGNAL_TOEKNS();\\r\\n        }\\r\\n\\r\\n        transfered = IERC20(tokenData.tokenAddress).transfer(\\r\\n            tokenData.owner,\\r\\n            redeemableReward\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert RewardCampaign__FAILED_TO_TRANSFER_REWARD_TOEKNS();\\r\\n        }\\r\\n\\r\\n        emit ExitedPool(\\r\\n            tokenData.poolId,\\r\\n            msg.sender,\\r\\n            tokenData.tokenInvested,\\r\\n            uint8(tokenData.investmentType),\\r\\n            redeemableReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice - penalties (50% completion -> 30% reward, 80% completion -> 50% reward, 100% completion -> 100% reward)\\r\\n    /// @notice an internal function to compute redeemable reward after pelanties.\\r\\n    function findRedeemableReward(\\r\\n        uint256 _expectedReward,\\r\\n        uint256 _investmentTime,\\r\\n        uint256 _unlockTime\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 redeemableReward, uint8 pcReceived, uint256 fee)\\r\\n    {\\r\\n        ICampaignFeeManager campaignFeeManager = ICampaignFeeManager(\\r\\n            s_campaignFeeManager\\r\\n        );\\r\\n\\r\\n        // Either 90 days, 180 days or 365 days.\\r\\n        uint256 investmentPeriod = _unlockTime - _investmentTime;\\r\\n        uint256 durationCompleted = block.timestamp - _investmentTime;\\r\\n        uint256 pcCompleted = (durationCompleted * 100) / investmentPeriod;\\r\\n\\r\\n        if (pcCompleted < 50) {\\r\\n            pcReceived = 0;\\r\\n            redeemableReward = 0;\\r\\n            fee = campaignFeeManager.getClaimFee(\\r\\n                PMLibrary.ClaimCategories.REWARD_0pc\\r\\n            );\\r\\n        } else if (pcCompleted >= 50 && pcCompleted < 80) {\\r\\n            pcReceived = 30;\\r\\n            redeemableReward = (_expectedReward * pcReceived) / 100;\\r\\n            fee = campaignFeeManager.getClaimFee(\\r\\n                PMLibrary.ClaimCategories.REWARD_30pc\\r\\n            );\\r\\n        } else if (pcCompleted >= 80 && pcCompleted < 100) {\\r\\n            pcReceived = 50;\\r\\n            redeemableReward = (_expectedReward * 50) / 100;\\r\\n            fee = campaignFeeManager.getClaimFee(\\r\\n                PMLibrary.ClaimCategories.REWARD_50pc\\r\\n            );\\r\\n        } else {\\r\\n            pcReceived = 100;\\r\\n            redeemableReward = _expectedReward;\\r\\n            fee = campaignFeeManager.getClaimFee(\\r\\n                PMLibrary.ClaimCategories.REWARD_100pc\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkTokenReward(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 expectedReward,\\r\\n            uint256 redeemableReward,\\r\\n            uint8 pcReceived,\\r\\n            uint256 fee\\r\\n        )\\r\\n    {\\r\\n        PMLibrary.TokenData memory tokenData = s_tokenData[tokenId];\\r\\n        expectedReward = tokenData.expectedReward;\\r\\n        (redeemableReward, pcReceived, fee) = findRedeemableReward(\\r\\n            tokenData.expectedReward,\\r\\n            tokenData.investmentTime,\\r\\n            tokenData.unlockTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Getter functions\\r\\n    function getProjectInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (PMLibrary.PoolFullInfo memory)\\r\\n    {\\r\\n        return\\r\\n            PMLibrary.PoolFullInfo(\\r\\n                s_poolInfo,\\r\\n                s_projectInfo,\\r\\n                s_rewardPoolInfo,\\r\\n                s_nftData\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getTokenData(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (PMLibrary.TokenData memory) {\\r\\n        return s_tokenData[tokenId];\\r\\n    }\\r\\n\\r\\n    function getUserTokens(\\r\\n        address user\\r\\n    ) external view returns (\\r\\n        PMLibrary.TokenData[] memory\\r\\n        ) {\\r\\n\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(user);\\r\\n        if (creator == address(0)) {\\r\\n            revert RewardCampaign__NO_CREATOR_CONTRACT_FOUND();\\r\\n        }\\r\\n\\r\\n        uint256 userBalance = balanceOf(creator);\\r\\n        PMLibrary.TokenData[]\\r\\n            memory tokensData = new PMLibrary.TokenData[](userBalance);\\r\\n            for (uint256 i = 0; i < userBalance; i++) {\\r\\n                uint256 tokenId = tokenOfOwnerByIndex(creator, i);\\r\\n                PMLibrary.TokenData memory data = s_tokenData[tokenId];\\r\\n                tokensData[i] = data;\\r\\n            }\\r\\n\\r\\n        return (tokensData);\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Override Functions */\\r\\n    \\r\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc8533e439cd79439a339f3c37f4e910fda42295154536122d78b48001f6fda9b\",\"license\":\"MIT\"},\"contracts/RewardCampaign/RewardCampaignFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport {RewardCampaign} from \\\"./RewardCampaign.sol\\\";\\r\\nimport {PMLibrary} from \\\"../library/PMLibrary.sol\\\";\\r\\n\\r\\nimport {IPMMembershipManager} from \\\"../interfaces/IPMMembershipManager.sol\\\";\\r\\nimport {IPMTeamManager} from \\\"../interfaces/IPMTeamManager.sol\\\";\\r\\nimport {ICampaignFeeManager} from \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract RewardCampaignFactory is Ownable {\\r\\n\\r\\n    error RewardCampaignFactory__NOT_MEMBER_OR_TEAM();\\r\\n    error RewardCampaignFactory__NOT_OWNER_OF_TEAM();\\r\\n    error RewardCampaignFactory__START_TIME_SHOULD_BE_FUTURE();\\r\\n    error RewardCampaignFactory__FAILED_TO_TRANSFER_TOKENS();\\r\\n    error RewardCampaignFactory__CONTRACT_IS_PAUSED();\\r\\n    error RewardCampaignFactory__FAILED_TO_TRANSFER_BNBS();\\r\\n    error RewardCampaignFactory__INSUFFICIENT_FUNDS();\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private s_projectsCount;\\r\\n    bool private s_isPaused = false;\\r\\n\\r\\n    address private s_campaignFeeManager;\\r\\n    address private s_pmMembershipManager;\\r\\n    address private s_pmTeamManager;\\r\\n    address private s_creatorManager;\\r\\n\\r\\n    mapping(address userAddress => uint256[] pools) private s_poolsOfAUser;\\r\\n    mapping(uint256 teamId => uint256[] pools) private s_poolsOfATeam;\\r\\n\\r\\n    mapping(address tokenAddress => address[] pools) private s_poolsByToken;\\r\\n    mapping(uint256 id => address pool) private s_poolByID;\\r\\n\\r\\n    event Poolcreated(\\r\\n        uint256 poolId,\\r\\n        address poolAddress,\\r\\n        address tokenAddress\\r\\n    );\\r\\n\\r\\n    constructor(        \\r\\n        address campaignFeeManager,\\r\\n        address pmMembershipManager,\\r\\n        address pmTeamManager,\\r\\n        address creatorManager\\r\\n    ) {\\r\\n        s_campaignFeeManager = campaignFeeManager;\\r\\n        s_pmMembershipManager = pmMembershipManager;\\r\\n        s_pmTeamManager = pmTeamManager;\\r\\n        s_creatorManager = creatorManager;\\r\\n    }\\r\\n\\r\\n    function createARewardCampaign(\\r\\n        PMLibrary.ProjectInfo memory projectInfo,\\r\\n        PMLibrary.RewardPoolInfo memory rewardPoolInfo,\\r\\n        PMLibrary.NFTData memory nftData\\r\\n    ) public payable {\\r\\n        if (s_isPaused) {\\r\\n            revert RewardCampaignFactory__CONTRACT_IS_PAUSED();\\r\\n        }\\r\\n\\r\\n        bool hasTeam = IPMTeamManager(s_pmTeamManager).balanceOf(\\r\\n            msg.sender\\r\\n        ) > 0;\\r\\n        bool isMember = IPMMembershipManager(s_pmMembershipManager)\\r\\n            .isMember(msg.sender);\\r\\n\\r\\n        // To start a campaign, user should be a premium member or he should have a team membership.\\r\\n        if (!hasTeam && !isMember) {\\r\\n            revert RewardCampaignFactory__NOT_MEMBER_OR_TEAM();\\r\\n        }\\r\\n\\r\\n        if (projectInfo.profileType == PMLibrary.ProfileType.TEAM) {\\r\\n            address ownerOfTeam = IPMTeamManager(s_pmTeamManager).ownerOf(projectInfo.profileId);\\r\\n            if (ownerOfTeam != msg.sender) {\\r\\n                revert RewardCampaignFactory__NOT_OWNER_OF_TEAM();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 requiredFee = ICampaignFeeManager(s_campaignFeeManager).getCampaignFee(projectInfo.category);\\r\\n\\r\\n        if (msg.value < requiredFee) {\\r\\n            revert RewardCampaignFactory__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        if (rewardPoolInfo.startedAt < block.timestamp) {\\r\\n            revert RewardCampaignFactory__START_TIME_SHOULD_BE_FUTURE();\\r\\n        }\\r\\n\\r\\n        s_projectsCount.increment();\\r\\n        uint256 newId = s_projectsCount.current();\\r\\n\\r\\n\\r\\n        RewardCampaign rewardCampaign = new RewardCampaign(\\r\\n            newId,\\r\\n            projectInfo,\\r\\n            rewardPoolInfo,\\r\\n            nftData,\\r\\n            s_creatorManager,\\r\\n            s_campaignFeeManager,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        if (projectInfo.profileType == PMLibrary.ProfileType.TEAM) {\\r\\n            s_poolsOfATeam[projectInfo.profileId].push(newId);\\r\\n        }\\r\\n\\r\\n        s_poolsByToken[projectInfo.tokenAddress].push(\\r\\n            address(rewardCampaign)\\r\\n        );\\r\\n        s_poolByID[newId] = address(rewardCampaign);\\r\\n        s_poolsOfAUser[msg.sender].push(newId);\\r\\n\\r\\n        bool transfered = IERC20(projectInfo.tokenAddress).transferFrom(\\r\\n            msg.sender,\\r\\n            address(rewardCampaign),\\r\\n            rewardPoolInfo.poolAmount\\r\\n        );\\r\\n\\r\\n        if (!transfered) {\\r\\n            revert RewardCampaignFactory__FAILED_TO_TRANSFER_TOKENS();\\r\\n        }\\r\\n\\r\\n        (bool sent, ) = payable(s_campaignFeeManager).call{\\r\\n            value: msg.value\\r\\n        }(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert RewardCampaignFactory__FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n        emit Poolcreated(\\r\\n            newId,\\r\\n            address(rewardCampaign),\\r\\n            projectInfo.tokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* Getter Functions */\\r\\n\\r\\n    function getPoolsByToken(\\r\\n        address token\\r\\n    ) external view returns (address[] memory) {\\r\\n        return s_poolsByToken[token];\\r\\n    }\\r\\n\\r\\n    function getPoolByID(uint256 id) external view returns (address) {\\r\\n        return s_poolByID[id];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfAUser(\\r\\n        address user\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return s_poolsOfAUser[user];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfATeam(\\r\\n        uint256 teamId\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return s_poolsOfATeam[teamId];\\r\\n    }\\r\\n\\r\\n    function isPaused() external view returns (bool) {\\r\\n        return s_isPaused;\\r\\n    }\\r\\n\\r\\n    function getPMAddresses() external view returns (address,address,address,address) {\\r\\n        return (\\r\\n            s_campaignFeeManager,\\r\\n            s_pmMembershipManager,\\r\\n            s_pmTeamManager,\\r\\n            s_creatorManager\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* Admin Functions */\\r\\n\\r\\n    function changePauseStatus(bool action) external onlyOwner {\\r\\n        s_isPaused = action;\\r\\n    }\\r\\n\\r\\n    // function updatePMAddresses(        \\r\\n    //     address campaignFeeManager,\\r\\n    //     address pmMembershipManager,\\r\\n    //     address pmTeamManager,\\r\\n    //     address creatorManager\\r\\n    // ) external onlyOwner {\\r\\n    //     s_campaignFeeManager = campaignFeeManager;\\r\\n    //     s_pmMembershipManager = pmMembershipManager;\\r\\n    //     s_pmTeamManager = pmTeamManager;\\r\\n    //     s_creatorManager = creatorManager;\\r\\n    // }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x2b040879e7235a8e0e7b9ff6f400ea72da939e920fdfddd5ceec968b077308b1\",\"license\":\"MIT\"},\"contracts/interfaces/ICampaignFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {PMLibrary} from \\\"../library/PMLibrary.sol\\\";\\r\\n\\r\\ninterface ICampaignFeeManager  {\\r\\n    function getCampaignFee(PMLibrary.CampaignCategories category) external view returns (uint256);\\r\\n    function getClaimFee(PMLibrary.ClaimCategories category) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x0563108a397efaeb47712eea2c8b4b33916f724940c809a2396595c9f0b20faf\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICreatorContract  {\\r\\n    function sendTokensBackToOwner(address rewardPool, uint256 tokenId) external returns (bool);\\r\\n    function removePoolAddress(address _poolAddress) external;\\r\\n}\",\"keccak256\":\"0x1e7170c0ed6195d09f6caac0f640d546cc3059bbccf6d5b81317ea402bc66748\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICreatorManager  {\\r\\n    function createACreator(address user) external returns (address);\\r\\n    function getCreatorAddressOfUser(address user) external view returns (address);\\r\\n    function getWalletAddressOfCreator(address creator) external view returns (address);\\r\\n}\",\"keccak256\":\"0x95b78a291ed48827d034289f86b80e5768a99647bbe1edf03f7adb17bc6d024e\",\"license\":\"MIT\"},\"contracts/interfaces/IPMMembershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IPMMembershipManager  {\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function isMember(address user) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x1ae78a3ec26bb5da679b750ef079a6ac90496f63d7bf66833297756447367a07\",\"license\":\"MIT\"},\"contracts/interfaces/IPMTeamManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IPMTeamManager  {\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n}\",\"keccak256\":\"0x591111948ea18dacab2b9620c811941d38b843fc032bf1b3c059d327648e3e5d\",\"license\":\"MIT\"},\"contracts/library/PMLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PMLibrary {\\r\\n    \\r\\n    enum ProfileType {\\r\\n        NONE,\\r\\n        TEAM,\\r\\n        USER\\r\\n    }\\r\\n\\r\\n    enum InvestmentType {\\r\\n        ONE_MONTH,\\r\\n        THREE_MONTH,\\r\\n        SIX_MONTH,\\r\\n        NINE_MONTH,\\r\\n        TWELVE_MONTH\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        MEMBER,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum ClaimCategories{\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    enum FeesType {\\r\\n        USD,\\r\\n        BNB\\r\\n    }\\r\\n\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensInvested;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct NFTData {\\r\\n        string image_1_months;\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_9_months;\\r\\n        string image_12_months;\\r\\n        uint8 APY_1_months;\\r\\n        uint8 APY_3_months;\\r\\n        uint8 APY_6_months;\\r\\n        uint8 APY_9_months;\\r\\n        uint8 APY_12_months;\\r\\n    }\\r\\n\\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenInvested;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        InvestmentType investmentType;\\r\\n        uint256 investmentTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo;\\r\\n        RewardPoolInfo rewardPoolInfo;\\r\\n        NFTData nftData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe61cedbea1529220a58c89e0233d8fce48b12129422d53530c6f4e482ecf1ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff191690553480156200001b57600080fd5b50604051620060c4380380620060c48339810160408190526200003e9162000113565b6200004933620000a6565b600280546001600160a01b0395861661010002610100600160a81b0319909116179055600380549385166001600160a01b031994851617905560048054928516928416929092179091556005805491909316911617905562000170565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010e57600080fd5b919050565b600080600080608085870312156200012a57600080fd5b6200013585620000f6565b93506200014560208601620000f6565b92506200015560408601620000f6565b91506200016560608601620000f6565b905092959194509250565b615f4480620001806000396000f3fe608060405260043610620000a95760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001ac5780638dc6c5f614620001cc578063b187bd2614620001f1578063e451a2501462000216578063e645ab06146200022d578063f2fde38b146200027f57600080fd5b80633424b8ce14620000ae5780635055149c14620000d5578063715018a6146200012c5780637a0e6ad3146200014457806386959b4b1462000178575b600080fd5b348015620000bb57600080fd5b50620000d3620000cd36600462000aec565b620002a4565b005b348015620000e257600080fd5b506200010f620000f436600462000b13565b6000908152600960205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200013957600080fd5b50620000d3620002c1565b3480156200015157600080fd5b50620001696200016336600462000b55565b620002d9565b60405162000123919062000b75565b3480156200018557600080fd5b506200019d6200019736600462000b55565b62000347565b60405162000123919062000bbb565b348015620001b957600080fd5b506000546001600160a01b03166200010f565b348015620001d957600080fd5b5062000169620001eb36600462000b13565b620003be565b348015620001fe57600080fd5b5060025460ff16604051901515815260200162000123565b620000d36200022736600462000ec4565b62000420565b3480156200023a57600080fd5b50600254600354600454600554604080516101009095046001600160a01b03908116865293841660208601529183169184019190915216606082015260800162000123565b3480156200028c57600080fd5b50620000d36200029e36600462000b55565b620009a0565b620002ae62000a23565b6002805460ff1916911515919091179055565b620002cb62000a23565b620002d7600062000a7f565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200033b57602002820191906000526020600020905b81548152602001906001019080831162000326575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200033b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003945750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200033b5760200282019190600052602060002090815481526020019060010190808311620003265750505050509050919050565b60025460ff16156200044557604051637a67145160e01b815260040160405180910390fd5b600480546040516370a0823160e01b8152339281019290925260009182916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000494573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ba919062001019565b60035460405163288c314960e21b81523360048201529290911192506000916001600160a01b039091169063a230c52490602401602060405180830381865afa1580156200050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000532919062001033565b90508115801562000541575080155b1562000560576040516315b1134160e21b815260040160405180910390fd5b60018560c0015160028111156200057b576200057b62001053565b0362000625576004805460e08701516040516331a9108f60e11b8152928301526000916001600160a01b0390911690636352211e90602401602060405180830381865afa158015620005d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f7919062001069565b90506001600160a01b038116331462000623576040516314b0092160e01b815260040160405180910390fd5b505b600254855160405163abe9836360e01b815260009261010090046001600160a01b03169163abe98363916200065e9190600401620010b7565b602060405180830381865afa1580156200067c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a2919062001019565b905080341015620006c6576040516338ba8e1560e21b815260040160405180910390fd5b8451421115620006e957604051636c0e2c5160e11b815260040160405180910390fd5b620006f8600180546001019055565b60006200070460015490565b60055460025460405192935060009284928b928b928b926001600160a01b03908116926101009004169033906200073b9062000acf565b6200074d979695949392919062001208565b604051809103906000f0801580156200076a573d6000803e3d6000fd5b50905060018860c00151600281111562000788576200078862001053565b03620007b55760e08801516000908152600760209081526040822080546001810182559083529120018290555b6060880180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092558986526009855283862080549091168217905533808652600685528386208054938401815586528486209092018990559551928d015191516323b872dd60e01b815260048101919091526024810195909552604485015290929116906323b872dd906064016020604051808303816000875af115801562000882573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a8919062001033565b905080620008c95760405163124c872560e31b815260040160405180910390fd5b60025460405160009161010090046001600160a01b03169034908381818185875af1925050503d80600081146200091d576040519150601f19603f3d011682016040523d82523d6000602084013e62000922565b606091505b505090508062000945576040516323dec52d60e11b815260040160405180910390fd5b6060808b0151604080518781526001600160a01b038088166020830152909216908201527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a150505050505050505050565b620009aa62000a23565b6001600160a01b03811662000a155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a208162000a7f565b50565b6000546001600160a01b03163314620002d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a0c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614bd2806200133d83390190565b801515811462000a2057600080fd5b60006020828403121562000aff57600080fd5b813562000b0c8162000add565b9392505050565b60006020828403121562000b2657600080fd5b5035919050565b6001600160a01b038116811462000a2057600080fd5b803562000b508162000b2d565b919050565b60006020828403121562000b6857600080fd5b813562000b0c8162000b2d565b6020808252825182820181905260009190848201906040850190845b8181101562000baf5783518352928401929184019160010162000b91565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000baf5783516001600160a01b03168352928401929184019160010162000bd7565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171562000c3b5762000c3b62000bfe565b60405290565b604051610100810167ffffffffffffffff8111828210171562000c3b5762000c3b62000bfe565b80356003811062000b5057600080fd5b600082601f83011262000c8a57600080fd5b813567ffffffffffffffff8082111562000ca85762000ca862000bfe565b604051601f8301601f19908116603f0116810190828211818310171562000cd35762000cd362000bfe565b8160405283815286602085880101111562000ced57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b5057600080fd5b60006040828403121562000d3257600080fd5b6040516040810181811067ffffffffffffffff8211171562000d585762000d5862000bfe565b604052823581526020928301359281019290925250919050565b6000610140828403121562000d8657600080fd5b62000d9062000c14565b9050813567ffffffffffffffff8082111562000dab57600080fd5b62000db98583860162000c78565b8352602084013591508082111562000dd057600080fd5b62000dde8583860162000c78565b6020840152604084013591508082111562000df857600080fd5b62000e068583860162000c78565b6040840152606084013591508082111562000e2057600080fd5b62000e2e8583860162000c78565b6060840152608084013591508082111562000e4857600080fd5b5062000e578482850162000c78565b60808301525062000e6b60a0830162000d0d565b60a082015262000e7e60c0830162000d0d565b60c082015262000e9160e0830162000d0d565b60e082015261010062000ea681840162000d0d565b9082015261012062000eba83820162000d0d565b9082015292915050565b60008060006080848603121562000eda57600080fd5b833567ffffffffffffffff8082111562000ef357600080fd5b90850190610100828803121562000f0957600080fd5b62000f1362000c41565b62000f1e8362000c68565b815260208301358281111562000f3357600080fd5b62000f418982860162000c78565b60208301525060408301358281111562000f5a57600080fd5b62000f688982860162000c78565b60408301525062000f7c6060840162000b43565b606082015262000f8f6080840162000d0d565b608082015260a08301358281111562000fa757600080fd5b62000fb58982860162000c78565b60a08301525062000fc960c0840162000c68565b60c082015260e08381013590820152945062000fe9876020880162000d1f565b935060608601359150808211156200100057600080fd5b506200100f8682870162000d72565b9150509250925092565b6000602082840312156200102c57600080fd5b5051919050565b6000602082840312156200104657600080fd5b815162000b0c8162000add565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200107c57600080fd5b815162000b0c8162000b2d565b6003811062000a2057634e487b7160e01b600052602160045260246000fd5b620010b38162001089565b9052565b60208101620010c68362001089565b91905290565b6000815180845260005b81811015620010f457602081850181015186830182015201620010d6565b506000602082860101526020601f19601f83011685010191505092915050565b600061014082518185526200112c82860182620010cc565b91505060208301518482036020860152620011488282620010cc565b91505060408301518482036040860152620011648282620010cc565b91505060608301518482036060860152620011808282620010cc565b915050608083015184820360808601526200119c8282620010cc565b91505060a0830151620011b460a086018260ff169052565b5060c0830151620011ca60c086018260ff169052565b5060e0830151620011e060e086018260ff169052565b506101008381015160ff90811691860191909152610120938401511692909301919091525090565b6000610100898352806020840152620012258184018a51620010a8565b60208901518161012085015262001241610200850182620010cc565b915050604089015160ff198085840301610140860152620012638383620010cc565b925060608b01519150620012836101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620012b08282620010cc565b91505060c0890151620012c86101c0850182620010a8565b5060e08901516101e084015287516040840152602088015160608401528281036080840152620012f9818862001114565b9150506200131260a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e08301529897505050505050505056fe60c06040523480156200001157600080fd5b5060405162004bd238038062004bd283398101604081905262000034916200089b565b6020860151604087015160006200004c838262000ac6565b5060016200005b828262000ac6565b50505062015180601e62000070919062000b92565b60008052602080527f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbe95560a084015160ff167f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbea5583517f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbeb90620000f4908262000ac6565b506200010562015180605a62000b92565b600160005260208080527f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ea9190915560c085015160ff167f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344eb558401517f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ec906200018f908262000ac6565b50620001a06201518060b462000b92565b6002600052602080527f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d75560e084015160ff167f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d85560408401517f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d99062000228908262000ac6565b506200023a6201518061010e62000b92565b6003600052602080527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5561010084015160ff167f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac05560608401517f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac190620002c3908262000ac6565b50620002d56201518061016d62000b92565b6004600052602080527faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fa5561012084015160ff167faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fb5560808401517faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fc906200035e908262000ac6565b50855160118054889290829060ff1916600183600281111562000385576200038562000bbe565b021790555060208201516001820190620003a0908262000ac6565b5060408201516002820190620003b7908262000ac6565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482019062000408908262000ac6565b5060c082015160058201805460ff191660018360028111156200042f576200042f62000bbe565b021790555060e091909101516006909101558451601855602085015160195583518490601a90819062000463908262000ac6565b50602082015160018201906200047a908262000ac6565b506040820151600282019062000491908262000ac6565b5060608201516003820190620004a8908262000ac6565b5060808201516004820190620004bf908262000ac6565b5060a0828101516005909201805460c085015160e0860151610100808801516101209098015160ff9081166401000000000260ff60201b1999821663010000000263ff0000001994831662010000029490941663ffff00001995831690930261ffff199096169190981617939093179190911691909117179390931691909117909155600a97909755601080546001600160a01b039283166001600160a01b031991821617909155600b805490911630179055602090940151600c559083166080529091169092525062000bd49050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715620005cc57620005cc62000590565b60405290565b60405161010081016001600160401b0381118282101715620005cc57620005cc62000590565b604051601f8201601f191681016001600160401b038111828210171562000623576200062362000590565b604052919050565b8051600381106200063b57600080fd5b919050565b600082601f8301126200065257600080fd5b81516001600160401b038111156200066e576200066e62000590565b602062000684601f8301601f19168201620005f8565b82815285828487010111156200069957600080fd5b60005b83811015620006b95785810183015182820184015282016200069c565b506000928101909101919091529392505050565b80516001600160a01b03811681146200063b57600080fd5b805160ff811681146200063b57600080fd5b6000604082840312156200070a57600080fd5b604080519081016001600160401b03811182821017156200072f576200072f62000590565b604052825181526020928301519281019290925250919050565b600061014082840312156200075d57600080fd5b62000767620005a6565b82519091506001600160401b03808211156200078257600080fd5b620007908583860162000640565b83526020840151915080821115620007a757600080fd5b620007b58583860162000640565b60208401526040840151915080821115620007cf57600080fd5b620007dd8583860162000640565b60408401526060840151915080821115620007f757600080fd5b620008058583860162000640565b606084015260808401519150808211156200081f57600080fd5b506200082e8482850162000640565b6080830152506200084260a08301620006e5565b60a08201526200085560c08301620006e5565b60c08201526200086860e08301620006e5565b60e08201526101006200087d818401620006e5565b9082015261012062000891838201620006e5565b9082015292915050565b600080600080600080600061010080898b031215620008b957600080fd5b885160208a01519098506001600160401b0380821115620008d957600080fd5b818b01915082828d031215620008ee57600080fd5b620008f8620005d2565b925062000905826200062b565b83526020820151818111156200091a57600080fd5b620009288d82850162000640565b6020850152506040820151818111156200094157600080fd5b6200094f8d82850162000640565b6040850152506200096360608301620006cd565b60608401526200097660808301620006e5565b608084015260a0820151818111156200098e57600080fd5b6200099c8d82850162000640565b60a085015250620009b060c083016200062b565b60c084015260e082015160e0840152829850620009d18c60408d01620006f7565b975060808b0151925080831115620009e857600080fd5b5050620009f88a828b0162000749565b94505062000a0960a08901620006cd565b925062000a1960c08901620006cd565b915062000a2960e08901620006cd565b905092959891949750929550565b600181811c9082168062000a4c57607f821691505b60208210810362000a6d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ac157600081815260208120601f850160051c8101602086101562000a9c5750805b601f850160051c820191505b8181101562000abd5782815560010162000aa8565b5050505b505050565b81516001600160401b0381111562000ae25762000ae262000590565b62000afa8162000af3845462000a37565b8462000a73565b602080601f83116001811462000b32576000841562000b195750858301515b600019600386901b1c1916600185901b17855562000abd565b600085815260208120601f198616915b8281101562000b635788860151825594840194600190910190840162000b42565b508582101562000b825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141762000bb857634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b60805160a051613fbc62000c16600039600081816106b20152611058015260008181610a69015281816110fb0152818161206a01526121040152613fbc6000f3fe6080604052600436106101405760003560e01c80636352211e116100b6578063a3a439311161006f578063a3a43931146103a9578063aad012e7146103f2578063b09afec114610412578063b88d4fde1461043f578063c87b56dd1461045f578063e985e9c51461047f57600080fd5b80636352211e146102ff57806366e0ebef1461031f57806367c897fe1461033257806370a082311461035457806395d89b4114610374578063a22cb4651461038957600080fd5b80631df025c6116101085780631df025c61461021557806323b872dd146102525780632f745c591461027257806342842e0e146102925780634f6ccce7146102b2578063519dc8d2146102d257600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d457806318160ddd146101f6575b600080fd5b34801561015157600080fd5b5061016561016036600461349a565b6104c8565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104d9565b6040516101719190613507565b3480156101a857600080fd5b506101bc6101b736600461351a565b61056b565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef366004613548565b610592565b005b34801561020257600080fd5b506008545b604051908152602001610171565b34801561022157600080fd5b50610235610230366004613574565b6106ac565b6040805193845260ff909216602084015290820152606001610171565b34801561025e57600080fd5b506101f461026d3660046135a0565b6108cf565b34801561027e57600080fd5b5061020761028d366004613548565b610900565b34801561029e57600080fd5b506101f46102ad3660046135a0565b610996565b3480156102be57600080fd5b506102076102cd36600461351a565b6109b1565b3480156102de57600080fd5b506102f26102ed3660046135e1565b610a44565b604051610171919061372b565b34801561030b57600080fd5b506101bc61031a36600461351a565b610d40565b6101f461032d36600461351a565b610da0565b34801561033e57600080fd5b50610347611325565b604051610171919061393b565b34801561036057600080fd5b5061020761036f3660046135e1565b611946565b34801561038057600080fd5b5061018f6119cc565b34801561039557600080fd5b506101f46103a43660046139fe565b6119db565b3480156103b557600080fd5b506103c96103c436600461351a565b6119ea565b6040516101719493929190938452602084019290925260ff166040830152606082015260800190565b3480156103fe57600080fd5b506101f461040d366004613a37565b611ba6565b34801561041e57600080fd5b5061043261042d36600461351a565b6124a8565b6040516101719190613a7d565b34801561044b57600080fd5b506101f461045a366004613aa6565b612637565b34801561046b57600080fd5b5061018f61047a36600461351a565b61266f565b34801561048b57600080fd5b5061016561049a366004613b86565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006104d3826126e3565b92915050565b6060600080546104e890613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461051490613bb4565b80156105615780601f1061053657610100808354040283529160200191610561565b820191906000526020600020905b81548152906001019060200180831161054457829003601f168201915b5050505050905090565b600061057682612708565b506000908152600460205260409020546001600160a01b031690565b600061059d82610d40565b9050806001600160a01b0316836001600160a01b03160361060f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061062b575061062b813361049a565b61069d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610606565b6106a7838361276a565b505050565b600080807f0000000000000000000000000000000000000000000000000000000000000000816106dc8787613c04565b905060006106ea8842613c04565b90506000826106fa836064613c17565b6107049190613c2e565b9050603281101561078a5760405163cfb6e81f60e01b8152600097508796506001600160a01b0385169063cfb6e81f90610742908990600401613c50565b602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190613c6a565b94506108c2565b6032811015801561079b5750605081105b156107ea57601e955060646107b0878c613c17565b6107ba9190613c2e565b60405163cfb6e81f60e01b81529097506001600160a01b0385169063cfb6e81f9061074290600190600401613c50565b605081101580156107fb5750606481105b1561084a576032955060646108108b88613c17565b61081a9190613c2e565b60405163cfb6e81f60e01b81529097506001600160a01b0385169063cfb6e81f9061074290600290600401613c50565b60405163cfb6e81f60e01b81528a9750606496506001600160a01b0385169063cfb6e81f9061087e90600390600401613c50565b602060405180830381865afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190613c6a565b94505b5050505093509350939050565b6108d933826127d8565b6108f55760405162461bcd60e51b815260040161060690613c83565b6106a7838383612857565b600061090b83611946565b821061096d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610606565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106a783838360405180602001604052806000815250612637565b60006109bc60085490565b8210610a1f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610606565b60088281548110610a3257610a32613cd0565b90600052602060002001549050919050565b604051631604f1c960e11b81526001600160a01b0382811660048301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190613ce6565b90506001600160a01b038116610afd576040516348652e5b60e01b815260040160405180910390fd5b6000610b0882611946565b905060008167ffffffffffffffff811115610b2557610b25613a90565b604051908082528060200260200182016040528015610b5e57816020015b610b4b6132c4565b815260200190600190039081610b435790505b50905060005b82811015610d37576000610b788583610900565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610c0390613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2f90613bb4565b8015610c7c5780601f10610c5157610100808354040283529160200191610c7c565b820191906000526020600020905b815481529060010190602001808311610c5f57829003601f168201915b5050509183525050600882015460209091019060ff166004811115610ca357610ca36135fe565b6004811115610cb457610cb46135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015284519091508190859085908110610d1757610d17613cd0565b602002602001018190525050508080610d2f90613d03565b915050610b64565b50949350505050565b6000818152600260205260408120546001600160a01b0316806104d35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610606565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e084019190610e2890613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613bb4565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b5050509183525050600882015460209091019060ff166004811115610ec857610ec86135fe565b6004811115610ed957610ed96135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff9081161515608080840191909152600d84015460a0840152600e909301541660c0909101528101519091506001600160a01b03163314610f5357604051633094e7cd60e21b815260040160405180910390fd5b6000806000610f728461016001518561012001518661014001516106ac565b92509250925080341015610f9957604051637751490b60e01b815260040160405180910390fd5b836101600151600003610fbf5760405163a01e56e960e01b815260040160405180910390fd5b83610180015115610fe357604051635c57e0e360e01b815260040160405180910390fd5b6000858152602160205260408120600c81018054600160ff1991821617909155600d8201869055600e909101805490911660ff851617905561016085015161102c908590613c04565b905080600a60020160008282546110439190613d1c565b90915550506040516000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169034908381818185875af1925050503d80600081146110b3576040519150601f19603f3d011682016040523d82523d6000602084013e6110b8565b606091505b50509050806110da576040516381d7410160e01b815260040160405180910390fd5b6110e3876129c8565b604051631604f1c960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632c09e39290602401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190613ce6565b6040516357fecd5d60e11b8152306004820152602481018a90529091506000906001600160a01b0383169063affd9aba906044016020604051808303816000875af11580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190613d2f565b905080611205576040516384f20e1760e01b815260040160405180910390fd5b6060880151608089015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018a905291169063a9059cbb906044016020604051808303816000875af115801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190613d2f565b9050806112a257604051637f9a668760e01b815260040160405180910390fd5b7f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d8860200151338a604001518b610100015160048111156112e5576112e56135fe565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080810189905260a00160405180910390a1505050505050505050565b61132d61333f565b6040805161016081018252600a5460808201908152600b546001600160a01b0390811660a0840152600c5460c0840152600d5460e0840152600e5461010080850191909152600f5461012085015260105490911661014084015290825282519081019092526011805491926020840192909190829060ff1660028111156113b6576113b66135fe565b60028111156113c7576113c76135fe565b81526020016001820180546113db90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461140790613bb4565b80156114545780601f1061142957610100808354040283529160200191611454565b820191906000526020600020905b81548152906001019060200180831161143757829003601f168201915b5050505050815260200160028201805461146d90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461149990613bb4565b80156114e65780601f106114bb576101008083540402835291602001916114e6565b820191906000526020600020905b8154815290600101906020018083116114c957829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff16604082015260048201805460609092019161152690613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461155290613bb4565b801561159f5780601f106115745761010080835404028352916020019161159f565b820191906000526020600020905b81548152906001019060200180831161158257829003601f168201915b5050509183525050600582015460209091019060ff1660028111156115c6576115c66135fe565b60028111156115d7576115d76135fe565b815260200160068201548152505081526020016018604051806040016040529081600082015481526020016001820154815250508152602001601a6040518061014001604052908160008201805461162e90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461165a90613bb4565b80156116a75780601f1061167c576101008083540402835291602001916116a7565b820191906000526020600020905b81548152906001019060200180831161168a57829003601f168201915b505050505081526020016001820180546116c090613bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546116ec90613bb4565b80156117395780601f1061170e57610100808354040283529160200191611739565b820191906000526020600020905b81548152906001019060200180831161171c57829003601f168201915b5050505050815260200160028201805461175290613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461177e90613bb4565b80156117cb5780601f106117a0576101008083540402835291602001916117cb565b820191906000526020600020905b8154815290600101906020018083116117ae57829003601f168201915b505050505081526020016003820180546117e490613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461181090613bb4565b801561185d5780601f106118325761010080835404028352916020019161185d565b820191906000526020600020905b81548152906001019060200180831161184057829003601f168201915b5050505050815260200160048201805461187690613bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546118a290613bb4565b80156118ef5780601f106118c4576101008083540402835291602001916118ef565b820191906000526020600020905b8154815290600101906020018083116118d257829003601f168201915b50505091835250506005919091015460ff80821660208401526101008204811660408401526201000082048116606084015263010000008204811660808401526401000000009091041660a0909101529052919050565b60006001600160a01b0382166119b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610606565b506001600160a01b031660009081526003602052604090205490565b6060600180546104e890613bb4565b6119e6338383612a6b565b5050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e084019190611a7a90613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690613bb4565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b5050509183525050600882015460209091019060ff166004811115611b1a57611b1a6135fe565b6004811115611b2b57611b2b6135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c090910152610160810151610120820151610140830151919750919250611b989187916106ac565b969891975095945092505050565b6040805160e081018252600a548152600b546001600160a01b03908116602080840191909152600c5483850152600d546060840152600e546080840152600f5460a084015260105490911660c0830152825180840184526018548152601954918101919091528251610100810190935260118054929391926000929190829060ff166002811115611c3957611c396135fe565b6002811115611c4a57611c4a6135fe565b8152602001600182018054611c5e90613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a90613bb4565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b50505050508152602001600282018054611cf090613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1c90613bb4565b8015611d695780601f10611d3e57610100808354040283529160200191611d69565b820191906000526020600020905b815481529060010190602001808311611d4c57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611da990613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd590613bb4565b8015611e225780601f10611df757610100808354040283529160200191611e22565b820191906000526020600020905b815481529060010190602001808311611e0557829003601f168201915b5050509183525050600582015460209091019060ff166002811115611e4957611e496135fe565b6002811115611e5a57611e5a6135fe565b81526020016006820154815250509050600060206000866004811115611e8257611e826135fe565b6004811115611e9357611e936135fe565b81526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282018054611ed090613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611efc90613bb4565b8015611f495780601f10611f1e57610100808354040283529160200191611f49565b820191906000526020600020905b815481529060010190602001808311611f2c57829003601f168201915b50505050508152505090508260000151421015611f795760405163616f1a0d60e11b815260040160405180910390fd5b8060200151600003611f9e57604051633a5b920160e11b815260040160405180910390fd5b60006064826020015188611fb29190613c17565b611fbc9190613c2e565b90508085604001511015611fe35760405163adfe069160e01b815260040160405180910390fd5b80600a6002016000828254611ff89190613c04565b9091555050600d8054889190600090612012908490613d1c565b9091555050600e805490600061202783613d03565b91905055506000600a6005016000815461204090613d03565b9182905550604051631604f1c960e11b81526001600160a01b038b811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613ce6565b90506001600160a01b038116612174576040516331b77b8960e21b81526001600160a01b038b811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c6ddee24906024016020604051808303816000875af115801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121719190613ce6565b90505b604051806101e00160405280306001600160a01b03168152602001886000015181526020018a815260200186606001516001600160a01b031681526020018b6001600160a01b03168152602001826001600160a01b03168152602001838152602001856040015181526020018960048111156121f2576121f26135fe565b815260200142815260200185600001514261220d9190613d1c565b8152602080820186905260006040808401829052606080850183905260809485018390528783526021845291819020855181546001600160a01b03199081166001600160a01b0392831617835594870151600183015591860151600282015591850151600383018054851691831691909117905592840151600482018054841691851691909117905560a0840151600582018054909316931692909217905560c0820151600682015560e082015160078201906122ca9082613d9a565b5061010082015160088201805460ff191660018360048111156122ef576122ef6135fe565b02179055506101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201805491151560ff199283161790556101a0830151600d8301556101c090920151600e909101805460ff9092169190921617905560608501516040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018c905260009216906323b872dd906064016020604051808303816000875af11580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190613d2f565b9050806123f2576040516382cc267f60e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193060601b16602082015261242c9083908590603401604051602081830303815290604052612b39565b87517fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa90848d8d8d6004811115612465576124656135fe565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a15050505050505050505050565b6124b06132c4565b60008281526021602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061253690613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461256290613bb4565b80156125af5780601f10612584576101008083540402835291602001916125af565b820191906000526020600020905b81548152906001019060200180831161259257829003601f168201915b5050509183525050600882015460209091019060ff1660048111156125d6576125d66135fe565b60048111156125e7576125e76135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015292915050565b61264133836127d8565b61265d5760405162461bcd60e51b815260040161060690613c83565b61266984848484612b6c565b50505050565b606061267a82612708565b600061269160408051602081019091526000815290565b905060008151116126b157604051806020016040528060008152506126dc565b806126bb84612b9f565b6040516020016126cc929190613e5a565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b14806104d357506104d382612c32565b6000818152600260205260409020546001600160a01b03166127675760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610606565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061279f82610d40565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806127e483610d40565b9050806001600160a01b0316846001600160a01b0316148061282b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061284f5750836001600160a01b03166128448461056b565b6001600160a01b0316145b949350505050565b826001600160a01b031661286a82610d40565b6001600160a01b0316146128905760405162461bcd60e51b815260040161060690613e89565b6001600160a01b0382166128f25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610606565b6128ff8383836001612c82565b826001600160a01b031661291282610d40565b6001600160a01b0316146129385760405162461bcd60e51b815260040161060690613e89565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006129d382610d40565b90506129e3816000846001612c82565b6129ec82610d40565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603612acc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610606565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612b438383612c8e565b612b506000848484612e27565b6106a75760405162461bcd60e51b815260040161060690613ece565b612b77848484612857565b612b8384848484612e27565b6126695760405162461bcd60e51b815260040161060690613ece565b60606000612bac83612f28565b600101905060008167ffffffffffffffff811115612bcc57612bcc613a90565b6040519080825280601f01601f191660200182016040528015612bf6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c0057509392505050565b60006001600160e01b031982166380ac58cd60e01b1480612c6357506001600160e01b03198216635b5e139f60e01b145b806104d357506301ffc9a760e01b6001600160e01b03198316146104d3565b61266984848484613000565b6001600160a01b038216612ce45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610606565b6000818152600260205260409020546001600160a01b031615612d495760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610606565b612d57600083836001612c82565b6000818152600260205260409020546001600160a01b031615612dbc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610606565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15612f1d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612e6b903390899088908890600401613f20565b6020604051808303816000875af1925050508015612ea6575060408051601f3d908101601f19168201909252612ea391810190613f53565b60015b612f03573d808015612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b508051600003612efb5760405162461bcd60e51b815260040161060690613ece565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061284f565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612f675772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612f93576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612fb157662386f26fc10000830492506010015b6305f5e1008310612fc9576305f5e100830492506008015b6127108310612fdd57612710830492506004015b60648310612fef576064830492506002015b600a83106104d35760010192915050565b600181111561306f5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610606565b816001600160a01b0385166130cb576130c681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6130ee565b836001600160a01b0316856001600160a01b0316146130ee576130ee8582613134565b6001600160a01b03841661310a57613105816131d1565b61312d565b846001600160a01b0316846001600160a01b03161461312d5761312d8482613280565b5050505050565b6000600161314184611946565b61314b9190613c04565b60008381526007602052604090205490915080821461319e576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906131e390600190613c04565b6000838152600960205260408120546008805493945090928490811061320b5761320b613cd0565b90600052602060002001549050806008838154811061322c5761322c613cd0565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061326457613264613f70565b6001900381819060005260206000200160009055905550505050565b600061328b83611946565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604080516101e08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082015290610100820190815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b604051806080016040528061339c6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016133a9613421565b81526020016133cb604051806040016040528060008152602001600081525090565b81526040805161014081018252606080825260208281018290529282018190528082018190526080820152600060a0820181905260c0820181905260e08201819052610100820181905261012082015291015290565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff1681526020016060815260200160006002811115613477576134776135fe565b8152602001600081525090565b6001600160e01b03198116811461276757600080fd5b6000602082840312156134ac57600080fd5b81356126dc81613484565b60005b838110156134d25781810151838201526020016134ba565b50506000910152565b600081518084526134f38160208601602086016134b7565b601f01601f19169290920160200192915050565b6020815260006126dc60208301846134db565b60006020828403121561352c57600080fd5b5035919050565b6001600160a01b038116811461276757600080fd5b6000806040838503121561355b57600080fd5b823561356681613533565b946020939093013593505050565b60008060006060848603121561358957600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156135b557600080fd5b83356135c081613533565b925060208401356135d081613533565b929592945050506040919091013590565b6000602082840312156135f357600080fd5b81356126dc81613533565b634e487b7160e01b600052602160045260246000fd5b60058110613624576136246135fe565b9052565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161366860608601826001600160a01b03169052565b50608083015161368360808601826001600160a01b03169052565b5060a083015161369e60a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136c0828601826134db565b915050610100808401516136d682870182613614565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c08084015160ff8116828701525b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561378057603f1988860301845261376e858351613628565b94509285019290850190600101613752565b5092979650505050505050565b60038110612767576127676135fe565b6136248161378d565b600061010082516137b68161378d565b8085525060208301518160208601526137d1828601826134db565b915050604083015184820360408601526137eb82826134db565b91505060018060a01b0360608401511660608501526080830151613814608086018260ff169052565b5060a083015184820360a086015261382c82826134db565b91505060c083015161384160c086018261379d565b5060e083015160e08501528091505092915050565b6000610140825181855261386c828601826134db565b9150506020830151848203602086015261388682826134db565b915050604083015184820360408601526138a082826134db565b915050606083015184820360608601526138ba82826134db565b915050608083015184820360808601526138d482826134db565b91505060a08301516138eb60a086018260ff169052565b5060c083015161390060c086018260ff169052565b5060e083015161391560e086018260ff169052565b506101008381015160ff81168683015250506101208381015160ff811686830152613721565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526139b26101808501836137a6565b60408601518051610120870152602001516101408601526060860151858203601f1901838701529092506139e68382613856565b9695505050505050565b801515811461276757600080fd5b60008060408385031215613a1157600080fd5b8235613a1c81613533565b91506020830135613a2c816139f0565b809150509250929050565b600080600060608486031215613a4c57600080fd5b8335613a5781613533565b925060208401359150604084013560058110613a7257600080fd5b809150509250925092565b6020815260006126dc6020830184613628565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613abc57600080fd5b8435613ac781613533565b93506020850135613ad781613533565b925060408501359150606085013567ffffffffffffffff80821115613afb57600080fd5b818701915087601f830112613b0f57600080fd5b813581811115613b2157613b21613a90565b604051601f8201601f19908116603f01168101908382118183101715613b4957613b49613a90565b816040528281528a6020848701011115613b6257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613b9957600080fd5b8235613ba481613533565b91506020830135613a2c81613533565b600181811c90821680613bc857607f821691505b602082108103613be857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104d3576104d3613bee565b80820281158282048414176104d3576104d3613bee565b600082613c4b57634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613c6457613c646135fe565b91905290565b600060208284031215613c7c57600080fd5b5051919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613cf857600080fd5b81516126dc81613533565b600060018201613d1557613d15613bee565b5060010190565b808201808211156104d3576104d3613bee565b600060208284031215613d4157600080fd5b81516126dc816139f0565b601f8211156106a757600081815260208120601f850160051c81016020861015613d735750805b601f850160051c820191505b81811015613d9257828155600101613d7f565b505050505050565b815167ffffffffffffffff811115613db457613db4613a90565b613dc881613dc28454613bb4565b84613d4c565b602080601f831160018114613dfd5760008415613de55750858301515b600019600386901b1c1916600185901b178555613d92565b600085815260208120601f198616915b82811015613e2c57888601518255948401946001909101908401613e0d565b5085821015613e4a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613e6c8184602088016134b7565b835190830190613e808183602088016134b7565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906139e6908301846134db565b600060208284031215613f6557600080fd5b81516126dc81613484565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a73b332f1cc0f3a1de78b4b1c5e0e022db77b3b05354fec744f73c8c882ba19364736f6c63430008120033a264697066735822122090d1f09731ea95ffbe51334243fb0de62ce6ad0c8b3a1023feb1a0d59046bcb964736f6c63430008120033",
  "deployedBytecode": "0x608060405260043610620000a95760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001ac5780638dc6c5f614620001cc578063b187bd2614620001f1578063e451a2501462000216578063e645ab06146200022d578063f2fde38b146200027f57600080fd5b80633424b8ce14620000ae5780635055149c14620000d5578063715018a6146200012c5780637a0e6ad3146200014457806386959b4b1462000178575b600080fd5b348015620000bb57600080fd5b50620000d3620000cd36600462000aec565b620002a4565b005b348015620000e257600080fd5b506200010f620000f436600462000b13565b6000908152600960205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200013957600080fd5b50620000d3620002c1565b3480156200015157600080fd5b50620001696200016336600462000b55565b620002d9565b60405162000123919062000b75565b3480156200018557600080fd5b506200019d6200019736600462000b55565b62000347565b60405162000123919062000bbb565b348015620001b957600080fd5b506000546001600160a01b03166200010f565b348015620001d957600080fd5b5062000169620001eb36600462000b13565b620003be565b348015620001fe57600080fd5b5060025460ff16604051901515815260200162000123565b620000d36200022736600462000ec4565b62000420565b3480156200023a57600080fd5b50600254600354600454600554604080516101009095046001600160a01b03908116865293841660208601529183169184019190915216606082015260800162000123565b3480156200028c57600080fd5b50620000d36200029e36600462000b55565b620009a0565b620002ae62000a23565b6002805460ff1916911515919091179055565b620002cb62000a23565b620002d7600062000a7f565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200033b57602002820191906000526020600020905b81548152602001906001019080831162000326575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200033b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003945750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200033b5760200282019190600052602060002090815481526020019060010190808311620003265750505050509050919050565b60025460ff16156200044557604051637a67145160e01b815260040160405180910390fd5b600480546040516370a0823160e01b8152339281019290925260009182916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000494573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ba919062001019565b60035460405163288c314960e21b81523360048201529290911192506000916001600160a01b039091169063a230c52490602401602060405180830381865afa1580156200050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000532919062001033565b90508115801562000541575080155b1562000560576040516315b1134160e21b815260040160405180910390fd5b60018560c0015160028111156200057b576200057b62001053565b0362000625576004805460e08701516040516331a9108f60e11b8152928301526000916001600160a01b0390911690636352211e90602401602060405180830381865afa158015620005d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f7919062001069565b90506001600160a01b038116331462000623576040516314b0092160e01b815260040160405180910390fd5b505b600254855160405163abe9836360e01b815260009261010090046001600160a01b03169163abe98363916200065e9190600401620010b7565b602060405180830381865afa1580156200067c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a2919062001019565b905080341015620006c6576040516338ba8e1560e21b815260040160405180910390fd5b8451421115620006e957604051636c0e2c5160e11b815260040160405180910390fd5b620006f8600180546001019055565b60006200070460015490565b60055460025460405192935060009284928b928b928b926001600160a01b03908116926101009004169033906200073b9062000acf565b6200074d979695949392919062001208565b604051809103906000f0801580156200076a573d6000803e3d6000fd5b50905060018860c00151600281111562000788576200078862001053565b03620007b55760e08801516000908152600760209081526040822080546001810182559083529120018290555b6060880180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092558986526009855283862080549091168217905533808652600685528386208054938401815586528486209092018990559551928d015191516323b872dd60e01b815260048101919091526024810195909552604485015290929116906323b872dd906064016020604051808303816000875af115801562000882573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008a8919062001033565b905080620008c95760405163124c872560e31b815260040160405180910390fd5b60025460405160009161010090046001600160a01b03169034908381818185875af1925050503d80600081146200091d576040519150601f19603f3d011682016040523d82523d6000602084013e62000922565b606091505b505090508062000945576040516323dec52d60e11b815260040160405180910390fd5b6060808b0151604080518781526001600160a01b038088166020830152909216908201527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a150505050505050505050565b620009aa62000a23565b6001600160a01b03811662000a155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000a208162000a7f565b50565b6000546001600160a01b03163314620002d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000a0c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614bd2806200133d83390190565b801515811462000a2057600080fd5b60006020828403121562000aff57600080fd5b813562000b0c8162000add565b9392505050565b60006020828403121562000b2657600080fd5b5035919050565b6001600160a01b038116811462000a2057600080fd5b803562000b508162000b2d565b919050565b60006020828403121562000b6857600080fd5b813562000b0c8162000b2d565b6020808252825182820181905260009190848201906040850190845b8181101562000baf5783518352928401929184019160010162000b91565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000baf5783516001600160a01b03168352928401929184019160010162000bd7565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171562000c3b5762000c3b62000bfe565b60405290565b604051610100810167ffffffffffffffff8111828210171562000c3b5762000c3b62000bfe565b80356003811062000b5057600080fd5b600082601f83011262000c8a57600080fd5b813567ffffffffffffffff8082111562000ca85762000ca862000bfe565b604051601f8301601f19908116603f0116810190828211818310171562000cd35762000cd362000bfe565b8160405283815286602085880101111562000ced57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b5057600080fd5b60006040828403121562000d3257600080fd5b6040516040810181811067ffffffffffffffff8211171562000d585762000d5862000bfe565b604052823581526020928301359281019290925250919050565b6000610140828403121562000d8657600080fd5b62000d9062000c14565b9050813567ffffffffffffffff8082111562000dab57600080fd5b62000db98583860162000c78565b8352602084013591508082111562000dd057600080fd5b62000dde8583860162000c78565b6020840152604084013591508082111562000df857600080fd5b62000e068583860162000c78565b6040840152606084013591508082111562000e2057600080fd5b62000e2e8583860162000c78565b6060840152608084013591508082111562000e4857600080fd5b5062000e578482850162000c78565b60808301525062000e6b60a0830162000d0d565b60a082015262000e7e60c0830162000d0d565b60c082015262000e9160e0830162000d0d565b60e082015261010062000ea681840162000d0d565b9082015261012062000eba83820162000d0d565b9082015292915050565b60008060006080848603121562000eda57600080fd5b833567ffffffffffffffff8082111562000ef357600080fd5b90850190610100828803121562000f0957600080fd5b62000f1362000c41565b62000f1e8362000c68565b815260208301358281111562000f3357600080fd5b62000f418982860162000c78565b60208301525060408301358281111562000f5a57600080fd5b62000f688982860162000c78565b60408301525062000f7c6060840162000b43565b606082015262000f8f6080840162000d0d565b608082015260a08301358281111562000fa757600080fd5b62000fb58982860162000c78565b60a08301525062000fc960c0840162000c68565b60c082015260e08381013590820152945062000fe9876020880162000d1f565b935060608601359150808211156200100057600080fd5b506200100f8682870162000d72565b9150509250925092565b6000602082840312156200102c57600080fd5b5051919050565b6000602082840312156200104657600080fd5b815162000b0c8162000add565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156200107c57600080fd5b815162000b0c8162000b2d565b6003811062000a2057634e487b7160e01b600052602160045260246000fd5b620010b38162001089565b9052565b60208101620010c68362001089565b91905290565b6000815180845260005b81811015620010f457602081850181015186830182015201620010d6565b506000602082860101526020601f19601f83011685010191505092915050565b600061014082518185526200112c82860182620010cc565b91505060208301518482036020860152620011488282620010cc565b91505060408301518482036040860152620011648282620010cc565b91505060608301518482036060860152620011808282620010cc565b915050608083015184820360808601526200119c8282620010cc565b91505060a0830151620011b460a086018260ff169052565b5060c0830151620011ca60c086018260ff169052565b5060e0830151620011e060e086018260ff169052565b506101008381015160ff90811691860191909152610120938401511692909301919091525090565b6000610100898352806020840152620012258184018a51620010a8565b60208901518161012085015262001241610200850182620010cc565b915050604089015160ff198085840301610140860152620012638383620010cc565b925060608b01519150620012836101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620012b08282620010cc565b91505060c0890151620012c86101c0850182620010a8565b5060e08901516101e084015287516040840152602088015160608401528281036080840152620012f9818862001114565b9150506200131260a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e08301529897505050505050505056fe60c06040523480156200001157600080fd5b5060405162004bd238038062004bd283398101604081905262000034916200089b565b6020860151604087015160006200004c838262000ac6565b5060016200005b828262000ac6565b50505062015180601e62000070919062000b92565b60008052602080527f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbe95560a084015160ff167f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbea5583517f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbeb90620000f4908262000ac6565b506200010562015180605a62000b92565b600160005260208080527f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ea9190915560c085015160ff167f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344eb558401517f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ec906200018f908262000ac6565b50620001a06201518060b462000b92565b6002600052602080527f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d75560e084015160ff167f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d85560408401517f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d99062000228908262000ac6565b506200023a6201518061010e62000b92565b6003600052602080527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5561010084015160ff167f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac05560608401517f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac190620002c3908262000ac6565b50620002d56201518061016d62000b92565b6004600052602080527faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fa5561012084015160ff167faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fb5560808401517faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fc906200035e908262000ac6565b50855160118054889290829060ff1916600183600281111562000385576200038562000bbe565b021790555060208201516001820190620003a0908262000ac6565b5060408201516002820190620003b7908262000ac6565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482019062000408908262000ac6565b5060c082015160058201805460ff191660018360028111156200042f576200042f62000bbe565b021790555060e091909101516006909101558451601855602085015160195583518490601a90819062000463908262000ac6565b50602082015160018201906200047a908262000ac6565b506040820151600282019062000491908262000ac6565b5060608201516003820190620004a8908262000ac6565b5060808201516004820190620004bf908262000ac6565b5060a0828101516005909201805460c085015160e0860151610100808801516101209098015160ff9081166401000000000260ff60201b1999821663010000000263ff0000001994831662010000029490941663ffff00001995831690930261ffff199096169190981617939093179190911691909117179390931691909117909155600a97909755601080546001600160a01b039283166001600160a01b031991821617909155600b805490911630179055602090940151600c559083166080529091169092525062000bd49050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715620005cc57620005cc62000590565b60405290565b60405161010081016001600160401b0381118282101715620005cc57620005cc62000590565b604051601f8201601f191681016001600160401b038111828210171562000623576200062362000590565b604052919050565b8051600381106200063b57600080fd5b919050565b600082601f8301126200065257600080fd5b81516001600160401b038111156200066e576200066e62000590565b602062000684601f8301601f19168201620005f8565b82815285828487010111156200069957600080fd5b60005b83811015620006b95785810183015182820184015282016200069c565b506000928101909101919091529392505050565b80516001600160a01b03811681146200063b57600080fd5b805160ff811681146200063b57600080fd5b6000604082840312156200070a57600080fd5b604080519081016001600160401b03811182821017156200072f576200072f62000590565b604052825181526020928301519281019290925250919050565b600061014082840312156200075d57600080fd5b62000767620005a6565b82519091506001600160401b03808211156200078257600080fd5b620007908583860162000640565b83526020840151915080821115620007a757600080fd5b620007b58583860162000640565b60208401526040840151915080821115620007cf57600080fd5b620007dd8583860162000640565b60408401526060840151915080821115620007f757600080fd5b620008058583860162000640565b606084015260808401519150808211156200081f57600080fd5b506200082e8482850162000640565b6080830152506200084260a08301620006e5565b60a08201526200085560c08301620006e5565b60c08201526200086860e08301620006e5565b60e08201526101006200087d818401620006e5565b9082015261012062000891838201620006e5565b9082015292915050565b600080600080600080600061010080898b031215620008b957600080fd5b885160208a01519098506001600160401b0380821115620008d957600080fd5b818b01915082828d031215620008ee57600080fd5b620008f8620005d2565b925062000905826200062b565b83526020820151818111156200091a57600080fd5b620009288d82850162000640565b6020850152506040820151818111156200094157600080fd5b6200094f8d82850162000640565b6040850152506200096360608301620006cd565b60608401526200097660808301620006e5565b608084015260a0820151818111156200098e57600080fd5b6200099c8d82850162000640565b60a085015250620009b060c083016200062b565b60c084015260e082015160e0840152829850620009d18c60408d01620006f7565b975060808b0151925080831115620009e857600080fd5b5050620009f88a828b0162000749565b94505062000a0960a08901620006cd565b925062000a1960c08901620006cd565b915062000a2960e08901620006cd565b905092959891949750929550565b600181811c9082168062000a4c57607f821691505b60208210810362000a6d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ac157600081815260208120601f850160051c8101602086101562000a9c5750805b601f850160051c820191505b8181101562000abd5782815560010162000aa8565b5050505b505050565b81516001600160401b0381111562000ae25762000ae262000590565b62000afa8162000af3845462000a37565b8462000a73565b602080601f83116001811462000b32576000841562000b195750858301515b600019600386901b1c1916600185901b17855562000abd565b600085815260208120601f198616915b8281101562000b635788860151825594840194600190910190840162000b42565b508582101562000b825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141762000bb857634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b60805160a051613fbc62000c16600039600081816106b20152611058015260008181610a69015281816110fb0152818161206a01526121040152613fbc6000f3fe6080604052600436106101405760003560e01c80636352211e116100b6578063a3a439311161006f578063a3a43931146103a9578063aad012e7146103f2578063b09afec114610412578063b88d4fde1461043f578063c87b56dd1461045f578063e985e9c51461047f57600080fd5b80636352211e146102ff57806366e0ebef1461031f57806367c897fe1461033257806370a082311461035457806395d89b4114610374578063a22cb4651461038957600080fd5b80631df025c6116101085780631df025c61461021557806323b872dd146102525780632f745c591461027257806342842e0e146102925780634f6ccce7146102b2578063519dc8d2146102d257600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d457806318160ddd146101f6575b600080fd5b34801561015157600080fd5b5061016561016036600461349a565b6104c8565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104d9565b6040516101719190613507565b3480156101a857600080fd5b506101bc6101b736600461351a565b61056b565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef366004613548565b610592565b005b34801561020257600080fd5b506008545b604051908152602001610171565b34801561022157600080fd5b50610235610230366004613574565b6106ac565b6040805193845260ff909216602084015290820152606001610171565b34801561025e57600080fd5b506101f461026d3660046135a0565b6108cf565b34801561027e57600080fd5b5061020761028d366004613548565b610900565b34801561029e57600080fd5b506101f46102ad3660046135a0565b610996565b3480156102be57600080fd5b506102076102cd36600461351a565b6109b1565b3480156102de57600080fd5b506102f26102ed3660046135e1565b610a44565b604051610171919061372b565b34801561030b57600080fd5b506101bc61031a36600461351a565b610d40565b6101f461032d36600461351a565b610da0565b34801561033e57600080fd5b50610347611325565b604051610171919061393b565b34801561036057600080fd5b5061020761036f3660046135e1565b611946565b34801561038057600080fd5b5061018f6119cc565b34801561039557600080fd5b506101f46103a43660046139fe565b6119db565b3480156103b557600080fd5b506103c96103c436600461351a565b6119ea565b6040516101719493929190938452602084019290925260ff166040830152606082015260800190565b3480156103fe57600080fd5b506101f461040d366004613a37565b611ba6565b34801561041e57600080fd5b5061043261042d36600461351a565b6124a8565b6040516101719190613a7d565b34801561044b57600080fd5b506101f461045a366004613aa6565b612637565b34801561046b57600080fd5b5061018f61047a36600461351a565b61266f565b34801561048b57600080fd5b5061016561049a366004613b86565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006104d3826126e3565b92915050565b6060600080546104e890613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461051490613bb4565b80156105615780601f1061053657610100808354040283529160200191610561565b820191906000526020600020905b81548152906001019060200180831161054457829003601f168201915b5050505050905090565b600061057682612708565b506000908152600460205260409020546001600160a01b031690565b600061059d82610d40565b9050806001600160a01b0316836001600160a01b03160361060f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061062b575061062b813361049a565b61069d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610606565b6106a7838361276a565b505050565b600080807f0000000000000000000000000000000000000000000000000000000000000000816106dc8787613c04565b905060006106ea8842613c04565b90506000826106fa836064613c17565b6107049190613c2e565b9050603281101561078a5760405163cfb6e81f60e01b8152600097508796506001600160a01b0385169063cfb6e81f90610742908990600401613c50565b602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190613c6a565b94506108c2565b6032811015801561079b5750605081105b156107ea57601e955060646107b0878c613c17565b6107ba9190613c2e565b60405163cfb6e81f60e01b81529097506001600160a01b0385169063cfb6e81f9061074290600190600401613c50565b605081101580156107fb5750606481105b1561084a576032955060646108108b88613c17565b61081a9190613c2e565b60405163cfb6e81f60e01b81529097506001600160a01b0385169063cfb6e81f9061074290600290600401613c50565b60405163cfb6e81f60e01b81528a9750606496506001600160a01b0385169063cfb6e81f9061087e90600390600401613c50565b602060405180830381865afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190613c6a565b94505b5050505093509350939050565b6108d933826127d8565b6108f55760405162461bcd60e51b815260040161060690613c83565b6106a7838383612857565b600061090b83611946565b821061096d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610606565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106a783838360405180602001604052806000815250612637565b60006109bc60085490565b8210610a1f5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610606565b60088281548110610a3257610a32613cd0565b90600052602060002001549050919050565b604051631604f1c960e11b81526001600160a01b0382811660048301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190613ce6565b90506001600160a01b038116610afd576040516348652e5b60e01b815260040160405180910390fd5b6000610b0882611946565b905060008167ffffffffffffffff811115610b2557610b25613a90565b604051908082528060200260200182016040528015610b5e57816020015b610b4b6132c4565b815260200190600190039081610b435790505b50905060005b82811015610d37576000610b788583610900565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610c0390613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2f90613bb4565b8015610c7c5780601f10610c5157610100808354040283529160200191610c7c565b820191906000526020600020905b815481529060010190602001808311610c5f57829003601f168201915b5050509183525050600882015460209091019060ff166004811115610ca357610ca36135fe565b6004811115610cb457610cb46135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015284519091508190859085908110610d1757610d17613cd0565b602002602001018190525050508080610d2f90613d03565b915050610b64565b50949350505050565b6000818152600260205260408120546001600160a01b0316806104d35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610606565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e084019190610e2890613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490613bb4565b8015610ea15780601f10610e7657610100808354040283529160200191610ea1565b820191906000526020600020905b815481529060010190602001808311610e8457829003601f168201915b5050509183525050600882015460209091019060ff166004811115610ec857610ec86135fe565b6004811115610ed957610ed96135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff9081161515608080840191909152600d84015460a0840152600e909301541660c0909101528101519091506001600160a01b03163314610f5357604051633094e7cd60e21b815260040160405180910390fd5b6000806000610f728461016001518561012001518661014001516106ac565b92509250925080341015610f9957604051637751490b60e01b815260040160405180910390fd5b836101600151600003610fbf5760405163a01e56e960e01b815260040160405180910390fd5b83610180015115610fe357604051635c57e0e360e01b815260040160405180910390fd5b6000858152602160205260408120600c81018054600160ff1991821617909155600d8201869055600e909101805490911660ff851617905561016085015161102c908590613c04565b905080600a60020160008282546110439190613d1c565b90915550506040516000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169034908381818185875af1925050503d80600081146110b3576040519150601f19603f3d011682016040523d82523d6000602084013e6110b8565b606091505b50509050806110da576040516381d7410160e01b815260040160405180910390fd5b6110e3876129c8565b604051631604f1c960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632c09e39290602401602060405180830381865afa15801561114a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116e9190613ce6565b6040516357fecd5d60e11b8152306004820152602481018a90529091506000906001600160a01b0383169063affd9aba906044016020604051808303816000875af11580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190613d2f565b905080611205576040516384f20e1760e01b815260040160405180910390fd5b6060880151608089015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018a905291169063a9059cbb906044016020604051808303816000875af115801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190613d2f565b9050806112a257604051637f9a668760e01b815260040160405180910390fd5b7f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d8860200151338a604001518b610100015160048111156112e5576112e56135fe565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080810189905260a00160405180910390a1505050505050505050565b61132d61333f565b6040805161016081018252600a5460808201908152600b546001600160a01b0390811660a0840152600c5460c0840152600d5460e0840152600e5461010080850191909152600f5461012085015260105490911661014084015290825282519081019092526011805491926020840192909190829060ff1660028111156113b6576113b66135fe565b60028111156113c7576113c76135fe565b81526020016001820180546113db90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461140790613bb4565b80156114545780601f1061142957610100808354040283529160200191611454565b820191906000526020600020905b81548152906001019060200180831161143757829003601f168201915b5050505050815260200160028201805461146d90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461149990613bb4565b80156114e65780601f106114bb576101008083540402835291602001916114e6565b820191906000526020600020905b8154815290600101906020018083116114c957829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff16604082015260048201805460609092019161152690613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461155290613bb4565b801561159f5780601f106115745761010080835404028352916020019161159f565b820191906000526020600020905b81548152906001019060200180831161158257829003601f168201915b5050509183525050600582015460209091019060ff1660028111156115c6576115c66135fe565b60028111156115d7576115d76135fe565b815260200160068201548152505081526020016018604051806040016040529081600082015481526020016001820154815250508152602001601a6040518061014001604052908160008201805461162e90613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461165a90613bb4565b80156116a75780601f1061167c576101008083540402835291602001916116a7565b820191906000526020600020905b81548152906001019060200180831161168a57829003601f168201915b505050505081526020016001820180546116c090613bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546116ec90613bb4565b80156117395780601f1061170e57610100808354040283529160200191611739565b820191906000526020600020905b81548152906001019060200180831161171c57829003601f168201915b5050505050815260200160028201805461175290613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461177e90613bb4565b80156117cb5780601f106117a0576101008083540402835291602001916117cb565b820191906000526020600020905b8154815290600101906020018083116117ae57829003601f168201915b505050505081526020016003820180546117e490613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461181090613bb4565b801561185d5780601f106118325761010080835404028352916020019161185d565b820191906000526020600020905b81548152906001019060200180831161184057829003601f168201915b5050505050815260200160048201805461187690613bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546118a290613bb4565b80156118ef5780601f106118c4576101008083540402835291602001916118ef565b820191906000526020600020905b8154815290600101906020018083116118d257829003601f168201915b50505091835250506005919091015460ff80821660208401526101008204811660408401526201000082048116606084015263010000008204811660808401526401000000009091041660a0909101529052919050565b60006001600160a01b0382166119b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610606565b506001600160a01b031660009081526003602052604090205490565b6060600180546104e890613bb4565b6119e6338383612a6b565b5050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e084019190611a7a90613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690613bb4565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b5050509183525050600882015460209091019060ff166004811115611b1a57611b1a6135fe565b6004811115611b2b57611b2b6135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c090910152610160810151610120820151610140830151919750919250611b989187916106ac565b969891975095945092505050565b6040805160e081018252600a548152600b546001600160a01b03908116602080840191909152600c5483850152600d546060840152600e546080840152600f5460a084015260105490911660c0830152825180840184526018548152601954918101919091528251610100810190935260118054929391926000929190829060ff166002811115611c3957611c396135fe565b6002811115611c4a57611c4a6135fe565b8152602001600182018054611c5e90613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8a90613bb4565b8015611cd75780601f10611cac57610100808354040283529160200191611cd7565b820191906000526020600020905b815481529060010190602001808311611cba57829003601f168201915b50505050508152602001600282018054611cf090613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611d1c90613bb4565b8015611d695780601f10611d3e57610100808354040283529160200191611d69565b820191906000526020600020905b815481529060010190602001808311611d4c57829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611da990613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd590613bb4565b8015611e225780601f10611df757610100808354040283529160200191611e22565b820191906000526020600020905b815481529060010190602001808311611e0557829003601f168201915b5050509183525050600582015460209091019060ff166002811115611e4957611e496135fe565b6002811115611e5a57611e5a6135fe565b81526020016006820154815250509050600060206000866004811115611e8257611e826135fe565b6004811115611e9357611e936135fe565b81526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282018054611ed090613bb4565b80601f0160208091040260200160405190810160405280929190818152602001828054611efc90613bb4565b8015611f495780601f10611f1e57610100808354040283529160200191611f49565b820191906000526020600020905b815481529060010190602001808311611f2c57829003601f168201915b50505050508152505090508260000151421015611f795760405163616f1a0d60e11b815260040160405180910390fd5b8060200151600003611f9e57604051633a5b920160e11b815260040160405180910390fd5b60006064826020015188611fb29190613c17565b611fbc9190613c2e565b90508085604001511015611fe35760405163adfe069160e01b815260040160405180910390fd5b80600a6002016000828254611ff89190613c04565b9091555050600d8054889190600090612012908490613d1c565b9091555050600e805490600061202783613d03565b91905055506000600a6005016000815461204090613d03565b9182905550604051631604f1c960e11b81526001600160a01b038b811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190613ce6565b90506001600160a01b038116612174576040516331b77b8960e21b81526001600160a01b038b811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c6ddee24906024016020604051808303816000875af115801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121719190613ce6565b90505b604051806101e00160405280306001600160a01b03168152602001886000015181526020018a815260200186606001516001600160a01b031681526020018b6001600160a01b03168152602001826001600160a01b03168152602001838152602001856040015181526020018960048111156121f2576121f26135fe565b815260200142815260200185600001514261220d9190613d1c565b8152602080820186905260006040808401829052606080850183905260809485018390528783526021845291819020855181546001600160a01b03199081166001600160a01b0392831617835594870151600183015591860151600282015591850151600383018054851691831691909117905592840151600482018054841691851691909117905560a0840151600582018054909316931692909217905560c0820151600682015560e082015160078201906122ca9082613d9a565b5061010082015160088201805460ff191660018360048111156122ef576122ef6135fe565b02179055506101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201805491151560ff199283161790556101a0830151600d8301556101c090920151600e909101805460ff9092169190921617905560608501516040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018c905260009216906323b872dd906064016020604051808303816000875af11580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190613d2f565b9050806123f2576040516382cc267f60e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193060601b16602082015261242c9083908590603401604051602081830303815290604052612b39565b87517fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa90848d8d8d6004811115612465576124656135fe565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a15050505050505050505050565b6124b06132c4565b60008281526021602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061253690613bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461256290613bb4565b80156125af5780601f10612584576101008083540402835291602001916125af565b820191906000526020600020905b81548152906001019060200180831161259257829003601f168201915b5050509183525050600882015460209091019060ff1660048111156125d6576125d66135fe565b60048111156125e7576125e76135fe565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015292915050565b61264133836127d8565b61265d5760405162461bcd60e51b815260040161060690613c83565b61266984848484612b6c565b50505050565b606061267a82612708565b600061269160408051602081019091526000815290565b905060008151116126b157604051806020016040528060008152506126dc565b806126bb84612b9f565b6040516020016126cc929190613e5a565b6040516020818303038152906040525b9392505050565b60006001600160e01b0319821663780e9d6360e01b14806104d357506104d382612c32565b6000818152600260205260409020546001600160a01b03166127675760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610606565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061279f82610d40565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806127e483610d40565b9050806001600160a01b0316846001600160a01b0316148061282b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061284f5750836001600160a01b03166128448461056b565b6001600160a01b0316145b949350505050565b826001600160a01b031661286a82610d40565b6001600160a01b0316146128905760405162461bcd60e51b815260040161060690613e89565b6001600160a01b0382166128f25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610606565b6128ff8383836001612c82565b826001600160a01b031661291282610d40565b6001600160a01b0316146129385760405162461bcd60e51b815260040161060690613e89565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006129d382610d40565b90506129e3816000846001612c82565b6129ec82610d40565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603612acc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610606565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612b438383612c8e565b612b506000848484612e27565b6106a75760405162461bcd60e51b815260040161060690613ece565b612b77848484612857565b612b8384848484612e27565b6126695760405162461bcd60e51b815260040161060690613ece565b60606000612bac83612f28565b600101905060008167ffffffffffffffff811115612bcc57612bcc613a90565b6040519080825280601f01601f191660200182016040528015612bf6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c0057509392505050565b60006001600160e01b031982166380ac58cd60e01b1480612c6357506001600160e01b03198216635b5e139f60e01b145b806104d357506301ffc9a760e01b6001600160e01b03198316146104d3565b61266984848484613000565b6001600160a01b038216612ce45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610606565b6000818152600260205260409020546001600160a01b031615612d495760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610606565b612d57600083836001612c82565b6000818152600260205260409020546001600160a01b031615612dbc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610606565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15612f1d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612e6b903390899088908890600401613f20565b6020604051808303816000875af1925050508015612ea6575060408051601f3d908101601f19168201909252612ea391810190613f53565b60015b612f03573d808015612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b508051600003612efb5760405162461bcd60e51b815260040161060690613ece565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061284f565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612f675772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612f93576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612fb157662386f26fc10000830492506010015b6305f5e1008310612fc9576305f5e100830492506008015b6127108310612fdd57612710830492506004015b60648310612fef576064830492506002015b600a83106104d35760010192915050565b600181111561306f5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610606565b816001600160a01b0385166130cb576130c681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6130ee565b836001600160a01b0316856001600160a01b0316146130ee576130ee8582613134565b6001600160a01b03841661310a57613105816131d1565b61312d565b846001600160a01b0316846001600160a01b03161461312d5761312d8482613280565b5050505050565b6000600161314184611946565b61314b9190613c04565b60008381526007602052604090205490915080821461319e576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906131e390600190613c04565b6000838152600960205260408120546008805493945090928490811061320b5761320b613cd0565b90600052602060002001549050806008838154811061322c5761322c613cd0565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061326457613264613f70565b6001900381819060005260206000200160009055905550505050565b600061328b83611946565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604080516101e08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082015290610100820190815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b604051806080016040528061339c6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016133a9613421565b81526020016133cb604051806040016040528060008152602001600081525090565b81526040805161014081018252606080825260208281018290529282018190528082018190526080820152600060a0820181905260c0820181905260e08201819052610100820181905261012082015291015290565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff1681526020016060815260200160006002811115613477576134776135fe565b8152602001600081525090565b6001600160e01b03198116811461276757600080fd5b6000602082840312156134ac57600080fd5b81356126dc81613484565b60005b838110156134d25781810151838201526020016134ba565b50506000910152565b600081518084526134f38160208601602086016134b7565b601f01601f19169290920160200192915050565b6020815260006126dc60208301846134db565b60006020828403121561352c57600080fd5b5035919050565b6001600160a01b038116811461276757600080fd5b6000806040838503121561355b57600080fd5b823561356681613533565b946020939093013593505050565b60008060006060848603121561358957600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156135b557600080fd5b83356135c081613533565b925060208401356135d081613533565b929592945050506040919091013590565b6000602082840312156135f357600080fd5b81356126dc81613533565b634e487b7160e01b600052602160045260246000fd5b60058110613624576136246135fe565b9052565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161366860608601826001600160a01b03169052565b50608083015161368360808601826001600160a01b03169052565b5060a083015161369e60a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136c0828601826134db565b915050610100808401516136d682870182613614565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c08084015160ff8116828701525b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561378057603f1988860301845261376e858351613628565b94509285019290850190600101613752565b5092979650505050505050565b60038110612767576127676135fe565b6136248161378d565b600061010082516137b68161378d565b8085525060208301518160208601526137d1828601826134db565b915050604083015184820360408601526137eb82826134db565b91505060018060a01b0360608401511660608501526080830151613814608086018260ff169052565b5060a083015184820360a086015261382c82826134db565b91505060c083015161384160c086018261379d565b5060e083015160e08501528091505092915050565b6000610140825181855261386c828601826134db565b9150506020830151848203602086015261388682826134db565b915050604083015184820360408601526138a082826134db565b915050606083015184820360608601526138ba82826134db565b915050608083015184820360808601526138d482826134db565b91505060a08301516138eb60a086018260ff169052565b5060c083015161390060c086018260ff169052565b5060e083015161391560e086018260ff169052565b506101008381015160ff81168683015250506101208381015160ff811686830152613721565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526139b26101808501836137a6565b60408601518051610120870152602001516101408601526060860151858203601f1901838701529092506139e68382613856565b9695505050505050565b801515811461276757600080fd5b60008060408385031215613a1157600080fd5b8235613a1c81613533565b91506020830135613a2c816139f0565b809150509250929050565b600080600060608486031215613a4c57600080fd5b8335613a5781613533565b925060208401359150604084013560058110613a7257600080fd5b809150509250925092565b6020815260006126dc6020830184613628565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613abc57600080fd5b8435613ac781613533565b93506020850135613ad781613533565b925060408501359150606085013567ffffffffffffffff80821115613afb57600080fd5b818701915087601f830112613b0f57600080fd5b813581811115613b2157613b21613a90565b604051601f8201601f19908116603f01168101908382118183101715613b4957613b49613a90565b816040528281528a6020848701011115613b6257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613b9957600080fd5b8235613ba481613533565b91506020830135613a2c81613533565b600181811c90821680613bc857607f821691505b602082108103613be857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104d3576104d3613bee565b80820281158282048414176104d3576104d3613bee565b600082613c4b57634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613c6457613c646135fe565b91905290565b600060208284031215613c7c57600080fd5b5051919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613cf857600080fd5b81516126dc81613533565b600060018201613d1557613d15613bee565b5060010190565b808201808211156104d3576104d3613bee565b600060208284031215613d4157600080fd5b81516126dc816139f0565b601f8211156106a757600081815260208120601f850160051c81016020861015613d735750805b601f850160051c820191505b81811015613d9257828155600101613d7f565b505050505050565b815167ffffffffffffffff811115613db457613db4613a90565b613dc881613dc28454613bb4565b84613d4c565b602080601f831160018114613dfd5760008415613de55750858301515b600019600386901b1c1916600185901b178555613d92565b600085815260208120601f198616915b82811015613e2c57888601518255948401946001909101908401613e0d565b5085821015613e4a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613e6c8184602088016134b7565b835190830190613e808183602088016134b7565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906139e6908301846134db565b600060208284031215613f6557600080fd5b81516126dc81613484565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a73b332f1cc0f3a1de78b4b1c5e0e022db77b3b05354fec744f73c8c882ba19364736f6c63430008120033a264697066735822122090d1f09731ea95ffbe51334243fb0de62ce6ad0c8b3a1023feb1a0d59046bcb964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5138,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_projectsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2021_storage"
      },
      {
        "astId": 5141,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_isPaused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5143,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_campaignFeeManager",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5145,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_pmMembershipManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5147,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_pmTeamManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5149,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_creatorManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5154,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_poolsOfAUser",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5159,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_poolsOfATeam",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5164,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_poolsByToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5168,
        "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
        "label": "s_poolByID",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Counter)2021_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2020,
            "contract": "contracts/RewardCampaign/RewardCampaignFactory.sol:RewardCampaignFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}