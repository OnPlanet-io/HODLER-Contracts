{
  "address": "0xe2ce88117e8CF66a7b96d3525AF3d8382634e07E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "regular",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upgrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "team",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SplitFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributionShares",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributionWallets",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackAndburnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MembershipFeeManager.FeesType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getAllFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "regular",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upgrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "team",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPriceOfOneUSD",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.MembershipCategories",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getMembershipFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingLibrary.MembershipCategories",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "membershipFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyBackAndburn",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "rewardPool",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "corporate",
          "type": "uint8"
        }
      ],
      "name": "setFeeDistributionShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "corporate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackAndburnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyBackReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeDistributionWallets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "regular",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upgrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "team",
          "type": "uint256"
        }
      ],
      "name": "setMembershipFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x777c3576b840740efaec3b1e51dffef3a4bf3b877068989bd53c4d86b8947524",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0xe2ce88117e8CF66a7b96d3525AF3d8382634e07E",
    "transactionIndex": 0,
    "gasUsed": "1308872",
    "logsBloom": "0x00000000000000000000000000000000000000000000100000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000001000002000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000040000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3a476a60d73fe7105e065799aa1219ae07f131809acb37e29a882b829318f37a",
    "transactionHash": "0x777c3576b840740efaec3b1e51dffef3a4bf3b877068989bd53c4d86b8947524",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3747090,
        "transactionHash": "0x777c3576b840740efaec3b1e51dffef3a4bf3b877068989bd53c4d86b8947524",
        "address": "0xe2ce88117e8CF66a7b96d3525AF3d8382634e07E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3a476a60d73fe7105e065799aa1219ae07f131809acb37e29a882b829318f37a"
      }
    ],
    "blockNumber": 3747090,
    "cumulativeGasUsed": "1308872",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "3",
    "2",
    "5",
    "8"
  ],
  "numDeployments": 1,
  "solcInputHash": "d2038625921aa2e8a69487c20d93043d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"regular\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SplitFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributionShares\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributionWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackAndburnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MembershipFeeManager.FeesType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getAllFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"regular\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceOfOneUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.MembershipCategories\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getMembershipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLibrary.MembershipCategories\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"membershipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyBackAndburn\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardPool\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"corporate\",\"type\":\"uint8\"}],\"name\":\"setFeeDistributionShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corporate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackAndburnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackReceiver\",\"type\":\"address\"}],\"name\":\"setFeeDistributionWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"regular\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upgrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"setMembershipFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Planetmoon/MembershipFeeManager.sol\":\"MembershipFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Planetmoon/MembershipFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./PriceFeed.sol\\\";\\r\\nimport \\\"./SwapETHForTokens.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract MembershipFeeManager is Ownable, PriceFeed, SwapETHForTokens {\\r\\n\\r\\n    mapping (StakingLibrary.MembershipCategories => uint256) public membershipFee;\\r\\n    \\r\\n    enum FeesType {USD, BNB}\\r\\n\\r\\n    event Received(address, uint);\\r\\n    \\r\\n    FeeDistributionShares public feeDistributionShares;\\r\\n    struct FeeDistributionShares {\\r\\n        uint8 buyBackAndburn;\\r\\n        uint8 rewardPool;\\r\\n        uint8 corporate;\\r\\n    }\\r\\n\\r\\n    FeeDistributionWallets public feeDistributionWallets;\\r\\n    struct FeeDistributionWallets {\\r\\n        address payable rewardPool;\\r\\n        address payable corporate;\\r\\n        address buyBackAndburnToken;\\r\\n        address buyBackReceiver;\\r\\n    }\\r\\n\\r\\n    constructor( uint256 regular, uint256 upgrade, uint256 premium, uint256 team) {\\r\\n        membershipFee[StakingLibrary.MembershipCategories.REGULAR] = regular;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.UPGRAGE] = upgrade;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.PREMIUIM] = premium;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.TEAM] = team;\\r\\n    }\\r\\n\\r\\n    function getMembershipFee(StakingLibrary.MembershipCategories category) public view returns (uint256){\\r\\n        uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n        return membershipFee[category] * priceOfOneUSD;\\r\\n    }\\r\\n\\r\\n    function getAllFees(FeesType feeType) public view returns (\\r\\n        uint256 regular,\\r\\n        uint256 upgrade,\\r\\n        uint256 premium,\\r\\n        uint256 team\\r\\n    ){\\r\\n            regular = membershipFee[StakingLibrary.MembershipCategories.REGULAR];\\r\\n            upgrade = membershipFee[StakingLibrary.MembershipCategories.UPGRAGE];\\r\\n            premium = membershipFee[StakingLibrary.MembershipCategories.PREMIUIM];\\r\\n            team = membershipFee[StakingLibrary.MembershipCategories.TEAM];\\r\\n\\r\\n            if(feeType == FeesType.BNB){\\r\\n                uint256 priceOfOneUSD = uint256(getLatestPriceOfOneUSD());\\r\\n                regular = regular * priceOfOneUSD;\\r\\n                upgrade = upgrade * priceOfOneUSD;\\r\\n                premium = premium * priceOfOneUSD;\\r\\n                team = team * priceOfOneUSD;\\r\\n            }\\r\\n\\r\\n    }\\r\\n\\r\\n    function setMembershipFee(uint256 regular, uint256 upgrade, uint256 premium, uint256 team) public onlyOwner {\\r\\n        membershipFee[StakingLibrary.MembershipCategories.REGULAR] = regular;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.UPGRAGE] = upgrade;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.PREMIUIM] = premium;\\r\\n        membershipFee[StakingLibrary.MembershipCategories.TEAM] = team;\\r\\n    }\\r\\n\\r\\n    function setFeeDistributionShares(uint8 buyBackAndburn, uint8 rewardPool, uint8 corporate ) public onlyOwner {\\r\\n        require(\\r\\n            corporate > 0 && \\r\\n            rewardPool > 0 &&\\r\\n            buyBackAndburn + rewardPool + corporate == 100,\\r\\n            \\\"Distribution fees are not adding up to 100pc\\\" \\r\\n        );\\r\\n\\r\\n        feeDistributionShares.buyBackAndburn = buyBackAndburn;\\r\\n        feeDistributionShares.rewardPool = rewardPool;\\r\\n        feeDistributionShares.corporate = corporate;\\r\\n    }\\r\\n\\r\\n    function setFeeDistributionWallets(\\r\\n        address rewardPool, \\r\\n        address corporate, \\r\\n        address buyBackAndburnToken, \\r\\n        address buyBackReceiver\\r\\n        ) public onlyOwner {\\r\\n        require(\\r\\n            rewardPool != address(0) && \\r\\n            corporate != address(0) &&\\r\\n            buyBackAndburnToken != address(0) && \\r\\n            buyBackReceiver != address(0),\\r\\n            \\\"Distribution wallets are not being set properly\\\" \\r\\n        );\\r\\n\\r\\n        feeDistributionWallets.rewardPool = payable(rewardPool);\\r\\n        feeDistributionWallets.corporate = payable(corporate);\\r\\n        feeDistributionWallets.buyBackAndburnToken = buyBackAndburnToken;\\r\\n        feeDistributionWallets.buyBackReceiver = buyBackReceiver;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function SplitFunds() public onlyOwner {\\r\\n\\r\\n        FeeDistributionWallets memory wallets = feeDistributionWallets;\\r\\n        FeeDistributionShares memory fees = feeDistributionShares;\\r\\n\\r\\n        require(\\r\\n            wallets.rewardPool != address(0) && \\r\\n            wallets.corporate != address(0) &&\\r\\n            wallets.buyBackAndburnToken != address(0) && \\r\\n            wallets.buyBackReceiver != address(0),\\r\\n            \\\"Distribution wallets are not being set properly\\\" \\r\\n        );\\r\\n\\r\\n        require(\\r\\n            fees.corporate > 0 && \\r\\n            fees.rewardPool > 0 &&\\r\\n            fees.buyBackAndburn + fees.rewardPool + fees.corporate == 100,\\r\\n            \\\"Distribution fees are not being set properly\\\" \\r\\n        );\\r\\n\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for split\\\");\\r\\n\\r\\n        uint256 corporateShare =  (totalBalance * fees.corporate) / 100;\\r\\n        uint256 rewardPoolShare =  (totalBalance * fees.rewardPool) / 100;\\r\\n        uint256 buyBackAndBurnShare =  totalBalance - corporateShare - rewardPoolShare;\\r\\n\\r\\n        wallets.corporate.transfer(corporateShare);\\r\\n        wallets.rewardPool.transfer(rewardPoolShare);\\r\\n        if(buyBackAndBurnShare > 0){\\r\\n            swapETHForTokens(wallets.buyBackAndburnToken, wallets.buyBackReceiver, buyBackAndBurnShare);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() public onlyOwner {\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        require(totalBalance > 0, \\\"No balance avaialble for withdraw\\\");\\r\\n        payable(owner()).transfer(totalBalance);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit Received(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5d3e549bf6c60c567e97cc23b3d614db733606baf6674a7633696838d717403a\",\"license\":\"MIT\"},\"contracts/Planetmoon/PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n* Network: Goerli\\r\\n* Aggregator: ETH/USD\\r\\n* Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n*/\\r\\n\\r\\n\\r\\n/**\\r\\n* Network: BNB Chain Mainnet\\r\\n* Aggregator: BNB/USD\\r\\n* Address: 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\\r\\n*/\\r\\n\\r\\ncontract PriceFeed {\\r\\n\\r\\n    // AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // BNB Chain Mainnet BNB/USD\\r\\n    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);  // Goerli ETH/USD\\r\\n\\r\\n    function getLatestPriceOfOneUSD() public view returns (int price) {\\r\\n\\r\\n        // this is the price of 1 Eth in USDs  => 1 ETh = price USDs\\r\\n        // Find price of 1 USD => 1 USD = 1/price ETH\\r\\n\\r\\n        (, price,,,) = priceFeed.latestRoundData();\\r\\n        int ONE_ETH = 1 ether;\\r\\n        price = (ONE_ETH * 10**8)/price;\\r\\n\\r\\n        // price = int(756881949122395); \\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x781d93954356770f0f5f67935e5cb9f62100026394f8741331fe010d5e876b92\",\"license\":\"MIT\"},\"contracts/Planetmoon/SwapETHForTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract SwapETHForTokens is Ownable {\\r\\n\\r\\n    // IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\\r\\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap router goerli testnet - ETH\\r\\n\\r\\n    function setRouter(IUniswapV2Router02 _uniswapV2Router) public onlyOwner {\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function swapETHForTokens(\\r\\n        address tokenAddress,\\r\\n        address toAddress,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = tokenAddress;\\r\\n\\r\\n        uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{\\r\\n            value: amount\\r\\n        }(\\r\\n            0, // accept any amount of Tokens\\r\\n            path,\\r\\n            toAddress, // The contract\\r\\n            block.timestamp + 500\\r\\n        );\\r\\n        uint256 boughtTokens = amounts[amounts.length - 1];\\r\\n        return boughtTokens;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x74ecc6680ad0723d6f0f660ba9c9707c52e6809eecc2172f9f0847d8ff365914\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xa31c6cfcbdc3386b725b8bc2c966e85df4952be79417cbb0d5b29c5583e06875\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ce162b686e91b78ae83d035f6ce5ee3e1f593749e75efcdd24ea89c52067b7f\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    enum UnstakingCategories {\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        REGULAR,\\r\\n        UPGRAGE,\\r\\n        PREMIUIM,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    enum ProfileType {NONE, TEAM, USER}\\r\\n    \\r\\n    enum StakingType { ONE_MONTH, THREE_MONTH, SIX_MONTH, NINE_MONTH, TWELVE_MONTH }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct NFTData {\\r\\n        string image_1_months;\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_9_months;\\r\\n        string image_12_months;\\r\\n        uint8 APY_1_months;\\r\\n        uint8 APY_3_months;\\r\\n        uint8 APY_6_months;\\r\\n        uint8 APY_9_months;\\r\\n        uint8 APY_12_months;\\r\\n    }\\r\\n\\r\\n       \\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        NFTData nftData;\\r\\n    }\\r\\n\\r\\n    struct UserDetail {\\r\\n        uint256 memberSince;\\r\\n        uint256 memberId;\\r\\n        bool isPremium;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x1307c91f69a05394dbdfd1ab39532f61443616b15a738559229dce2ea87b6b58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031990811673d4a33860578de61dbabdc8bfdb98fd742fa7028e1790915560028054909116737a250d5630b4cf539739df2c5dacb4c659f2488d17905534801561005857600080fd5b5060405161157538038061157583398101604081905261007791610170565b61008033610120565b600360208190527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff949094557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c929092557fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d556000919091527fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af556101a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806080858703121561018657600080fd5b505082516020840151604085015160609095015191969095509092509050565b6113c0806101b56000396000f3fe6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063c691068d11610059578063c691068d14610316578063db2e21bc1461037c578063f2fde38b14610391578063f6dfc669146103b157600080fd5b80638da5cb5b146102985780639b5e831a146102b6578063a1d8f53c146102d6578063c0d78655146102f657600080fd5b806347dd490a116100c657806347dd490a146102035780635e1129c1146102235780636680649d14610243578063715018a61461028357600080fd5b806302a64a4b1461013b5780631694505e1461016357806329a3bcbf1461019b5780632d08c256146101b257600080fd5b3661013657604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561014757600080fd5b506101506103de565b6040519081526020015b60405180910390f35b34801561016f57600080fd5b50600254610183906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b3480156101a757600080fd5b506101b061047e565b005b3480156101be57600080fd5b506004546101df9060ff808216916101008104821691620100009091041683565b6040805160ff9485168152928416602084015292169181019190915260600161015a565b34801561020f57600080fd5b506101b061021e366004610e9f565b61075c565b34801561022f57600080fd5b506101b061023e366004610ee2565b610834565b34801561024f57600080fd5b5061026361025e366004610f14565b6108d9565b60408051948552602085019390935291830152606082015260800161015a565b34801561028f57600080fd5b506101b06109cf565b3480156102a457600080fd5b506000546001600160a01b0316610183565b3480156102c257600080fd5b506101506102d1366004610f35565b6109e3565b3480156102e257600080fd5b506101b06102f1366004610f6b565b610a38565b34801561030257600080fd5b506101b0610311366004610fc7565b610af4565b34801561032257600080fd5b50600554600654600754600854610349936001600160a01b03908116938116928116911684565b604080516001600160a01b039586168152938516602085015291841691830191909152909116606082015260800161015a565b34801561038857600080fd5b506101b0610b1e565b34801561039d57600080fd5b506101b06103ac366004610fc7565b610bbb565b3480156103bd57600080fd5b506101506103cc366004610f35565b60036020526000908152604090205481565b60015460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a09291908290030181865afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610ffe565b50919350670de0b6b3a7640000925083915061046e9050826305f5e100611064565b61047891906110ff565b91505090565b610486610c34565b604080516080810182526005546001600160a01b039081168252600654811660208084019190915260075482168385015260085482166060808501919091528451908101855260045460ff808216835261010082048116938301939093526201000090049091169381019390935281519192911615801590610514575060208201516001600160a01b031615155b801561052c575060408201516001600160a01b031615155b8015610544575060608201516001600160a01b031615155b6105695760405162461bcd60e51b81526004016105609061112d565b60405180910390fd5b6000816040015160ff1611801561058757506000816020015160ff16115b80156105b557506040810151602082015182516105a4919061117c565b6105ae919061117c565b60ff166064145b6106165760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f74206265696e672060448201526b7365742070726f7065726c7960a01b6064820152608401610560565b47806106645760405162461bcd60e51b815260206004820152601e60248201527f4e6f2062616c616e63652061766169616c626c6520666f722073706c697400006044820152606401610560565b60006064836040015160ff168361067b91906111a1565b61068591906111c0565b905060006064846020015160ff168461069e91906111a1565b6106a891906111c0565b90506000816106b784866111d4565b6106c191906111d4565b60208701516040519192506001600160a01b03169084156108fc029085906000818181858888f193505050501580156106fe573d6000803e3d6000fd5b5085516040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015610738573d6000803e3d6000fd5b508015610754576107528660400151876060015183610c8e565b505b505050505050565b610764610c34565b60008160ff1611801561077a575060008260ff16115b801561079d57508061078c838561117c565b610796919061117c565b60ff166064145b6107fe5760405162461bcd60e51b815260206004820152602c60248201527f446973747269627574696f6e206665657320617265206e6f7420616464696e6760448201526b20757020746f20313030706360a01b6064820152608401610560565b6004805460ff94851661ffff1990911617610100938516939093029290921762ff00001916620100009190931602919091179055565b61083c610c34565b600360208190527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff949094557fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c929092557fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d556000919091527fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af55565b600360208190527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff547fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c547fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d546000939093527fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af549192909160018581811115610985576109856111eb565b036109c85760006109946103de565b90506109a081866111a1565b94506109ac81856111a1565b93506109b881846111a1565b92506109c481836111a1565b9150505b9193509193565b6109d7610c34565b6109e16000610e39565b565b6000806109ee6103de565b90508060036000856003811115610a0757610a076111eb565b6003811115610a1857610a186111eb565b815260200190815260200160002054610a3191906111a1565b9392505050565b610a40610c34565b6001600160a01b03841615801590610a6057506001600160a01b03831615155b8015610a7457506001600160a01b03821615155b8015610a8857506001600160a01b03811615155b610aa45760405162461bcd60e51b81526004016105609061112d565b600580546001600160a01b039586166001600160a01b0319918216179091556006805494861694821694909417909355600780549285169284169290921790915560088054919093169116179055565b610afc610c34565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610b26610c34565b4780610b7e5760405162461bcd60e51b815260206004820152602160248201527f4e6f2062616c616e63652061766169616c626c6520666f7220776974686472616044820152607760f81b6064820152608401610560565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610bb7573d6000803e3d6000fd5b5050565b610bc3610c34565b6001600160a01b038116610c285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610560565b610c3181610e39565b50565b6000546001600160a01b031633146109e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610560565b604080516002808252606082018352600092839291906020830190803683375050600254604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d209190611217565b81600081518110610d3357610d33611234565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610d6757610d67611234565b6001600160a01b03928316602091820292909201015260025460009116637ff36ab585838589610d99426101f461124a565b6040518663ffffffff1660e01b8152600401610db89493929190611262565b60006040518083038185885af1158015610dd6573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610dff91908101906112cc565b905060008160018351610e1291906111d4565b81518110610e2257610e22611234565b602002602001015190508093505050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803560ff81168114610e9a57600080fd5b919050565b600080600060608486031215610eb457600080fd5b610ebd84610e89565b9250610ecb60208501610e89565b9150610ed960408501610e89565b90509250925092565b60008060008060808587031215610ef857600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610f2657600080fd5b813560028110610a3157600080fd5b600060208284031215610f4757600080fd5b813560048110610a3157600080fd5b6001600160a01b0381168114610c3157600080fd5b60008060008060808587031215610f8157600080fd5b8435610f8c81610f56565b93506020850135610f9c81610f56565b92506040850135610fac81610f56565b91506060850135610fbc81610f56565b939692955090935050565b600060208284031215610fd957600080fd5b8135610a3181610f56565b805169ffffffffffffffffffff81168114610e9a57600080fd5b600080600080600060a0868803121561101657600080fd5b61101f86610fe4565b945060208601519350604086015192506060860151915061104260808701610fe4565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b038184138284138082168684048611161561108a5761108a61104e565b600160ff1b60008712828116878305891216156110a9576110a961104e565b600087129250878205871284841616156110c5576110c561104e565b878505871281841616156110db576110db61104e565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b60008261110e5761110e6110e9565b600160ff1b8214600019841416156111285761112861104e565b500590565b6020808252602f908201527f446973747269627574696f6e2077616c6c65747320617265206e6f742062656960408201526e6e67207365742070726f7065726c7960881b606082015260800190565b600060ff821660ff84168060ff038211156111995761119961104e565b019392505050565b60008160001904831182151516156111bb576111bb61104e565b500290565b6000826111cf576111cf6110e9565b500490565b6000828210156111e6576111e661104e565b500390565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006020828403121561122957600080fd5b8151610a3181610f56565b634e487b7160e01b600052603260045260246000fd5b6000821982111561125d5761125d61104e565b500190565b600060808201868352602060808185015281875180845260a086019150828901935060005b818110156112ac5784516001600160a01b031683529383019391830191600101611287565b50506001600160a01b039690961660408501525050506060015292915050565b600060208083850312156112df57600080fd5b825167ffffffffffffffff808211156112f757600080fd5b818501915085601f83011261130b57600080fd5b81518181111561131d5761131d611201565b8060051b604051601f19603f8301168101818110858211171561134257611342611201565b60405291825284820192508381018501918883111561136057600080fd5b938501935b8285101561137e57845184529385019392850192611365565b9897505050505050505056fea2646970667358221220034be745783c643b95fa1fcfecb25b549f1272cba5e67aefa7efd2190fff81d764736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8587,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 8628,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)15999"
      },
      {
        "astId": 7733,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "membershipFee",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(MembershipCategories)16011,t_uint256)"
      },
      {
        "astId": 7745,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "feeDistributionShares",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(FeeDistributionShares)7752_storage"
      },
      {
        "astId": 7755,
        "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
        "label": "feeDistributionWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(FeeDistributionWallets)7764_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)15999": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_enum(MembershipCategories)16011": {
        "encoding": "inplace",
        "label": "enum StakingLibrary.MembershipCategories",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(MembershipCategories)16011,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(MembershipCategories)16011",
        "label": "mapping(enum StakingLibrary.MembershipCategories => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FeeDistributionShares)7752_storage": {
        "encoding": "inplace",
        "label": "struct MembershipFeeManager.FeeDistributionShares",
        "members": [
          {
            "astId": 7747,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "buyBackAndburn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7749,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "rewardPool",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 7751,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "corporate",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(FeeDistributionWallets)7764_storage": {
        "encoding": "inplace",
        "label": "struct MembershipFeeManager.FeeDistributionWallets",
        "members": [
          {
            "astId": 7757,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "rewardPool",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 7759,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "corporate",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 7761,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "buyBackAndburnToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7763,
            "contract": "contracts/Planetmoon/MembershipFeeManager.sol:MembershipFeeManager",
            "label": "buyBackReceiver",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}