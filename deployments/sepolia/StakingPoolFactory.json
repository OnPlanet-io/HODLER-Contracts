{
  "address": "0x14828bB700712d12fbda5fDF818F9DA8dDd934C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "campaignFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pmMembershipManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pmTeamManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creatorManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__CONTRACT_IS_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__FAILED_TO_TRANSFER_BNBS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__FAILED_TO_TRANSFER_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__NOT_OWNER_OF_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__NOT_PREMIUM_OR_TEAM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakingPoolFactory__START_TIME_SHOULD_BE_FUTURE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Poolcreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "action",
          "type": "bool"
        }
      ],
      "name": "changePauseStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum StakingLibrary.CampaignCategories",
              "name": "category",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "enum StakingLibrary.ProfileType",
              "name": "profileType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLibrary.ProjectInfo",
          "name": "projectInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLibrary.RewardPoolInfo",
          "name": "rewardPoolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "image_1_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_3_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_6_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_9_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_12_months",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "APY_1_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_3_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_6_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_9_months",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "APY_12_months",
              "type": "uint8"
            }
          ],
          "internalType": "struct StakingLibrary.NFTData",
          "name": "nftData",
          "type": "tuple"
        }
      ],
      "name": "createAStakingPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPMAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPoolByID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        }
      ],
      "name": "getPoolIdsOfATeam",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPoolIdsOfAUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_campaignFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd92714c54edfff7c5708d11c0a425c52309b9da2ec691948046f025433b7f6b6",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0x14828bB700712d12fbda5fDF818F9DA8dDd934C2",
    "transactionIndex": 0,
    "gasUsed": "5443007",
    "logsBloom": "0x
    "blockHash": "0xacd6e2b033615ad8d5bdf1383db02eb9019d7e8a929f0b45276ea41e219c137f",
    "transactionHash": "0xd92714c54edfff7c5708d11c0a425c52309b9da2ec691948046f025433b7f6b6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3960985,
        "transactionHash": "0xd92714c54edfff7c5708d11c0a425c52309b9da2ec691948046f025433b7f6b6",
        "address": "0x14828bB700712d12fbda5fDF818F9DA8dDd934C2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xacd6e2b033615ad8d5bdf1383db02eb9019d7e8a929f0b45276ea41e219c137f"
      }
    ],
    "blockNumber": 3960985,
    "cumulativeGasUsed": "5443007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF0C13D4Cb19bD7eD2317128Cc1C4a37C79E9b664",
    "0x724E606f946c3BaA39503EaF74F2292095a1c74c",
    "0x2CEe002EC9036Da1A4faf1C2fc47d2a3e73b134e",
    "0x3070083ce731CB8801F604ecb994c7641b9296FB"
  ],
  "numDeployments": 2,
  "solcInputHash": "a07fc6dbe114b002f7921b05bf328789",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"campaignFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pmMembershipManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pmTeamManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__CONTRACT_IS_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__FAILED_TO_TRANSFER_BNBS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__FAILED_TO_TRANSFER_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__NOT_OWNER_OF_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__NOT_PREMIUM_OR_TEAM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingPoolFactory__START_TIME_SHOULD_BE_FUTURE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Poolcreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"}],\"name\":\"changePauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum StakingLibrary.CampaignCategories\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"enum StakingLibrary.ProfileType\",\"name\":\"profileType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.ProjectInfo\",\"name\":\"projectInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image_1_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_3_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_6_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_9_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_12_months\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"APY_1_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_3_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_6_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_9_months\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"APY_12_months\",\"type\":\"uint8\"}],\"internalType\":\"struct StakingLibrary.NFTData\",\"name\":\"nftData\",\"type\":\"tuple\"}],\"name\":\"createAStakingPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPMAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPoolByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"getPoolIdsOfATeam\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPoolIdsOfAUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_campaignFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingContract/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {StakingLibrary} from \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\nimport {ICreatorContract} from \\\"../interfaces/ICreatorContract.sol\\\";\\r\\nimport {ICreatorManager} from \\\"../interfaces/ICreatorManager.sol\\\";\\r\\nimport {ICampaignFeeManager} from \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract StakingPool is ERC721Enumerable {\\r\\n\\r\\n    error StakingPool__POOL_NOT_STARTED();\\r\\n    error StakingPool__NOT_ENOUGH_REWARD();\\r\\n    error StakingPool__NOT_AUTHERIZED();\\r\\n    error StakingPool__NOTHING_TO_UNSTAKE();\\r\\n    error StakingPool__ALREADY_UNSTAKED();\\r\\n    error StakingPool__INSUFFICIENT_FUNDS();\\r\\n    error StakingPool__FAILED_TO_TRANSFER_BNBS();\\r\\n    error StakingPool__FAILED_TO_TRANSFER_TOEKNS();\\r\\n    error StakingPool__FAILED_TO_TRANSFER_ORIGNAL_TOEKNS();\\r\\n    error StakingPool__FAILED_TO_TRANSFER_REWARD_TOEKNS();\\r\\n    error StakingPool__NO_CREATOR_CONTRACT_FOUND();\\r\\n    error StakingPool__NOT_A_VALID_STAKING_TYPE();\\r\\n\\r\\n    uint256 internal constant ONE_DAY = 24 * 60 * 60;\\r\\n    StakingLibrary.PoolInfo private s_poolInfo;\\r\\n    StakingLibrary.ProjectInfo private s_projectInfo;\\r\\n    StakingLibrary.RewardPoolInfo private s_rewardPoolInfo;\\r\\n\\r\\n    ICreatorManager private immutable s_creatorManager;\\r\\n    address private immutable s_campaignFeeManager;\\r\\n    StakingLibrary.NFTData private s_nftData;\\r\\n\\r\\n    struct StakingCategeroy {\\r\\n        uint256 duration;\\r\\n        uint256 rewardPC;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    mapping(StakingLibrary.StakingType => StakingCategeroy) private s_stakingInfo;\\r\\n    mapping(uint256 => StakingLibrary.TokenData) private s_tokenData;\\r\\n\\r\\n    event JoinedPool(\\r\\n        uint256 poolId,\\r\\n        uint256 tokenId,\\r\\n        address user,\\r\\n        uint256 contribution,\\r\\n        uint8 category\\r\\n    );\\r\\n    event ExitedPool(\\r\\n        uint256 id,\\r\\n        address creator,\\r\\n        uint256 contribution,\\r\\n        uint8 category,\\r\\n        uint256 redeemableReward\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        uint256 _poolId,\\r\\n        StakingLibrary.ProjectInfo memory _projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory _rewardPoolInfo,\\r\\n        StakingLibrary.NFTData memory _nftData,\\r\\n        address _creatorManager,\\r\\n        address _campaignFeeManager,\\r\\n        address _ownerOfProject\\r\\n    ) ERC721(_projectInfo.projectName, _projectInfo.projectSymbol) {\\r\\n\\r\\n        s_stakingInfo[StakingLibrary.StakingType.ONE_MONTH].duration = 30 * ONE_DAY;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.ONE_MONTH].rewardPC = _nftData.APY_1_months;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.ONE_MONTH].image = _nftData.image_1_months;\\r\\n\\r\\n        s_stakingInfo[StakingLibrary.StakingType.THREE_MONTH].duration = 90 * ONE_DAY;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.THREE_MONTH].rewardPC = _nftData.APY_3_months;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.THREE_MONTH].image = _nftData.image_3_months;\\r\\n\\r\\n        s_stakingInfo[StakingLibrary.StakingType.SIX_MONTH].duration = 180 * ONE_DAY;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.SIX_MONTH].rewardPC = _nftData.APY_6_months;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.SIX_MONTH].image = _nftData.image_6_months;\\r\\n\\r\\n        s_stakingInfo[StakingLibrary.StakingType.NINE_MONTH].duration = 270 * ONE_DAY;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.NINE_MONTH].rewardPC = _nftData.APY_9_months;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.NINE_MONTH].image = _nftData.image_9_months;\\r\\n\\r\\n        s_stakingInfo[StakingLibrary.StakingType.TWELVE_MONTH].duration = 365 * ONE_DAY;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.TWELVE_MONTH].rewardPC = _nftData.APY_12_months;\\r\\n        s_stakingInfo[StakingLibrary.StakingType.TWELVE_MONTH].image = _nftData.image_12_months;\\r\\n\\r\\n        s_projectInfo = _projectInfo;\\r\\n        s_rewardPoolInfo = _rewardPoolInfo;\\r\\n        s_nftData = _nftData;\\r\\n\\r\\n        s_poolInfo.poolId = _poolId;\\r\\n        s_poolInfo.poolOwner = _ownerOfProject;\\r\\n        s_poolInfo.poolAddress = address(this);\\r\\n        s_poolInfo.remainingPool = _rewardPoolInfo.poolAmount;\\r\\n\\r\\n        s_creatorManager = ICreatorManager(_creatorManager);\\r\\n        s_campaignFeeManager = _campaignFeeManager;\\r\\n    }\\r\\n\\r\\n    /// @notice The main function to stake tokens\\r\\n    function stakeTokens(\\r\\n        address onBehalf,\\r\\n        uint256 amount,\\r\\n        StakingLibrary.StakingType stakingType\\r\\n    ) public {\\r\\n        StakingLibrary.PoolInfo memory poolInfo = s_poolInfo;\\r\\n        StakingLibrary.RewardPoolInfo memory rewardPoolInfo = s_rewardPoolInfo;\\r\\n        StakingLibrary.ProjectInfo memory projectInfo = s_projectInfo;\\r\\n        StakingCategeroy memory category = s_stakingInfo[stakingType];\\r\\n\\r\\n        // Check if pool has been started\\r\\n        if (block.timestamp < rewardPoolInfo.startedAt) {\\r\\n            revert StakingPool__POOL_NOT_STARTED();\\r\\n        }\\r\\n\\r\\n        // Check if category is valid\\r\\n        if (category.rewardPC == 0) {\\r\\n            revert StakingPool__NOT_A_VALID_STAKING_TYPE();\\r\\n        }\\r\\n\\r\\n        // Calculate reward of this person\\r\\n        uint256 reward = (amount * category.rewardPC) / 100;\\r\\n\\r\\n        // Check if pool has enough space to give this reward\\r\\n        if (poolInfo.remainingPool < reward) {\\r\\n            revert StakingPool__NOT_ENOUGH_REWARD();\\r\\n        }\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        s_poolInfo.remainingPool -= reward;\\r\\n        // Update the total staked tokens variable\\r\\n        s_poolInfo.totalTokensStaked += amount;\\r\\n        // update totalParicipants\\r\\n        s_poolInfo.totalParicipants++;\\r\\n        // Update the tokenID\\r\\n        uint256 tokenId = ++s_poolInfo.tokenCounter;\\r\\n\\r\\n        //Check if user has a creator contract\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(onBehalf);\\r\\n\\r\\n        // Not already a creator then create one\\r\\n        if (creator == address(0)) {\\r\\n            creator = s_creatorManager.createACreator(onBehalf);\\r\\n        }\\r\\n\\r\\n        // Record the staking entry\\r\\n        s_tokenData[tokenId] = StakingLibrary.TokenData({\\r\\n            poolAddress: address(this),\\r\\n            poolId: poolInfo.poolId,\\r\\n            tokenStaked: amount,\\r\\n            tokenAddress: projectInfo.tokenAddress,\\r\\n            owner: address(onBehalf),\\r\\n            creator: address(creator),\\r\\n            tokenId: tokenId,\\r\\n            tokenUri: category.image,\\r\\n            stakingType: stakingType,\\r\\n            stakingTime: block.timestamp,\\r\\n            unlockTime: block.timestamp + category.duration,\\r\\n            expectedReward: reward,\\r\\n            isUnskated: false,\\r\\n            redeemedReward: 0,\\r\\n            pcReceived: 0\\r\\n        });\\r\\n\\r\\n        bool transfered = IERC20(projectInfo.tokenAddress).transferFrom(\\r\\n            msg.sender,\\r\\n            address(creator),\\r\\n            amount\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert StakingPool__FAILED_TO_TRANSFER_TOEKNS();\\r\\n        }\\r\\n\\r\\n        // Mint An NFT to the creator contract with token detials\\r\\n        _safeMint(\\r\\n            creator,\\r\\n            tokenId,\\r\\n            abi.encodePacked(address(this))\\r\\n        );\\r\\n\\r\\n        emit JoinedPool(\\r\\n            poolInfo.poolId,\\r\\n            tokenId,\\r\\n            onBehalf,\\r\\n            amount,\\r\\n            uint8(stakingType)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice unstakeTokens can only be called by creator contract of the token holder.\\r\\n    function unstakeTokens(uint256 tokenId) public payable {\\r\\n        StakingLibrary.TokenData memory tokenData = s_tokenData[tokenId];\\r\\n\\r\\n        /// @notice Calculating the reward after pelanty;\\r\\n        (\\r\\n            uint256 redeemableReward,\\r\\n            uint8 pcReceived,\\r\\n            uint256 fee\\r\\n        ) = findRedeemableReward(\\r\\n                tokenData.expectedReward,\\r\\n                tokenData.stakingTime,\\r\\n                tokenData.unlockTime\\r\\n            );\\r\\n\\r\\n        if (msg.value < fee) {\\r\\n            revert StakingPool__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        // Only owner of the token should be able to withdraw\\r\\n        if (msg.sender != tokenData.owner) {\\r\\n            revert StakingPool__NOT_AUTHERIZED();\\r\\n        }\\r\\n\\r\\n        if (tokenData.expectedReward == 0) {\\r\\n            revert StakingPool__NOTHING_TO_UNSTAKE();\\r\\n        }\\r\\n\\r\\n        if (tokenData.isUnskated) {\\r\\n            revert StakingPool__ALREADY_UNSTAKED();\\r\\n        }\\r\\n\\r\\n        s_tokenData[tokenId].isUnskated = true;\\r\\n        s_tokenData[tokenId].redeemedReward = redeemableReward;\\r\\n        s_tokenData[tokenId].pcReceived = pcReceived;\\r\\n\\r\\n        uint256 leftoverReward = tokenData.expectedReward - redeemableReward;\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        s_poolInfo.remainingPool += leftoverReward;\\r\\n\\r\\n        // Transfer fee to FeeManager\\r\\n        (bool sent, ) = payable(s_campaignFeeManager).call{value: msg.value}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        if (!sent) {\\r\\n            revert StakingPool__FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n        _burn(tokenId);\\r\\n\\r\\n        // Move tokens back to the user\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(msg.sender);\\r\\n        bool transfered = ICreatorContract(creator).sendTokensBackToOwner(\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert StakingPool__FAILED_TO_TRANSFER_ORIGNAL_TOEKNS();\\r\\n        }\\r\\n\\r\\n        transfered = IERC20(tokenData.tokenAddress).transfer(\\r\\n            tokenData.owner,\\r\\n            redeemableReward\\r\\n        );\\r\\n        if (!transfered) {\\r\\n            revert StakingPool__FAILED_TO_TRANSFER_REWARD_TOEKNS();\\r\\n        }\\r\\n\\r\\n        emit ExitedPool(\\r\\n            tokenData.poolId,\\r\\n            msg.sender,\\r\\n            tokenData.tokenStaked,\\r\\n            uint8(tokenData.stakingType),\\r\\n            redeemableReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice - penalties (50% completion -> 30% reward, 80% completion -> 50% reward, 100% completion -> 100% reward)\\r\\n    /// @notice an internal function to compute redeemable reward after pelanties.\\r\\n    function findRedeemableReward(\\r\\n        uint256 _expectedReward,\\r\\n        uint256 _stakingTime,\\r\\n        uint256 _unlockTime\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 redeemableReward, uint8 pcReceived, uint256 fee)\\r\\n    {\\r\\n        ICampaignFeeManager campaignFeeManager = ICampaignFeeManager(\\r\\n            s_campaignFeeManager\\r\\n        );\\r\\n\\r\\n        // Either 90 days, 180 days or 365 days.\\r\\n        uint256 stakingPeriod = _unlockTime - _stakingTime;\\r\\n        uint256 durationCompleted = block.timestamp - _stakingTime;\\r\\n        uint256 pcCompleted = (durationCompleted * 100) / stakingPeriod;\\r\\n\\r\\n        if (pcCompleted < 50) {\\r\\n            pcReceived = 0;\\r\\n            redeemableReward = 0;\\r\\n            fee = campaignFeeManager.getUnstakingFee(\\r\\n                StakingLibrary.UnstakingCategories.REWARD_0pc\\r\\n            );\\r\\n        } else if (pcCompleted >= 50 && pcCompleted < 80) {\\r\\n            pcReceived = 30;\\r\\n            redeemableReward = (_expectedReward * pcReceived) / 100;\\r\\n            fee = campaignFeeManager.getUnstakingFee(\\r\\n                StakingLibrary.UnstakingCategories.REWARD_30pc\\r\\n            );\\r\\n        } else if (pcCompleted >= 80 && pcCompleted < 100) {\\r\\n            pcReceived = 50;\\r\\n            redeemableReward = (_expectedReward * 50) / 100;\\r\\n            fee = campaignFeeManager.getUnstakingFee(\\r\\n                StakingLibrary.UnstakingCategories.REWARD_50pc\\r\\n            );\\r\\n        } else {\\r\\n            pcReceived = 100;\\r\\n            redeemableReward = _expectedReward;\\r\\n            fee = campaignFeeManager.getUnstakingFee(\\r\\n                StakingLibrary.UnstakingCategories.REWARD_100pc\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkTokenReward(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 expectedReward,\\r\\n            uint256 redeemableReward,\\r\\n            uint8 pcReceived,\\r\\n            uint256 fee\\r\\n        )\\r\\n    {\\r\\n        StakingLibrary.TokenData memory tokenData = s_tokenData[tokenId];\\r\\n        expectedReward = tokenData.expectedReward;\\r\\n        (redeemableReward, pcReceived, fee) = findRedeemableReward(\\r\\n            tokenData.expectedReward,\\r\\n            tokenData.stakingTime,\\r\\n            tokenData.unlockTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Getter functions\\r\\n    function getProjectInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (StakingLibrary.PoolFullInfo memory)\\r\\n    {\\r\\n        return\\r\\n            StakingLibrary.PoolFullInfo(\\r\\n                s_poolInfo,\\r\\n                s_projectInfo,\\r\\n                s_rewardPoolInfo,\\r\\n                s_nftData\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getTokenData(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (StakingLibrary.TokenData memory) {\\r\\n        return s_tokenData[tokenId];\\r\\n    }\\r\\n\\r\\n    function getUserTokens(\\r\\n        address user\\r\\n    ) external view returns (StakingLibrary.TokenData[] memory) {\\r\\n        address creator = s_creatorManager.getCreatorAddressOfUser(user);\\r\\n        if (creator == address(0)) {\\r\\n            revert StakingPool__NO_CREATOR_CONTRACT_FOUND();\\r\\n        }\\r\\n\\r\\n        uint256 userBalance = balanceOf(creator);\\r\\n        StakingLibrary.TokenData[]\\r\\n            memory tokensData = new StakingLibrary.TokenData[](userBalance);\\r\\n        for (uint256 i = 0; i < userBalance; i++) {\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(creator, i);\\r\\n            StakingLibrary.TokenData memory data = s_tokenData[tokenId];\\r\\n            tokensData[i] = data;\\r\\n        }\\r\\n\\r\\n        return (tokensData);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb24e1862cb5c04687d6996f1f6fd15efbd6f1634c491c19a0f2a54ead589003\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport {StakingPool} from \\\"./StakingPool.sol\\\";\\r\\nimport {StakingLibrary} from \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\nimport {IPMMembershipManager} from \\\"../interfaces/IPMMembershipManager.sol\\\";\\r\\nimport {IPMTeamManager} from \\\"../interfaces/IPMTeamManager.sol\\\";\\r\\nimport {ICampaignFeeManager} from \\\"../interfaces/ICampaignFeeManager.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract StakingPoolFactory is Ownable {\\r\\n\\r\\n    error StakingPoolFactory__NOT_PREMIUM_OR_TEAM();\\r\\n    error StakingPoolFactory__NOT_OWNER_OF_TEAM();\\r\\n    error StakingPoolFactory__START_TIME_SHOULD_BE_FUTURE();\\r\\n    error StakingPoolFactory__FAILED_TO_TRANSFER_TOKENS();\\r\\n    error StakingPoolFactory__CONTRACT_IS_PAUSED();\\r\\n    error StakingPoolFactory__FAILED_TO_TRANSFER_BNBS();\\r\\n    error StakingPoolFactory__INSUFFICIENT_FUNDS();\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private s_projectsCount;\\r\\n    bool private s_isPaused = true;\\r\\n\\r\\n    address public s_campaignFeeManager;\\r\\n    address private s_pmMembershipManager;\\r\\n    address private s_pmTeamManager;\\r\\n    address private s_creatorManager;\\r\\n\\r\\n    mapping(address userAddress => uint256[] pools) private s_poolsOfAUser;\\r\\n    mapping(uint256 teamId => uint256[] pools) private s_poolsOfATeam;\\r\\n\\r\\n    mapping(address tokenAddress => address[] pools) private s_stakingPoolsByToken;\\r\\n    mapping(uint256 id => address pool) private s_stakingPoolByID;\\r\\n\\r\\n    event Poolcreated(\\r\\n        uint256 poolId,\\r\\n        address poolAddress,\\r\\n        address tokenAddress\\r\\n    );\\r\\n\\r\\n    constructor(        \\r\\n        address campaignFeeManager,\\r\\n        address pmMembershipManager,\\r\\n        address pmTeamManager,\\r\\n        address creatorManager\\r\\n    ) {\\r\\n        s_campaignFeeManager = campaignFeeManager;\\r\\n        s_pmMembershipManager = pmMembershipManager;\\r\\n        s_pmTeamManager = pmTeamManager;\\r\\n        s_creatorManager = creatorManager;\\r\\n    }\\r\\n\\r\\n    function createAStakingPool(\\r\\n        StakingLibrary.ProjectInfo memory projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory rewardPoolInfo,\\r\\n        StakingLibrary.NFTData memory nftData\\r\\n    ) public payable {\\r\\n        if (s_isPaused) {\\r\\n            revert StakingPoolFactory__CONTRACT_IS_PAUSED();\\r\\n        }\\r\\n\\r\\n        bool hasTeam = IPMTeamManager(s_pmTeamManager).balanceOf(\\r\\n            msg.sender\\r\\n        ) > 0;\\r\\n        bool isMember = IPMMembershipManager(s_pmMembershipManager)\\r\\n            .isMember(msg.sender);\\r\\n\\r\\n        // To start a campaign, user should be a premium member or he should have a team membership.\\r\\n        if (!hasTeam && !isMember) {\\r\\n            revert StakingPoolFactory__NOT_PREMIUM_OR_TEAM();\\r\\n        }\\r\\n\\r\\n        if (projectInfo.profileType == StakingLibrary.ProfileType.TEAM) {\\r\\n            address ownerOfTeam = IPMTeamManager(s_pmTeamManager)\\r\\n                .ownerOf(projectInfo.profileId);\\r\\n            if (ownerOfTeam != msg.sender) {\\r\\n                revert StakingPoolFactory__NOT_OWNER_OF_TEAM();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 requiredFee = ICampaignFeeManager(\\r\\n            s_campaignFeeManager\\r\\n        ).getCampaignFee(projectInfo.category);\\r\\n\\r\\n        if (msg.value < requiredFee) {\\r\\n            revert StakingPoolFactory__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        if (rewardPoolInfo.startedAt < block.timestamp) {\\r\\n            revert StakingPoolFactory__START_TIME_SHOULD_BE_FUTURE();\\r\\n        }\\r\\n\\r\\n        s_projectsCount.increment();\\r\\n        uint256 newId = s_projectsCount.current();\\r\\n\\r\\n\\r\\n        StakingPool stakingContract = new StakingPool(\\r\\n            newId,\\r\\n            projectInfo,\\r\\n            rewardPoolInfo,\\r\\n            nftData,\\r\\n            s_creatorManager,\\r\\n            s_campaignFeeManager,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        if (projectInfo.profileType == StakingLibrary.ProfileType.TEAM) {\\r\\n            s_poolsOfATeam[projectInfo.profileId].push(newId);\\r\\n        }\\r\\n\\r\\n        s_stakingPoolsByToken[projectInfo.tokenAddress].push(\\r\\n            address(stakingContract)\\r\\n        );\\r\\n        s_stakingPoolByID[newId] = address(stakingContract);\\r\\n        s_poolsOfAUser[msg.sender].push(newId);\\r\\n\\r\\n        bool transfered = IERC20(projectInfo.tokenAddress).transferFrom(\\r\\n            msg.sender,\\r\\n            address(stakingContract),\\r\\n            rewardPoolInfo.poolAmount\\r\\n        );\\r\\n\\r\\n        if (!transfered) {\\r\\n            revert StakingPoolFactory__FAILED_TO_TRANSFER_TOKENS();\\r\\n        }\\r\\n\\r\\n        (bool sent, ) = payable(s_campaignFeeManager).call{\\r\\n            value: msg.value\\r\\n        }(\\\"\\\");\\r\\n        if (!sent) {\\r\\n            revert StakingPoolFactory__FAILED_TO_TRANSFER_BNBS();\\r\\n        }\\r\\n\\r\\n        emit Poolcreated(\\r\\n            newId,\\r\\n            address(stakingContract),\\r\\n            projectInfo.tokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* Getter Functions */\\r\\n\\r\\n    function getPoolsByToken(\\r\\n        address token\\r\\n    ) external view returns (address[] memory) {\\r\\n        return s_stakingPoolsByToken[token];\\r\\n    }\\r\\n\\r\\n    function getPoolByID(uint256 id) external view returns (address) {\\r\\n        return s_stakingPoolByID[id];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfAUser(\\r\\n        address user\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return s_poolsOfAUser[user];\\r\\n    }\\r\\n\\r\\n    function getPoolIdsOfATeam(\\r\\n        uint256 teamId\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return s_poolsOfATeam[teamId];\\r\\n    }\\r\\n\\r\\n    function isPaused() external view returns (bool) {\\r\\n        return s_isPaused;\\r\\n    }\\r\\n\\r\\n    function getPMAddresses() external view returns (address,address,address,address) {\\r\\n        return (\\r\\n            s_campaignFeeManager,\\r\\n            s_pmMembershipManager,\\r\\n            s_pmTeamManager,\\r\\n            s_creatorManager\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* Admin Functions */\\r\\n\\r\\n    function changePauseStatus(bool action) external onlyOwner {\\r\\n        s_isPaused = action;\\r\\n    }\\r\\n\\r\\n    // function updatePMAddresses(        \\r\\n    //     address campaignFeeManager,\\r\\n    //     address pmMembershipManager,\\r\\n    //     address pmTeamManager,\\r\\n    //     address creatorManager\\r\\n    // ) external onlyOwner {\\r\\n    //     s_campaignFeeManager = campaignFeeManager;\\r\\n    //     s_pmMembershipManager = pmMembershipManager;\\r\\n    //     s_pmTeamManager = pmTeamManager;\\r\\n    //     s_creatorManager = creatorManager;\\r\\n    // }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc8323049063f8fd181dd06554edf9394da61e6d622f9aac51748b8cbf82eb9e4\",\"license\":\"MIT\"},\"contracts/interfaces/ICampaignFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface ICampaignFeeManager  {\\r\\n    function getCampaignFee(StakingLibrary.CampaignCategories category) external view returns (uint256);\\r\\n    function getUnstakingFee(StakingLibrary.UnstakingCategories category) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0xf5e5c469fddad3117f8d495a22876b93b15ff501a3e454313a0f3dff5d19b0ef\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICreatorContract  {\\r\\n    function sendTokensBackToOwner(address stakingPool, uint256 _tokenId) external returns (bool);\\r\\n    function removePoolAddress(address _poolAddress) external;\\r\\n}\",\"keccak256\":\"0xb46e9eb961feb2e6df97ed9358385109cad44e1f27dcdf157fc39571daff7d91\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ICreatorManager  {\\r\\n    function createACreator(address user) external returns (address);\\r\\n    function getCreatorAddressOfUser(address user) external view returns (address);\\r\\n    function getWalletAddressOfCreator(address creator) external view returns (address);\\r\\n}\",\"keccak256\":\"0x7cbd5c73ba9a1788a6fd6cef08cfefbb0cb19c42b49f1d235a63d1c5c268c3f1\",\"license\":\"MIT\"},\"contracts/interfaces/IPMMembershipManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IPMMembershipManager  {\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function isMember(address user) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x1ae78a3ec26bb5da679b750ef079a6ac90496f63d7bf66833297756447367a07\",\"license\":\"MIT\"},\"contracts/interfaces/IPMTeamManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IPMTeamManager  {\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n}\",\"keccak256\":\"0x591111948ea18dacab2b9620c811941d38b843fc032bf1b3c059d327648e3e5d\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n    \\r\\n    enum ProfileType {\\r\\n        NONE,\\r\\n        TEAM,\\r\\n        USER\\r\\n    }\\r\\n    enum StakingType {\\r\\n        ONE_MONTH,\\r\\n        THREE_MONTH,\\r\\n        SIX_MONTH,\\r\\n        NINE_MONTH,\\r\\n        TWELVE_MONTH\\r\\n    }\\r\\n\\r\\n    enum MembershipCategories {\\r\\n        MEMBER,\\r\\n        TEAM\\r\\n    }\\r\\n\\r\\n    enum UnstakingCategories {\\r\\n        REWARD_0pc,\\r\\n        REWARD_30pc,\\r\\n        REWARD_50pc,\\r\\n        REWARD_100pc\\r\\n    }\\r\\n\\r\\n    enum CampaignCategories {\\r\\n        SILVER,\\r\\n        GOLD,\\r\\n        DIAMOND\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        CampaignCategories category;\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        ProfileType profileType;\\r\\n        uint256 profileId;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo {\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct NFTData {\\r\\n        string image_1_months;\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_9_months;\\r\\n        string image_12_months;\\r\\n        uint8 APY_1_months;\\r\\n        uint8 APY_3_months;\\r\\n        uint8 APY_6_months;\\r\\n        uint8 APY_9_months;\\r\\n        uint8 APY_12_months;\\r\\n    }\\r\\n\\r\\n    struct TokenData {\\r\\n        address poolAddress;\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        StakingType stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo;\\r\\n        RewardPoolInfo rewardPoolInfo;\\r\\n        NFTData nftData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x199cea57c5efa012bd58ae5afc581b161025b685073cacb973f18521f8b28932\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526002805460ff191660011790553480156200001e57600080fd5b50604051620060ef380380620060ef833981016040819052620000419162000116565b6200004c33620000a9565b600280546001600160a01b0395861661010002610100600160a81b0319909116179055600380549385166001600160a01b031994851617905560048054928516928416929092179091556005805491909316911617905562000173565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011157600080fd5b919050565b600080600080608085870312156200012d57600080fd5b6200013885620000f9565b93506200014860208601620000f9565b92506200015860408601620000f9565b91506200016860608601620000f9565b905092959194509250565b615f6c80620001836000396000f3fe608060405260043610620000b55760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001df5780638dc6c5f614620001ff578063b187bd261462000224578063e645ab061462000249578063f2fde38b146200029b578063fb598ff714620002c057600080fd5b806311aaf04614620000ba5780633424b8ce14620000fe5780635055149c1462000125578063715018a6146200015f5780637a0e6ad3146200017757806386959b4b14620001ab575b600080fd5b348015620000c757600080fd5b50600254620000e19061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200010b57600080fd5b50620001236200011d36600462000b1f565b620002d7565b005b3480156200013257600080fd5b50620000e16200014436600462000b46565b6000908152600960205260409020546001600160a01b031690565b3480156200016c57600080fd5b5062000123620002f4565b3480156200018457600080fd5b506200019c6200019636600462000b88565b6200030c565b604051620000f5919062000ba8565b348015620001b857600080fd5b50620001d0620001ca36600462000b88565b6200037a565b604051620000f5919062000bee565b348015620001ec57600080fd5b506000546001600160a01b0316620000e1565b3480156200020c57600080fd5b506200019c6200021e36600462000b46565b620003f1565b3480156200023157600080fd5b5060025460ff166040519015158152602001620000f5565b3480156200025657600080fd5b50600254600354600454600554604080516101009095046001600160a01b039081168652938416602086015291831691840191909152166060820152608001620000f5565b348015620002a857600080fd5b5062000123620002ba36600462000b88565b62000453565b62000123620002d136600462000ef7565b620004d6565b620002e162000a56565b6002805460ff1916911515919091179055565b620002fe62000a56565b6200030a600062000ab2565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200036e57602002820191906000526020600020905b81548152602001906001019080831162000359575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200036e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003c75750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200036e5760200282019190600052602060002090815481526020019060010190808311620003595750505050509050919050565b6200045d62000a56565b6001600160a01b038116620004c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620004d38162000ab2565b50565b60025460ff1615620004fb57604051636e98ced160e11b815260040160405180910390fd5b600480546040516370a0823160e01b8152339281019290925260009182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200054a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057091906200104c565b60035460405163288c314960e21b81523360048201529290911192506000916001600160a01b039091169063a230c52490602401602060405180830381865afa158015620005c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e8919062001066565b905081158015620005f7575080155b156200061657604051633326779f60e01b815260040160405180910390fd5b60018560c00151600281111562000631576200063162001086565b03620006db576004805460e08701516040516331a9108f60e11b8152928301526000916001600160a01b0390911690636352211e90602401602060405180830381865afa15801562000687573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ad91906200109c565b90506001600160a01b0381163314620006d957604051631159931760e11b815260040160405180910390fd5b505b600254855160405163abe9836360e01b815260009261010090046001600160a01b03169163abe9836391620007149190600401620010ea565b602060405180830381865afa15801562000732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075891906200104c565b9050803410156200077c576040516310b4b76f60e21b815260040160405180910390fd5b84514211156200079f576040516394881aef60e01b815260040160405180910390fd5b620007ae600180546001019055565b6000620007ba60015490565b60055460025460405192935060009284928b928b928b926001600160a01b0390811692610100900416903390620007f19062000b02565b6200080397969594939291906200123b565b604051809103906000f08015801562000820573d6000803e3d6000fd5b50905060018860c0015160028111156200083e576200083e62001086565b036200086b5760e08801516000908152600760209081526040822080546001810182559083529120018290555b6060880180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092558986526009855283862080549091168217905533808652600685528386208054938401815586528486209092018990559551928d015191516323b872dd60e01b815260048101919091526024810195909552604485015290929116906323b872dd906064016020604051808303816000875af115801562000938573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095e919062001066565b9050806200097f5760405163fe01ddbd60e01b815260040160405180910390fd5b60025460405160009161010090046001600160a01b03169034908381818185875af1925050503d8060008114620009d3576040519150601f19603f3d011682016040523d82523d6000602084013e620009d8565b606091505b5050905080620009fb57604051633ec4aca960e21b815260040160405180910390fd5b6060808b0151604080518781526001600160a01b038088166020830152909216908201527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a150505050505050505050565b6000546001600160a01b031633146200030a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620004bf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614bc7806200137083390190565b8015158114620004d357600080fd5b60006020828403121562000b3257600080fd5b813562000b3f8162000b10565b9392505050565b60006020828403121562000b5957600080fd5b5035919050565b6001600160a01b0381168114620004d357600080fd5b803562000b838162000b60565b919050565b60006020828403121562000b9b57600080fd5b813562000b3f8162000b60565b6020808252825182820181905260009190848201906040850190845b8181101562000be25783518352928401929184019160010162000bc4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000be25783516001600160a01b03168352928401929184019160010162000c0a565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171562000c6e5762000c6e62000c31565b60405290565b604051610100810167ffffffffffffffff8111828210171562000c6e5762000c6e62000c31565b80356003811062000b8357600080fd5b600082601f83011262000cbd57600080fd5b813567ffffffffffffffff8082111562000cdb5762000cdb62000c31565b604051601f8301601f19908116603f0116810190828211818310171562000d065762000d0662000c31565b8160405283815286602085880101111562000d2057600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b8357600080fd5b60006040828403121562000d6557600080fd5b6040516040810181811067ffffffffffffffff8211171562000d8b5762000d8b62000c31565b604052823581526020928301359281019290925250919050565b6000610140828403121562000db957600080fd5b62000dc362000c47565b9050813567ffffffffffffffff8082111562000dde57600080fd5b62000dec8583860162000cab565b8352602084013591508082111562000e0357600080fd5b62000e118583860162000cab565b6020840152604084013591508082111562000e2b57600080fd5b62000e398583860162000cab565b6040840152606084013591508082111562000e5357600080fd5b62000e618583860162000cab565b6060840152608084013591508082111562000e7b57600080fd5b5062000e8a8482850162000cab565b60808301525062000e9e60a0830162000d40565b60a082015262000eb160c0830162000d40565b60c082015262000ec460e0830162000d40565b60e082015261010062000ed981840162000d40565b9082015261012062000eed83820162000d40565b9082015292915050565b60008060006080848603121562000f0d57600080fd5b833567ffffffffffffffff8082111562000f2657600080fd5b90850190610100828803121562000f3c57600080fd5b62000f4662000c74565b62000f518362000c9b565b815260208301358281111562000f6657600080fd5b62000f748982860162000cab565b60208301525060408301358281111562000f8d57600080fd5b62000f9b8982860162000cab565b60408301525062000faf6060840162000b76565b606082015262000fc26080840162000d40565b608082015260a08301358281111562000fda57600080fd5b62000fe88982860162000cab565b60a08301525062000ffc60c0840162000c9b565b60c082015260e0838101359082015294506200101c876020880162000d52565b935060608601359150808211156200103357600080fd5b50620010428682870162000da5565b9150509250925092565b6000602082840312156200105f57600080fd5b5051919050565b6000602082840312156200107957600080fd5b815162000b3f8162000b10565b634e487b7160e01b600052602160045260246000fd5b600060208284031215620010af57600080fd5b815162000b3f8162000b60565b60038110620004d357634e487b7160e01b600052602160045260246000fd5b620010e681620010bc565b9052565b60208101620010f983620010bc565b91905290565b6000815180845260005b81811015620011275760208185018101518683018201520162001109565b506000602082860101526020601f19601f83011685010191505092915050565b600061014082518185526200115f82860182620010ff565b915050602083015184820360208601526200117b8282620010ff565b91505060408301518482036040860152620011978282620010ff565b91505060608301518482036060860152620011b38282620010ff565b91505060808301518482036080860152620011cf8282620010ff565b91505060a0830151620011e760a086018260ff169052565b5060c0830151620011fd60c086018260ff169052565b5060e08301516200121360e086018260ff169052565b506101008381015160ff90811691860191909152610120938401511692909301919091525090565b6000610100898352806020840152620012588184018a51620010db565b60208901518161012085015262001274610200850182620010ff565b915050604089015160ff198085840301610140860152620012968383620010ff565b925060608b01519150620012b66101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620012e38282620010ff565b91505060c0890151620012fb6101c0850182620010db565b5060e08901516101e0840152875160408401526020880151606084015282810360808401526200132c818862001147565b9150506200134560a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e08301529897505050505050505056fe60c06040523480156200001157600080fd5b5060405162004bc738038062004bc783398101604081905262000034916200089b565b6020860151604087015160006200004c838262000ac6565b5060016200005b828262000ac6565b50505062015180601e62000070919062000b92565b60008052602080527f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbe95560a084015160ff167f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbea5583517f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbeb90620000f4908262000ac6565b506200010562015180605a62000b92565b600160005260208080527f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ea9190915560c085015160ff167f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344eb558401517f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ec906200018f908262000ac6565b50620001a06201518060b462000b92565b6002600052602080527f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d75560e084015160ff167f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d85560408401517f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d99062000228908262000ac6565b506200023a6201518061010e62000b92565b6003600052602080527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5561010084015160ff167f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac05560608401517f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac190620002c3908262000ac6565b50620002d56201518061016d62000b92565b6004600052602080527faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fa5561012084015160ff167faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fb5560808401517faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fc906200035e908262000ac6565b50855160118054889290829060ff1916600183600281111562000385576200038562000bbe565b021790555060208201516001820190620003a0908262000ac6565b5060408201516002820190620003b7908262000ac6565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482019062000408908262000ac6565b5060c082015160058201805460ff191660018360028111156200042f576200042f62000bbe565b021790555060e091909101516006909101558451601855602085015160195583518490601a90819062000463908262000ac6565b50602082015160018201906200047a908262000ac6565b506040820151600282019062000491908262000ac6565b5060608201516003820190620004a8908262000ac6565b5060808201516004820190620004bf908262000ac6565b5060a0828101516005909201805460c085015160e0860151610100808801516101209098015160ff9081166401000000000260ff60201b1999821663010000000263ff0000001994831662010000029490941663ffff00001995831690930261ffff199096169190981617939093179190911691909117179390931691909117909155600a97909755601080546001600160a01b039283166001600160a01b031991821617909155600b805490911630179055602090940151600c559083166080529091169092525062000bd49050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715620005cc57620005cc62000590565b60405290565b60405161010081016001600160401b0381118282101715620005cc57620005cc62000590565b604051601f8201601f191681016001600160401b038111828210171562000623576200062362000590565b604052919050565b8051600381106200063b57600080fd5b919050565b600082601f8301126200065257600080fd5b81516001600160401b038111156200066e576200066e62000590565b602062000684601f8301601f19168201620005f8565b82815285828487010111156200069957600080fd5b60005b83811015620006b95785810183015182820184015282016200069c565b506000928101909101919091529392505050565b80516001600160a01b03811681146200063b57600080fd5b805160ff811681146200063b57600080fd5b6000604082840312156200070a57600080fd5b604080519081016001600160401b03811182821017156200072f576200072f62000590565b604052825181526020928301519281019290925250919050565b600061014082840312156200075d57600080fd5b62000767620005a6565b82519091506001600160401b03808211156200078257600080fd5b620007908583860162000640565b83526020840151915080821115620007a757600080fd5b620007b58583860162000640565b60208401526040840151915080821115620007cf57600080fd5b620007dd8583860162000640565b60408401526060840151915080821115620007f757600080fd5b620008058583860162000640565b606084015260808401519150808211156200081f57600080fd5b506200082e8482850162000640565b6080830152506200084260a08301620006e5565b60a08201526200085560c08301620006e5565b60c08201526200086860e08301620006e5565b60e08201526101006200087d818401620006e5565b9082015261012062000891838201620006e5565b9082015292915050565b600080600080600080600061010080898b031215620008b957600080fd5b885160208a01519098506001600160401b0380821115620008d957600080fd5b818b01915082828d031215620008ee57600080fd5b620008f8620005d2565b925062000905826200062b565b83526020820151818111156200091a57600080fd5b620009288d82850162000640565b6020850152506040820151818111156200094157600080fd5b6200094f8d82850162000640565b6040850152506200096360608301620006cd565b60608401526200097660808301620006e5565b608084015260a0820151818111156200098e57600080fd5b6200099c8d82850162000640565b60a085015250620009b060c083016200062b565b60c084015260e082015160e0840152829850620009d18c60408d01620006f7565b975060808b0151925080831115620009e857600080fd5b5050620009f88a828b0162000749565b94505062000a0960a08901620006cd565b925062000a1960c08901620006cd565b915062000a2960e08901620006cd565b905092959891949750929550565b600181811c9082168062000a4c57607f821691505b60208210810362000a6d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ac157600081815260208120601f850160051c8101602086101562000a9c5750805b601f850160051c820191505b8181101562000abd5782815560010162000aa8565b5050505b505050565b81516001600160401b0381111562000ae25762000ae262000590565b62000afa8162000af3845462000a37565b8462000a73565b602080601f83116001811462000b32576000841562000b195750858301515b600019600386901b1c1916600185901b17855562000abd565b600085815260208120601f198616915b8281101562000b635788860151825594840194600190910190840162000b42565b508582101562000b825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141762000bb857634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b60805160a051613fb162000c16600039600081816106cc015261101e015260008181610a83015281816110c10152818161180f01526118a90152613fb16000f3fe6080604052600436106101405760003560e01c8063608e4dd0116100b6578063a22cb4651161006f578063a22cb465146103a9578063a3a43931146103c9578063b09afec114610412578063b88d4fde1461043f578063c87b56dd1461045f578063e985e9c51461047f57600080fd5b8063608e4dd0146102ff5780636352211e14610312578063637888c01461033257806367c897fe1461035257806370a082311461037457806395d89b411461039457600080fd5b80631df025c6116101085780631df025c61461021557806323b872dd146102525780632f745c591461027257806342842e0e146102925780634f6ccce7146102b2578063519dc8d2146102d257600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d457806318160ddd146101f6575b600080fd5b34801561015157600080fd5b5061016561016036600461348f565b6104c8565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104f3565b60405161017191906134fc565b3480156101a857600080fd5b506101bc6101b736600461350f565b610585565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef36600461353d565b6105ac565b005b34801561020257600080fd5b506008545b604051908152602001610171565b34801561022157600080fd5b50610235610230366004613569565b6106c6565b6040805193845260ff909216602084015290820152606001610171565b34801561025e57600080fd5b506101f461026d366004613595565b6108e9565b34801561027e57600080fd5b5061020761028d36600461353d565b61091a565b34801561029e57600080fd5b506101f46102ad366004613595565b6109b0565b3480156102be57600080fd5b506102076102cd36600461350f565b6109cb565b3480156102de57600080fd5b506102f26102ed3660046135d6565b610a5e565b6040516101719190613720565b6101f461030d36600461350f565b610d5a565b34801561031e57600080fd5b506101bc61032d36600461350f565b6112eb565b34801561033e57600080fd5b506101f461034d366004613782565b61134b565b34801561035e57600080fd5b50610367611c4d565b6040516101719190613976565b34801561038057600080fd5b5061020761038f3660046135d6565b61226e565b3480156103a057600080fd5b5061018f6122f4565b3480156103b557600080fd5b506101f46103c4366004613a39565b612303565b3480156103d557600080fd5b506103e96103e436600461350f565b612312565b6040516101719493929190938452602084019290925260ff166040830152606082015260800190565b34801561041e57600080fd5b5061043261042d36600461350f565b6124ce565b6040516101719190613a72565b34801561044b57600080fd5b506101f461045a366004613a9b565b61265d565b34801561046b57600080fd5b5061018f61047a36600461350f565b612695565b34801561048b57600080fd5b5061016561049a366004613b7b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806104ed57506104ed82612709565b92915050565b60606000805461050290613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461052e90613ba9565b801561057b5780601f106105505761010080835404028352916020019161057b565b820191906000526020600020905b81548152906001019060200180831161055e57829003601f168201915b5050505050905090565b600061059082612759565b506000908152600460205260409020546001600160a01b031690565b60006105b7826112eb565b9050806001600160a01b0316836001600160a01b0316036106295760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106455750610645813361049a565b6106b75760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610620565b6106c183836127bb565b505050565b600080807f0000000000000000000000000000000000000000000000000000000000000000816106f68787613bf9565b905060006107048842613bf9565b9050600082610714836064613c0c565b61071e9190613c23565b905060328110156107a457604051633b6a8f1d60e01b8152600097508796506001600160a01b03851690633b6a8f1d9061075c908990600401613c45565b602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d9190613c5f565b94506108dc565b603281101580156107b55750605081105b1561080457601e955060646107ca878c613c0c565b6107d49190613c23565b604051633b6a8f1d60e01b81529097506001600160a01b03851690633b6a8f1d9061075c90600190600401613c45565b605081101580156108155750606481105b156108645760329550606461082a8b88613c0c565b6108349190613c23565b604051633b6a8f1d60e01b81529097506001600160a01b03851690633b6a8f1d9061075c90600290600401613c45565b604051633b6a8f1d60e01b81528a9750606496506001600160a01b03851690633b6a8f1d9061089890600390600401613c45565b602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190613c5f565b94505b5050505093509350939050565b6108f33382612829565b61090f5760405162461bcd60e51b815260040161062090613c78565b6106c18383836128a8565b60006109258361226e565b82106109875760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610620565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106c18383836040518060200160405280600081525061265d565b60006109d660085490565b8210610a395760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610620565b60088281548110610a4c57610a4c613cc5565b90600052602060002001549050919050565b604051631604f1c960e11b81526001600160a01b0382811660048301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613cdb565b90506001600160a01b038116610b175760405163089c85e960e41b815260040160405180910390fd5b6000610b228261226e565b905060008167ffffffffffffffff811115610b3f57610b3f613a85565b604051908082528060200260200182016040528015610b7857816020015b610b656132b9565b815260200190600190039081610b5d5790505b50905060005b82811015610d51576000610b92858361091a565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610c1d90613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990613ba9565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b5050509183525050600882015460209091019060ff166004811115610cbd57610cbd6135f3565b6004811115610cce57610cce6135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015284519091508190859085908110610d3157610d31613cc5565b602002602001018190525050508080610d4990613cf8565b915050610b7e565b50949350505050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e084019190610de290613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0e90613ba9565b8015610e5b5780601f10610e3057610100808354040283529160200191610e5b565b820191906000526020600020905b815481529060010190602001808311610e3e57829003601f168201915b5050509183525050600882015460209091019060ff166004811115610e8257610e826135f3565b6004811115610e9357610e936135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015261016081015161012082015161014083015192935060009283928392610f02926106c6565b92509250925080341015610f2957604051634421b06760e11b815260040160405180910390fd5b83608001516001600160a01b0316336001600160a01b031614610f5f57604051631ba0d8a960e21b815260040160405180910390fd5b836101600151600003610f8557604051635640214f60e11b815260040160405180910390fd5b83610180015115610fa957604051633b2d84eb60e01b815260040160405180910390fd5b6000858152602160205260408120600c81018054600160ff1991821617909155600d8201869055600e909101805490911660ff8516179055610160850151610ff2908590613bf9565b905080600a60020160008282546110099190613d11565b90915550506040516000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169034908381818185875af1925050503d8060008114611079576040519150601f19603f3d011682016040523d82523d6000602084013e61107e565b606091505b50509050806110a05760405163b3dd313360e01b815260040160405180910390fd5b6110a987612a19565b604051631604f1c960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632c09e39290602401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190613cdb565b6040516357fecd5d60e11b8152306004820152602481018a90529091506000906001600160a01b0383169063affd9aba906044016020604051808303816000875af1158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190613d24565b9050806111cb576040516318948a9560e21b815260040160405180910390fd5b6060880151608089015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018a905291169063a9059cbb906044016020604051808303816000875af1158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190613d24565b9050806112685760405163c1910fa360e01b815260040160405180910390fd5b7f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d8860200151338a604001518b610100015160048111156112ab576112ab6135f3565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080810189905260a00160405180910390a1505050505050505050565b6000818152600260205260408120546001600160a01b0316806104ed5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610620565b6040805160e081018252600a548152600b546001600160a01b03908116602080840191909152600c5483850152600d546060840152600e546080840152600f5460a084015260105490911660c0830152825180840184526018548152601954918101919091528251610100810190935260118054929391926000929190829060ff1660028111156113de576113de6135f3565b60028111156113ef576113ef6135f3565b815260200160018201805461140390613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461142f90613ba9565b801561147c5780601f106114515761010080835404028352916020019161147c565b820191906000526020600020905b81548152906001019060200180831161145f57829003601f168201915b5050505050815260200160028201805461149590613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546114c190613ba9565b801561150e5780601f106114e35761010080835404028352916020019161150e565b820191906000526020600020905b8154815290600101906020018083116114f157829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff16604082015260048201805460609092019161154e90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461157a90613ba9565b80156115c75780601f1061159c576101008083540402835291602001916115c7565b820191906000526020600020905b8154815290600101906020018083116115aa57829003601f168201915b5050509183525050600582015460209091019060ff1660028111156115ee576115ee6135f3565b60028111156115ff576115ff6135f3565b81526020016006820154815250509050600060206000866004811115611627576116276135f3565b6004811115611638576116386135f3565b8152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805461167590613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546116a190613ba9565b80156116ee5780601f106116c3576101008083540402835291602001916116ee565b820191906000526020600020905b8154815290600101906020018083116116d157829003601f168201915b5050505050815250509050826000015142101561171e5760405163a9905ea160e01b815260040160405180910390fd5b8060200151600003611743576040516332f71a5f60e01b815260040160405180910390fd5b600060648260200151886117579190613c0c565b6117619190613c23565b9050808560400151101561178857604051630207b16560e01b815260040160405180910390fd5b80600a600201600082825461179d9190613bf9565b9091555050600d80548891906000906117b7908490613d11565b9091555050600e80549060006117cc83613cf8565b91905055506000600a600501600081546117e590613cf8565b9182905550604051631604f1c960e11b81526001600160a01b038b811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190613cdb565b90506001600160a01b038116611919576040516331b77b8960e21b81526001600160a01b038b811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c6ddee24906024016020604051808303816000875af11580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190613cdb565b90505b604051806101e00160405280306001600160a01b03168152602001886000015181526020018a815260200186606001516001600160a01b031681526020018b6001600160a01b03168152602001826001600160a01b0316815260200183815260200185604001518152602001896004811115611997576119976135f3565b81526020014281526020018560000151426119b29190613d11565b8152602080820186905260006040808401829052606080850183905260809485018390528783526021845291819020855181546001600160a01b03199081166001600160a01b0392831617835594870151600183015591860151600282015591850151600383018054851691831691909117905592840151600482018054841691851691909117905560a0840151600582018054909316931692909217905560c0820151600682015560e08201516007820190611a6f9082613d8f565b5061010082015160088201805460ff19166001836004811115611a9457611a946135f3565b02179055506101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201805491151560ff199283161790556101a0830151600d8301556101c090920151600e909101805460ff9092169190921617905560608501516040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018c905260009216906323b872dd906064016020604051808303816000875af1158015611b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b779190613d24565b905080611b9757604051637f7090f160e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193060601b166020820152611bd19083908590603401604051602081830303815290604052612abc565b87517fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa90848d8d8d6004811115611c0a57611c0a6135f3565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a15050505050505050505050565b611c55613334565b6040805161016081018252600a5460808201908152600b546001600160a01b0390811660a0840152600c5460c0840152600d5460e0840152600e5461010080850191909152600f5461012085015260105490911661014084015290825282519081019092526011805491926020840192909190829060ff166002811115611cde57611cde6135f3565b6002811115611cef57611cef6135f3565b8152602001600182018054611d0390613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2f90613ba9565b8015611d7c5780601f10611d5157610100808354040283529160200191611d7c565b820191906000526020600020905b815481529060010190602001808311611d5f57829003601f168201915b50505050508152602001600282018054611d9590613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc190613ba9565b8015611e0e5780601f10611de357610100808354040283529160200191611e0e565b820191906000526020600020905b815481529060010190602001808311611df157829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611e4e90613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7a90613ba9565b8015611ec75780601f10611e9c57610100808354040283529160200191611ec7565b820191906000526020600020905b815481529060010190602001808311611eaa57829003601f168201915b5050509183525050600582015460209091019060ff166002811115611eee57611eee6135f3565b6002811115611eff57611eff6135f3565b815260200160068201548152505081526020016018604051806040016040529081600082015481526020016001820154815250508152602001601a60405180610140016040529081600082018054611f5690613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8290613ba9565b8015611fcf5780601f10611fa457610100808354040283529160200191611fcf565b820191906000526020600020905b815481529060010190602001808311611fb257829003601f168201915b50505050508152602001600182018054611fe890613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461201490613ba9565b80156120615780601f1061203657610100808354040283529160200191612061565b820191906000526020600020905b81548152906001019060200180831161204457829003601f168201915b5050505050815260200160028201805461207a90613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546120a690613ba9565b80156120f35780601f106120c8576101008083540402835291602001916120f3565b820191906000526020600020905b8154815290600101906020018083116120d657829003601f168201915b5050505050815260200160038201805461210c90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461213890613ba9565b80156121855780601f1061215a57610100808354040283529160200191612185565b820191906000526020600020905b81548152906001019060200180831161216857829003601f168201915b5050505050815260200160048201805461219e90613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546121ca90613ba9565b80156122175780601f106121ec57610100808354040283529160200191612217565b820191906000526020600020905b8154815290600101906020018083116121fa57829003601f168201915b50505091835250506005919091015460ff80821660208401526101008204811660408401526201000082048116606084015263010000008204811660808401526401000000009091041660a0909101529052919050565b60006001600160a01b0382166122d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610620565b506001600160a01b031660009081526003602052604090205490565b60606001805461050290613ba9565b61230e338383612aef565b5050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e0840191906123a290613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546123ce90613ba9565b801561241b5780601f106123f05761010080835404028352916020019161241b565b820191906000526020600020905b8154815290600101906020018083116123fe57829003601f168201915b5050509183525050600882015460209091019060ff166004811115612442576124426135f3565b6004811115612453576124536135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c0909101526101608101516101208201516101408301519197509192506124c09187916106c6565b969891975095945092505050565b6124d66132b9565b60008281526021602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061255c90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461258890613ba9565b80156125d55780601f106125aa576101008083540402835291602001916125d5565b820191906000526020600020905b8154815290600101906020018083116125b857829003601f168201915b5050509183525050600882015460209091019060ff1660048111156125fc576125fc6135f3565b600481111561260d5761260d6135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015292915050565b6126673383612829565b6126835760405162461bcd60e51b815260040161062090613c78565b61268f84848484612bbd565b50505050565b60606126a082612759565b60006126b760408051602081019091526000815290565b905060008151116126d75760405180602001604052806000815250612702565b806126e184612bf0565b6040516020016126f2929190613e4f565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b148061273a57506001600160e01b03198216635b5e139f60e01b145b806104ed57506301ffc9a760e01b6001600160e01b03198316146104ed565b6000818152600260205260409020546001600160a01b03166127b85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610620565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906127f0826112eb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612835836112eb565b9050806001600160a01b0316846001600160a01b0316148061287c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128a05750836001600160a01b031661289584610585565b6001600160a01b0316145b949350505050565b826001600160a01b03166128bb826112eb565b6001600160a01b0316146128e15760405162461bcd60e51b815260040161062090613e7e565b6001600160a01b0382166129435760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610620565b6129508383836001612c83565b826001600160a01b0316612963826112eb565b6001600160a01b0316146129895760405162461bcd60e51b815260040161062090613e7e565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612a24826112eb565b9050612a34816000846001612c83565b612a3d826112eb565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612ac68383612db7565b612ad36000848484612f50565b6106c15760405162461bcd60e51b815260040161062090613ec3565b816001600160a01b0316836001600160a01b031603612b505760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610620565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612bc88484846128a8565b612bd484848484612f50565b61268f5760405162461bcd60e51b815260040161062090613ec3565b60606000612bfd83613051565b600101905060008167ffffffffffffffff811115612c1d57612c1d613a85565b6040519080825280601f01601f191660200182016040528015612c47576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c5157509392505050565b6001811115612cf25760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610620565b816001600160a01b038516612d4e57612d4981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612d71565b836001600160a01b0316856001600160a01b031614612d7157612d718582613129565b6001600160a01b038416612d8d57612d88816131c6565b612db0565b846001600160a01b0316846001600160a01b031614612db057612db08482613275565b5050505050565b6001600160a01b038216612e0d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610620565b6000818152600260205260409020546001600160a01b031615612e725760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610620565b612e80600083836001612c83565b6000818152600260205260409020546001600160a01b031615612ee55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610620565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561304657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f94903390899088908890600401613f15565b6020604051808303816000875af1925050508015612fcf575060408051601f3d908101601f19168201909252612fcc91810190613f48565b60015b61302c573d808015612ffd576040519150601f19603f3d011682016040523d82523d6000602084013e613002565b606091505b5080516000036130245760405162461bcd60e51b815260040161062090613ec3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506128a0565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106130905772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106130bc576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106130da57662386f26fc10000830492506010015b6305f5e10083106130f2576305f5e100830492506008015b612710831061310657612710830492506004015b60648310613118576064830492506002015b600a83106104ed5760010192915050565b600060016131368461226e565b6131409190613bf9565b600083815260076020526040902054909150808214613193576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906131d890600190613bf9565b6000838152600960205260408120546008805493945090928490811061320057613200613cc5565b90600052602060002001549050806008838154811061322157613221613cc5565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061325957613259613f65565b6001900381819060005260206000200160009055905550505050565b60006132808361226e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604080516101e08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082015290610100820190815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b60405180608001604052806133916040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b815260200161339e613416565b81526020016133c0604051806040016040528060008152602001600081525090565b81526040805161014081018252606080825260208281018290529282018190528082018190526080820152600060a0820181905260c0820181905260e08201819052610100820181905261012082015291015290565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff168152602001606081526020016000600281111561346c5761346c6135f3565b8152602001600081525090565b6001600160e01b0319811681146127b857600080fd5b6000602082840312156134a157600080fd5b813561270281613479565b60005b838110156134c75781810151838201526020016134af565b50506000910152565b600081518084526134e88160208601602086016134ac565b601f01601f19169290920160200192915050565b60208152600061270260208301846134d0565b60006020828403121561352157600080fd5b5035919050565b6001600160a01b03811681146127b857600080fd5b6000806040838503121561355057600080fd5b823561355b81613528565b946020939093013593505050565b60008060006060848603121561357e57600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156135aa57600080fd5b83356135b581613528565b925060208401356135c581613528565b929592945050506040919091013590565b6000602082840312156135e857600080fd5b813561270281613528565b634e487b7160e01b600052602160045260246000fd5b60058110613619576136196135f3565b9052565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161365d60608601826001600160a01b03169052565b50608083015161367860808601826001600160a01b03169052565b5060a083015161369360a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136b5828601826134d0565b915050610100808401516136cb82870182613609565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c08084015160ff8116828701525b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561377557603f1988860301845261376385835161361d565b94509285019290850190600101613747565b5092979650505050505050565b60008060006060848603121561379757600080fd5b83356137a281613528565b9250602084013591506040840135600581106137bd57600080fd5b809150509250925092565b600381106127b8576127b86135f3565b613619816137c8565b600061010082516137f1816137c8565b80855250602083015181602086015261380c828601826134d0565b9150506040830151848203604086015261382682826134d0565b91505060018060a01b036060840151166060850152608083015161384f608086018260ff169052565b5060a083015184820360a086015261386782826134d0565b91505060c083015161387c60c08601826137d8565b5060e083015160e08501528091505092915050565b600061014082518185526138a7828601826134d0565b915050602083015184820360208601526138c182826134d0565b915050604083015184820360408601526138db82826134d0565b915050606083015184820360608601526138f582826134d0565b9150506080830151848203608086015261390f82826134d0565b91505060a083015161392660a086018260ff169052565b5060c083015161393b60c086018260ff169052565b5060e083015161395060e086018260ff169052565b506101008381015160ff81168683015250506101208381015160ff811686830152613716565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526139ed6101808501836137e1565b60408601518051610120870152602001516101408601526060860151858203601f190183870152909250613a218382613891565b9695505050505050565b80151581146127b857600080fd5b60008060408385031215613a4c57600080fd5b8235613a5781613528565b91506020830135613a6781613a2b565b809150509250929050565b602081526000612702602083018461361d565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ab157600080fd5b8435613abc81613528565b93506020850135613acc81613528565b925060408501359150606085013567ffffffffffffffff80821115613af057600080fd5b818701915087601f830112613b0457600080fd5b813581811115613b1657613b16613a85565b604051601f8201601f19908116603f01168101908382118183101715613b3e57613b3e613a85565b816040528281528a6020848701011115613b5757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613b8e57600080fd5b8235613b9981613528565b91506020830135613a6781613528565b600181811c90821680613bbd57607f821691505b602082108103613bdd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104ed576104ed613be3565b80820281158282048414176104ed576104ed613be3565b600082613c4057634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613c5957613c596135f3565b91905290565b600060208284031215613c7157600080fd5b5051919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613ced57600080fd5b815161270281613528565b600060018201613d0a57613d0a613be3565b5060010190565b808201808211156104ed576104ed613be3565b600060208284031215613d3657600080fd5b815161270281613a2b565b601f8211156106c157600081815260208120601f850160051c81016020861015613d685750805b601f850160051c820191505b81811015613d8757828155600101613d74565b505050505050565b815167ffffffffffffffff811115613da957613da9613a85565b613dbd81613db78454613ba9565b84613d41565b602080601f831160018114613df25760008415613dda5750858301515b600019600386901b1c1916600185901b178555613d87565b600085815260208120601f198616915b82811015613e2157888601518255948401946001909101908401613e02565b5085821015613e3f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613e618184602088016134ac565b835190830190613e758183602088016134ac565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a21908301846134d0565b600060208284031215613f5a57600080fd5b815161270281613479565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef1e9876afcc3d7edeee6c58be48fafc09fb7213c62d8bc2d5a951fb82ff870864736f6c63430008120033a2646970667358221220e87a9a90f1462967a5a06d20a82772b28fa0236a5ffb9b25b37de55ab645ee8064736f6c63430008120033",
  "deployedBytecode": "0x608060405260043610620000b55760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001df5780638dc6c5f614620001ff578063b187bd261462000224578063e645ab061462000249578063f2fde38b146200029b578063fb598ff714620002c057600080fd5b806311aaf04614620000ba5780633424b8ce14620000fe5780635055149c1462000125578063715018a6146200015f5780637a0e6ad3146200017757806386959b4b14620001ab575b600080fd5b348015620000c757600080fd5b50600254620000e19061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200010b57600080fd5b50620001236200011d36600462000b1f565b620002d7565b005b3480156200013257600080fd5b50620000e16200014436600462000b46565b6000908152600960205260409020546001600160a01b031690565b3480156200016c57600080fd5b5062000123620002f4565b3480156200018457600080fd5b506200019c6200019636600462000b88565b6200030c565b604051620000f5919062000ba8565b348015620001b857600080fd5b50620001d0620001ca36600462000b88565b6200037a565b604051620000f5919062000bee565b348015620001ec57600080fd5b506000546001600160a01b0316620000e1565b3480156200020c57600080fd5b506200019c6200021e36600462000b46565b620003f1565b3480156200023157600080fd5b5060025460ff166040519015158152602001620000f5565b3480156200025657600080fd5b50600254600354600454600554604080516101009095046001600160a01b039081168652938416602086015291831691840191909152166060820152608001620000f5565b348015620002a857600080fd5b5062000123620002ba36600462000b88565b62000453565b62000123620002d136600462000ef7565b620004d6565b620002e162000a56565b6002805460ff1916911515919091179055565b620002fe62000a56565b6200030a600062000ab2565b565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156200036e57602002820191906000526020600020905b81548152602001906001019080831162000359575b50505050509050919050565b6001600160a01b0381166000908152600860209081526040918290208054835181840281018401909452808452606093928301828280156200036e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620003c75750505050509050919050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156200036e5760200282019190600052602060002090815481526020019060010190808311620003595750505050509050919050565b6200045d62000a56565b6001600160a01b038116620004c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620004d38162000ab2565b50565b60025460ff1615620004fb57604051636e98ced160e11b815260040160405180910390fd5b600480546040516370a0823160e01b8152339281019290925260009182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200054a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057091906200104c565b60035460405163288c314960e21b81523360048201529290911192506000916001600160a01b039091169063a230c52490602401602060405180830381865afa158015620005c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e8919062001066565b905081158015620005f7575080155b156200061657604051633326779f60e01b815260040160405180910390fd5b60018560c00151600281111562000631576200063162001086565b03620006db576004805460e08701516040516331a9108f60e11b8152928301526000916001600160a01b0390911690636352211e90602401602060405180830381865afa15801562000687573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ad91906200109c565b90506001600160a01b0381163314620006d957604051631159931760e11b815260040160405180910390fd5b505b600254855160405163abe9836360e01b815260009261010090046001600160a01b03169163abe9836391620007149190600401620010ea565b602060405180830381865afa15801562000732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075891906200104c565b9050803410156200077c576040516310b4b76f60e21b815260040160405180910390fd5b84514211156200079f576040516394881aef60e01b815260040160405180910390fd5b620007ae600180546001019055565b6000620007ba60015490565b60055460025460405192935060009284928b928b928b926001600160a01b0390811692610100900416903390620007f19062000b02565b6200080397969594939291906200123b565b604051809103906000f08015801562000820573d6000803e3d6000fd5b50905060018860c0015160028111156200083e576200083e62001086565b036200086b5760e08801516000908152600760209081526040822080546001810182559083529120018290555b6060880180516001600160a01b0390811660009081526008602090815260408083208054600180820183559185528385200180548887166001600160a01b031991821681179092558986526009855283862080549091168217905533808652600685528386208054938401815586528486209092018990559551928d015191516323b872dd60e01b815260048101919091526024810195909552604485015290929116906323b872dd906064016020604051808303816000875af115801562000938573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200095e919062001066565b9050806200097f5760405163fe01ddbd60e01b815260040160405180910390fd5b60025460405160009161010090046001600160a01b03169034908381818185875af1925050503d8060008114620009d3576040519150601f19603f3d011682016040523d82523d6000602084013e620009d8565b606091505b5050905080620009fb57604051633ec4aca960e21b815260040160405180910390fd5b6060808b0151604080518781526001600160a01b038088166020830152909216908201527fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d910160405180910390a150505050505050505050565b6000546001600160a01b031633146200030a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620004bf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614bc7806200137083390190565b8015158114620004d357600080fd5b60006020828403121562000b3257600080fd5b813562000b3f8162000b10565b9392505050565b60006020828403121562000b5957600080fd5b5035919050565b6001600160a01b0381168114620004d357600080fd5b803562000b838162000b60565b919050565b60006020828403121562000b9b57600080fd5b813562000b3f8162000b60565b6020808252825182820181905260009190848201906040850190845b8181101562000be25783518352928401929184019160010162000bc4565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000be25783516001600160a01b03168352928401929184019160010162000c0a565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171562000c6e5762000c6e62000c31565b60405290565b604051610100810167ffffffffffffffff8111828210171562000c6e5762000c6e62000c31565b80356003811062000b8357600080fd5b600082601f83011262000cbd57600080fd5b813567ffffffffffffffff8082111562000cdb5762000cdb62000c31565b604051601f8301601f19908116603f0116810190828211818310171562000d065762000d0662000c31565b8160405283815286602085880101111562000d2057600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811462000b8357600080fd5b60006040828403121562000d6557600080fd5b6040516040810181811067ffffffffffffffff8211171562000d8b5762000d8b62000c31565b604052823581526020928301359281019290925250919050565b6000610140828403121562000db957600080fd5b62000dc362000c47565b9050813567ffffffffffffffff8082111562000dde57600080fd5b62000dec8583860162000cab565b8352602084013591508082111562000e0357600080fd5b62000e118583860162000cab565b6020840152604084013591508082111562000e2b57600080fd5b62000e398583860162000cab565b6040840152606084013591508082111562000e5357600080fd5b62000e618583860162000cab565b6060840152608084013591508082111562000e7b57600080fd5b5062000e8a8482850162000cab565b60808301525062000e9e60a0830162000d40565b60a082015262000eb160c0830162000d40565b60c082015262000ec460e0830162000d40565b60e082015261010062000ed981840162000d40565b9082015261012062000eed83820162000d40565b9082015292915050565b60008060006080848603121562000f0d57600080fd5b833567ffffffffffffffff8082111562000f2657600080fd5b90850190610100828803121562000f3c57600080fd5b62000f4662000c74565b62000f518362000c9b565b815260208301358281111562000f6657600080fd5b62000f748982860162000cab565b60208301525060408301358281111562000f8d57600080fd5b62000f9b8982860162000cab565b60408301525062000faf6060840162000b76565b606082015262000fc26080840162000d40565b608082015260a08301358281111562000fda57600080fd5b62000fe88982860162000cab565b60a08301525062000ffc60c0840162000c9b565b60c082015260e0838101359082015294506200101c876020880162000d52565b935060608601359150808211156200103357600080fd5b50620010428682870162000da5565b9150509250925092565b6000602082840312156200105f57600080fd5b5051919050565b6000602082840312156200107957600080fd5b815162000b3f8162000b10565b634e487b7160e01b600052602160045260246000fd5b600060208284031215620010af57600080fd5b815162000b3f8162000b60565b60038110620004d357634e487b7160e01b600052602160045260246000fd5b620010e681620010bc565b9052565b60208101620010f983620010bc565b91905290565b6000815180845260005b81811015620011275760208185018101518683018201520162001109565b506000602082860101526020601f19601f83011685010191505092915050565b600061014082518185526200115f82860182620010ff565b915050602083015184820360208601526200117b8282620010ff565b91505060408301518482036040860152620011978282620010ff565b91505060608301518482036060860152620011b38282620010ff565b91505060808301518482036080860152620011cf8282620010ff565b91505060a0830151620011e760a086018260ff169052565b5060c0830151620011fd60c086018260ff169052565b5060e08301516200121360e086018260ff169052565b506101008381015160ff90811691860191909152610120938401511692909301919091525090565b6000610100898352806020840152620012588184018a51620010db565b60208901518161012085015262001274610200850182620010ff565b915050604089015160ff198085840301610140860152620012968383620010ff565b925060608b01519150620012b66101608601836001600160a01b03169052565b60808b015160ff1661018086015260a08b01518584039091016101a08601529050620012e38282620010ff565b91505060c0890151620012fb6101c0850182620010db565b5060e08901516101e0840152875160408401526020880151606084015282810360808401526200132c818862001147565b9150506200134560a08301866001600160a01b03169052565b6001600160a01b03841660c08301526001600160a01b03831660e08301529897505050505050505056fe60c06040523480156200001157600080fd5b5060405162004bc738038062004bc783398101604081905262000034916200089b565b6020860151604087015160006200004c838262000ac6565b5060016200005b828262000ac6565b50505062015180601e62000070919062000b92565b60008052602080527f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbe95560a084015160ff167f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbea5583517f29ab76e7ca72530a8284597fb76b039d796325740b21528d71ade454c6f2dbeb90620000f4908262000ac6565b506200010562015180605a62000b92565b600160005260208080527f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ea9190915560c085015160ff167f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344eb558401517f156774b33c8bc7cb83eda4cbc43b36c7c9490ff8913c488ccd5132cfc71344ec906200018f908262000ac6565b50620001a06201518060b462000b92565b6002600052602080527f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d75560e084015160ff167f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d85560408401517f2c5f9a2e204d4db70ad0f9037679e33061b4c51a386497019bee969e16be28d99062000228908262000ac6565b506200023a6201518061010e62000b92565b6003600052602080527f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543abf5561010084015160ff167f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac05560608401517f1ae1eab41a4db68d73559dd6c8b7ac16a4bc819634768486d35edbff05543ac190620002c3908262000ac6565b50620002d56201518061016d62000b92565b6004600052602080527faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fa5561012084015160ff167faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fb5560808401517faf69f7ec271f94daa686978b3a96acf46914b99f1828a3f8265276d5eab630fc906200035e908262000ac6565b50855160118054889290829060ff1916600183600281111562000385576200038562000bbe565b021790555060208201516001820190620003a0908262000ac6565b5060408201516002820190620003b7908262000ac6565b506060820151600382018054608085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560a0820151600482019062000408908262000ac6565b5060c082015160058201805460ff191660018360028111156200042f576200042f62000bbe565b021790555060e091909101516006909101558451601855602085015160195583518490601a90819062000463908262000ac6565b50602082015160018201906200047a908262000ac6565b506040820151600282019062000491908262000ac6565b5060608201516003820190620004a8908262000ac6565b5060808201516004820190620004bf908262000ac6565b5060a0828101516005909201805460c085015160e0860151610100808801516101209098015160ff9081166401000000000260ff60201b1999821663010000000263ff0000001994831662010000029490941663ffff00001995831690930261ffff199096169190981617939093179190911691909117179390931691909117909155600a97909755601080546001600160a01b039283166001600160a01b031991821617909155600b805490911630179055602090940151600c559083166080529091169092525062000bd49050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715620005cc57620005cc62000590565b60405290565b60405161010081016001600160401b0381118282101715620005cc57620005cc62000590565b604051601f8201601f191681016001600160401b038111828210171562000623576200062362000590565b604052919050565b8051600381106200063b57600080fd5b919050565b600082601f8301126200065257600080fd5b81516001600160401b038111156200066e576200066e62000590565b602062000684601f8301601f19168201620005f8565b82815285828487010111156200069957600080fd5b60005b83811015620006b95785810183015182820184015282016200069c565b506000928101909101919091529392505050565b80516001600160a01b03811681146200063b57600080fd5b805160ff811681146200063b57600080fd5b6000604082840312156200070a57600080fd5b604080519081016001600160401b03811182821017156200072f576200072f62000590565b604052825181526020928301519281019290925250919050565b600061014082840312156200075d57600080fd5b62000767620005a6565b82519091506001600160401b03808211156200078257600080fd5b620007908583860162000640565b83526020840151915080821115620007a757600080fd5b620007b58583860162000640565b60208401526040840151915080821115620007cf57600080fd5b620007dd8583860162000640565b60408401526060840151915080821115620007f757600080fd5b620008058583860162000640565b606084015260808401519150808211156200081f57600080fd5b506200082e8482850162000640565b6080830152506200084260a08301620006e5565b60a08201526200085560c08301620006e5565b60c08201526200086860e08301620006e5565b60e08201526101006200087d818401620006e5565b9082015261012062000891838201620006e5565b9082015292915050565b600080600080600080600061010080898b031215620008b957600080fd5b885160208a01519098506001600160401b0380821115620008d957600080fd5b818b01915082828d031215620008ee57600080fd5b620008f8620005d2565b925062000905826200062b565b83526020820151818111156200091a57600080fd5b620009288d82850162000640565b6020850152506040820151818111156200094157600080fd5b6200094f8d82850162000640565b6040850152506200096360608301620006cd565b60608401526200097660808301620006e5565b608084015260a0820151818111156200098e57600080fd5b6200099c8d82850162000640565b60a085015250620009b060c083016200062b565b60c084015260e082015160e0840152829850620009d18c60408d01620006f7565b975060808b0151925080831115620009e857600080fd5b5050620009f88a828b0162000749565b94505062000a0960a08901620006cd565b925062000a1960c08901620006cd565b915062000a2960e08901620006cd565b905092959891949750929550565b600181811c9082168062000a4c57607f821691505b60208210810362000a6d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ac157600081815260208120601f850160051c8101602086101562000a9c5750805b601f850160051c820191505b8181101562000abd5782815560010162000aa8565b5050505b505050565b81516001600160401b0381111562000ae25762000ae262000590565b62000afa8162000af3845462000a37565b8462000a73565b602080601f83116001811462000b32576000841562000b195750858301515b600019600386901b1c1916600185901b17855562000abd565b600085815260208120601f198616915b8281101562000b635788860151825594840194600190910190840162000b42565b508582101562000b825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141762000bb857634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b60805160a051613fb162000c16600039600081816106cc015261101e015260008181610a83015281816110c10152818161180f01526118a90152613fb16000f3fe6080604052600436106101405760003560e01c8063608e4dd0116100b6578063a22cb4651161006f578063a22cb465146103a9578063a3a43931146103c9578063b09afec114610412578063b88d4fde1461043f578063c87b56dd1461045f578063e985e9c51461047f57600080fd5b8063608e4dd0146102ff5780636352211e14610312578063637888c01461033257806367c897fe1461035257806370a082311461037457806395d89b411461039457600080fd5b80631df025c6116101085780631df025c61461021557806323b872dd146102525780632f745c591461027257806342842e0e146102925780634f6ccce7146102b2578063519dc8d2146102d257600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d457806318160ddd146101f6575b600080fd5b34801561015157600080fd5b5061016561016036600461348f565b6104c8565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104f3565b60405161017191906134fc565b3480156101a857600080fd5b506101bc6101b736600461350f565b610585565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef36600461353d565b6105ac565b005b34801561020257600080fd5b506008545b604051908152602001610171565b34801561022157600080fd5b50610235610230366004613569565b6106c6565b6040805193845260ff909216602084015290820152606001610171565b34801561025e57600080fd5b506101f461026d366004613595565b6108e9565b34801561027e57600080fd5b5061020761028d36600461353d565b61091a565b34801561029e57600080fd5b506101f46102ad366004613595565b6109b0565b3480156102be57600080fd5b506102076102cd36600461350f565b6109cb565b3480156102de57600080fd5b506102f26102ed3660046135d6565b610a5e565b6040516101719190613720565b6101f461030d36600461350f565b610d5a565b34801561031e57600080fd5b506101bc61032d36600461350f565b6112eb565b34801561033e57600080fd5b506101f461034d366004613782565b61134b565b34801561035e57600080fd5b50610367611c4d565b6040516101719190613976565b34801561038057600080fd5b5061020761038f3660046135d6565b61226e565b3480156103a057600080fd5b5061018f6122f4565b3480156103b557600080fd5b506101f46103c4366004613a39565b612303565b3480156103d557600080fd5b506103e96103e436600461350f565b612312565b6040516101719493929190938452602084019290925260ff166040830152606082015260800190565b34801561041e57600080fd5b5061043261042d36600461350f565b6124ce565b6040516101719190613a72565b34801561044b57600080fd5b506101f461045a366004613a9b565b61265d565b34801561046b57600080fd5b5061018f61047a36600461350f565b612695565b34801561048b57600080fd5b5061016561049a366004613b7b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806104ed57506104ed82612709565b92915050565b60606000805461050290613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461052e90613ba9565b801561057b5780601f106105505761010080835404028352916020019161057b565b820191906000526020600020905b81548152906001019060200180831161055e57829003601f168201915b5050505050905090565b600061059082612759565b506000908152600460205260409020546001600160a01b031690565b60006105b7826112eb565b9050806001600160a01b0316836001600160a01b0316036106295760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106455750610645813361049a565b6106b75760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610620565b6106c183836127bb565b505050565b600080807f0000000000000000000000000000000000000000000000000000000000000000816106f68787613bf9565b905060006107048842613bf9565b9050600082610714836064613c0c565b61071e9190613c23565b905060328110156107a457604051633b6a8f1d60e01b8152600097508796506001600160a01b03851690633b6a8f1d9061075c908990600401613c45565b602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d9190613c5f565b94506108dc565b603281101580156107b55750605081105b1561080457601e955060646107ca878c613c0c565b6107d49190613c23565b604051633b6a8f1d60e01b81529097506001600160a01b03851690633b6a8f1d9061075c90600190600401613c45565b605081101580156108155750606481105b156108645760329550606461082a8b88613c0c565b6108349190613c23565b604051633b6a8f1d60e01b81529097506001600160a01b03851690633b6a8f1d9061075c90600290600401613c45565b604051633b6a8f1d60e01b81528a9750606496506001600160a01b03851690633b6a8f1d9061089890600390600401613c45565b602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190613c5f565b94505b5050505093509350939050565b6108f33382612829565b61090f5760405162461bcd60e51b815260040161062090613c78565b6106c18383836128a8565b60006109258361226e565b82106109875760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610620565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6106c18383836040518060200160405280600081525061265d565b60006109d660085490565b8210610a395760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610620565b60088281548110610a4c57610a4c613cc5565b90600052602060002001549050919050565b604051631604f1c960e11b81526001600160a01b0382811660048301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613cdb565b90506001600160a01b038116610b175760405163089c85e960e41b815260040160405180910390fd5b6000610b228261226e565b905060008167ffffffffffffffff811115610b3f57610b3f613a85565b604051908082528060200260200182016040528015610b7857816020015b610b656132b9565b815260200190600190039081610b5d5790505b50905060005b82811015610d51576000610b92858361091a565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c08201526007820180549495509293909260e0840191610c1d90613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990613ba9565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b5050509183525050600882015460209091019060ff166004811115610cbd57610cbd6135f3565b6004811115610cce57610cce6135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015284519091508190859085908110610d3157610d31613cc5565b602002602001018190525050508080610d4990613cf8565b915050610b7e565b50949350505050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c082015260078201805491929160e084019190610de290613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0e90613ba9565b8015610e5b5780601f10610e3057610100808354040283529160200191610e5b565b820191906000526020600020905b815481529060010190602001808311610e3e57829003601f168201915b5050509183525050600882015460209091019060ff166004811115610e8257610e826135f3565b6004811115610e9357610e936135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015261016081015161012082015161014083015192935060009283928392610f02926106c6565b92509250925080341015610f2957604051634421b06760e11b815260040160405180910390fd5b83608001516001600160a01b0316336001600160a01b031614610f5f57604051631ba0d8a960e21b815260040160405180910390fd5b836101600151600003610f8557604051635640214f60e11b815260040160405180910390fd5b83610180015115610fa957604051633b2d84eb60e01b815260040160405180910390fd5b6000858152602160205260408120600c81018054600160ff1991821617909155600d8201869055600e909101805490911660ff8516179055610160850151610ff2908590613bf9565b905080600a60020160008282546110099190613d11565b90915550506040516000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169034908381818185875af1925050503d8060008114611079576040519150601f19603f3d011682016040523d82523d6000602084013e61107e565b606091505b50509050806110a05760405163b3dd313360e01b815260040160405180910390fd5b6110a987612a19565b604051631604f1c960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632c09e39290602401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190613cdb565b6040516357fecd5d60e11b8152306004820152602481018a90529091506000906001600160a01b0383169063affd9aba906044016020604051808303816000875af1158015611187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ab9190613d24565b9050806111cb576040516318948a9560e21b815260040160405180910390fd5b6060880151608089015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018a905291169063a9059cbb906044016020604051808303816000875af1158015611224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112489190613d24565b9050806112685760405163c1910fa360e01b815260040160405180910390fd5b7f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d8860200151338a604001518b610100015160048111156112ab576112ab6135f3565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080810189905260a00160405180910390a1505050505050505050565b6000818152600260205260408120546001600160a01b0316806104ed5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610620565b6040805160e081018252600a548152600b546001600160a01b03908116602080840191909152600c5483850152600d546060840152600e546080840152600f5460a084015260105490911660c0830152825180840184526018548152601954918101919091528251610100810190935260118054929391926000929190829060ff1660028111156113de576113de6135f3565b60028111156113ef576113ef6135f3565b815260200160018201805461140390613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461142f90613ba9565b801561147c5780601f106114515761010080835404028352916020019161147c565b820191906000526020600020905b81548152906001019060200180831161145f57829003601f168201915b5050505050815260200160028201805461149590613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546114c190613ba9565b801561150e5780601f106114e35761010080835404028352916020019161150e565b820191906000526020600020905b8154815290600101906020018083116114f157829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff16604082015260048201805460609092019161154e90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461157a90613ba9565b80156115c75780601f1061159c576101008083540402835291602001916115c7565b820191906000526020600020905b8154815290600101906020018083116115aa57829003601f168201915b5050509183525050600582015460209091019060ff1660028111156115ee576115ee6135f3565b60028111156115ff576115ff6135f3565b81526020016006820154815250509050600060206000866004811115611627576116276135f3565b6004811115611638576116386135f3565b8152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805461167590613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546116a190613ba9565b80156116ee5780601f106116c3576101008083540402835291602001916116ee565b820191906000526020600020905b8154815290600101906020018083116116d157829003601f168201915b5050505050815250509050826000015142101561171e5760405163a9905ea160e01b815260040160405180910390fd5b8060200151600003611743576040516332f71a5f60e01b815260040160405180910390fd5b600060648260200151886117579190613c0c565b6117619190613c23565b9050808560400151101561178857604051630207b16560e01b815260040160405180910390fd5b80600a600201600082825461179d9190613bf9565b9091555050600d80548891906000906117b7908490613d11565b9091555050600e80549060006117cc83613cf8565b91905055506000600a600501600081546117e590613cf8565b9182905550604051631604f1c960e11b81526001600160a01b038b811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690632c09e39290602401602060405180830381865afa158015611856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187a9190613cdb565b90506001600160a01b038116611919576040516331b77b8960e21b81526001600160a01b038b811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c6ddee24906024016020604051808303816000875af11580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190613cdb565b90505b604051806101e00160405280306001600160a01b03168152602001886000015181526020018a815260200186606001516001600160a01b031681526020018b6001600160a01b03168152602001826001600160a01b0316815260200183815260200185604001518152602001896004811115611997576119976135f3565b81526020014281526020018560000151426119b29190613d11565b8152602080820186905260006040808401829052606080850183905260809485018390528783526021845291819020855181546001600160a01b03199081166001600160a01b0392831617835594870151600183015591860151600282015591850151600383018054851691831691909117905592840151600482018054841691851691909117905560a0840151600582018054909316931692909217905560c0820151600682015560e08201516007820190611a6f9082613d8f565b5061010082015160088201805460ff19166001836004811115611a9457611a946135f3565b02179055506101208201516009820155610140820151600a820155610160820151600b820155610180820151600c8201805491151560ff199283161790556101a0830151600d8301556101c090920151600e909101805460ff9092169190921617905560608501516040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018c905260009216906323b872dd906064016020604051808303816000875af1158015611b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b779190613d24565b905080611b9757604051637f7090f160e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193060601b166020820152611bd19083908590603401604051602081830303815290604052612abc565b87517fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa90848d8d8d6004811115611c0a57611c0a6135f3565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a15050505050505050505050565b611c55613334565b6040805161016081018252600a5460808201908152600b546001600160a01b0390811660a0840152600c5460c0840152600d5460e0840152600e5461010080850191909152600f5461012085015260105490911661014084015290825282519081019092526011805491926020840192909190829060ff166002811115611cde57611cde6135f3565b6002811115611cef57611cef6135f3565b8152602001600182018054611d0390613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2f90613ba9565b8015611d7c5780601f10611d5157610100808354040283529160200191611d7c565b820191906000526020600020905b815481529060010190602001808311611d5f57829003601f168201915b50505050508152602001600282018054611d9590613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc190613ba9565b8015611e0e5780601f10611de357610100808354040283529160200191611e0e565b820191906000526020600020905b815481529060010190602001808311611df157829003601f168201915b505050918352505060038201546001600160a01b0381166020830152600160a01b900460ff166040820152600482018054606090920191611e4e90613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7a90613ba9565b8015611ec75780601f10611e9c57610100808354040283529160200191611ec7565b820191906000526020600020905b815481529060010190602001808311611eaa57829003601f168201915b5050509183525050600582015460209091019060ff166002811115611eee57611eee6135f3565b6002811115611eff57611eff6135f3565b815260200160068201548152505081526020016018604051806040016040529081600082015481526020016001820154815250508152602001601a60405180610140016040529081600082018054611f5690613ba9565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8290613ba9565b8015611fcf5780601f10611fa457610100808354040283529160200191611fcf565b820191906000526020600020905b815481529060010190602001808311611fb257829003601f168201915b50505050508152602001600182018054611fe890613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461201490613ba9565b80156120615780601f1061203657610100808354040283529160200191612061565b820191906000526020600020905b81548152906001019060200180831161204457829003601f168201915b5050505050815260200160028201805461207a90613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546120a690613ba9565b80156120f35780601f106120c8576101008083540402835291602001916120f3565b820191906000526020600020905b8154815290600101906020018083116120d657829003601f168201915b5050505050815260200160038201805461210c90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461213890613ba9565b80156121855780601f1061215a57610100808354040283529160200191612185565b820191906000526020600020905b81548152906001019060200180831161216857829003601f168201915b5050505050815260200160048201805461219e90613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546121ca90613ba9565b80156122175780601f106121ec57610100808354040283529160200191612217565b820191906000526020600020905b8154815290600101906020018083116121fa57829003601f168201915b50505091835250506005919091015460ff80821660208401526101008204811660408401526201000082048116606084015263010000008204811660808401526401000000009091041660a0909101529052919050565b60006001600160a01b0382166122d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610620565b506001600160a01b031660009081526003602052604090205490565b60606001805461050290613ba9565b61230e338383612aef565b5050565b600081815260216020908152604080832081516101e08101835281546001600160a01b039081168252600183015494820194909452600282015492810192909252600381015483166060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782018054849384938493849391929160e0840191906123a290613ba9565b80601f01602080910402602001604051908101604052809291908181526020018280546123ce90613ba9565b801561241b5780601f106123f05761010080835404028352916020019161241b565b820191906000526020600020905b8154815290600101906020018083116123fe57829003601f168201915b5050509183525050600882015460209091019060ff166004811115612442576124426135f3565b6004811115612453576124536135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c0909101526101608101516101208201516101408301519197509192506124c09187916106c6565b969891975095945092505050565b6124d66132b9565b60008281526021602090815260409182902082516101e08101845281546001600160a01b039081168252600183015493820193909352600282015493810193909352600381015482166060840152600481015482166080840152600581015490911660a0830152600681015460c083015260078101805460e08401919061255c90613ba9565b80601f016020809104026020016040519081016040528092919081815260200182805461258890613ba9565b80156125d55780601f106125aa576101008083540402835291602001916125d5565b820191906000526020600020905b8154815290600101906020018083116125b857829003601f168201915b5050509183525050600882015460209091019060ff1660048111156125fc576125fc6135f3565b600481111561260d5761260d6135f3565b815260098201546020820152600a8201546040820152600b8201546060820152600c82015460ff90811615156080830152600d83015460a0830152600e9092015490911660c09091015292915050565b6126673383612829565b6126835760405162461bcd60e51b815260040161062090613c78565b61268f84848484612bbd565b50505050565b60606126a082612759565b60006126b760408051602081019091526000815290565b905060008151116126d75760405180602001604052806000815250612702565b806126e184612bf0565b6040516020016126f2929190613e4f565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b148061273a57506001600160e01b03198216635b5e139f60e01b145b806104ed57506301ffc9a760e01b6001600160e01b03198316146104ed565b6000818152600260205260409020546001600160a01b03166127b85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610620565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906127f0826112eb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612835836112eb565b9050806001600160a01b0316846001600160a01b0316148061287c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128a05750836001600160a01b031661289584610585565b6001600160a01b0316145b949350505050565b826001600160a01b03166128bb826112eb565b6001600160a01b0316146128e15760405162461bcd60e51b815260040161062090613e7e565b6001600160a01b0382166129435760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610620565b6129508383836001612c83565b826001600160a01b0316612963826112eb565b6001600160a01b0316146129895760405162461bcd60e51b815260040161062090613e7e565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612a24826112eb565b9050612a34816000846001612c83565b612a3d826112eb565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b612ac68383612db7565b612ad36000848484612f50565b6106c15760405162461bcd60e51b815260040161062090613ec3565b816001600160a01b0316836001600160a01b031603612b505760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610620565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612bc88484846128a8565b612bd484848484612f50565b61268f5760405162461bcd60e51b815260040161062090613ec3565b60606000612bfd83613051565b600101905060008167ffffffffffffffff811115612c1d57612c1d613a85565b6040519080825280601f01601f191660200182016040528015612c47576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084612c5157509392505050565b6001811115612cf25760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610620565b816001600160a01b038516612d4e57612d4981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612d71565b836001600160a01b0316856001600160a01b031614612d7157612d718582613129565b6001600160a01b038416612d8d57612d88816131c6565b612db0565b846001600160a01b0316846001600160a01b031614612db057612db08482613275565b5050505050565b6001600160a01b038216612e0d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610620565b6000818152600260205260409020546001600160a01b031615612e725760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610620565b612e80600083836001612c83565b6000818152600260205260409020546001600160a01b031615612ee55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610620565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561304657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f94903390899088908890600401613f15565b6020604051808303816000875af1925050508015612fcf575060408051601f3d908101601f19168201909252612fcc91810190613f48565b60015b61302c573d808015612ffd576040519150601f19603f3d011682016040523d82523d6000602084013e613002565b606091505b5080516000036130245760405162461bcd60e51b815260040161062090613ec3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506128a0565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106130905772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106130bc576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106130da57662386f26fc10000830492506010015b6305f5e10083106130f2576305f5e100830492506008015b612710831061310657612710830492506004015b60648310613118576064830492506002015b600a83106104ed5760010192915050565b600060016131368461226e565b6131409190613bf9565b600083815260076020526040902054909150808214613193576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906131d890600190613bf9565b6000838152600960205260408120546008805493945090928490811061320057613200613cc5565b90600052602060002001549050806008838154811061322157613221613cc5565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061325957613259613f65565b6001900381819060005260206000200160009055905550505050565b60006132808361226e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604080516101e08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082015290610100820190815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b60405180608001604052806133916040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b815260200161339e613416565b81526020016133c0604051806040016040528060008152602001600081525090565b81526040805161014081018252606080825260208281018290529282018190528082018190526080820152600060a0820181905260c0820181905260e08201819052610100820181905261012082015291015290565b6040805161010081019091528060008152602001606081526020016060815260200160006001600160a01b03168152602001600060ff168152602001606081526020016000600281111561346c5761346c6135f3565b8152602001600081525090565b6001600160e01b0319811681146127b857600080fd5b6000602082840312156134a157600080fd5b813561270281613479565b60005b838110156134c75781810151838201526020016134af565b50506000910152565b600081518084526134e88160208601602086016134ac565b601f01601f19169290920160200192915050565b60208152600061270260208301846134d0565b60006020828403121561352157600080fd5b5035919050565b6001600160a01b03811681146127b857600080fd5b6000806040838503121561355057600080fd5b823561355b81613528565b946020939093013593505050565b60008060006060848603121561357e57600080fd5b505081359360208301359350604090920135919050565b6000806000606084860312156135aa57600080fd5b83356135b581613528565b925060208401356135c581613528565b929592945050506040919091013590565b6000602082840312156135e857600080fd5b813561270281613528565b634e487b7160e01b600052602160045260246000fd5b60058110613619576136196135f3565b9052565b80516001600160a01b0316825260006101e06020830151602085015260408301516040850152606083015161365d60608601826001600160a01b03169052565b50608083015161367860808601826001600160a01b03169052565b5060a083015161369360a08601826001600160a01b03169052565b5060c083015160c085015260e08301518160e08601526136b5828601826134d0565b915050610100808401516136cb82870182613609565b5050610120838101519085015261014080840151908501526101608084015190850152610180808401511515908501526101a080840151908501526101c08084015160ff8116828701525b5090949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561377557603f1988860301845261376385835161361d565b94509285019290850190600101613747565b5092979650505050505050565b60008060006060848603121561379757600080fd5b83356137a281613528565b9250602084013591506040840135600581106137bd57600080fd5b809150509250925092565b600381106127b8576127b86135f3565b613619816137c8565b600061010082516137f1816137c8565b80855250602083015181602086015261380c828601826134d0565b9150506040830151848203604086015261382682826134d0565b91505060018060a01b036060840151166060850152608083015161384f608086018260ff169052565b5060a083015184820360a086015261386782826134d0565b91505060c083015161387c60c08601826137d8565b5060e083015160e08501528091505092915050565b600061014082518185526138a7828601826134d0565b915050602083015184820360208601526138c182826134d0565b915050604083015184820360408601526138db82826134d0565b915050606083015184820360608601526138f582826134d0565b9150506080830151848203608086015261390f82826134d0565b91505060a083015161392660a086018260ff169052565b5060c083015161393b60c086018260ff169052565b5060e083015161395060e086018260ff169052565b506101008381015160ff81168683015250506101208381015160ff811686830152613716565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e08601525050506020830151610160806101008501526139ed6101808501836137e1565b60408601518051610120870152602001516101408601526060860151858203601f190183870152909250613a218382613891565b9695505050505050565b80151581146127b857600080fd5b60008060408385031215613a4c57600080fd5b8235613a5781613528565b91506020830135613a6781613a2b565b809150509250929050565b602081526000612702602083018461361d565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613ab157600080fd5b8435613abc81613528565b93506020850135613acc81613528565b925060408501359150606085013567ffffffffffffffff80821115613af057600080fd5b818701915087601f830112613b0457600080fd5b813581811115613b1657613b16613a85565b604051601f8201601f19908116603f01168101908382118183101715613b3e57613b3e613a85565b816040528281528a6020848701011115613b5757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613b8e57600080fd5b8235613b9981613528565b91506020830135613a6781613528565b600181811c90821680613bbd57607f821691505b602082108103613bdd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104ed576104ed613be3565b80820281158282048414176104ed576104ed613be3565b600082613c4057634e487b7160e01b600052601260045260246000fd5b500490565b6020810160048310613c5957613c596135f3565b91905290565b600060208284031215613c7157600080fd5b5051919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613ced57600080fd5b815161270281613528565b600060018201613d0a57613d0a613be3565b5060010190565b808201808211156104ed576104ed613be3565b600060208284031215613d3657600080fd5b815161270281613a2b565b601f8211156106c157600081815260208120601f850160051c81016020861015613d685750805b601f850160051c820191505b81811015613d8757828155600101613d74565b505050505050565b815167ffffffffffffffff811115613da957613da9613a85565b613dbd81613db78454613ba9565b84613d41565b602080601f831160018114613df25760008415613dda5750858301515b600019600386901b1c1916600185901b178555613d87565b600085815260208120601f198616915b82811015613e2157888601518255948401946001909101908401613e02565b5085821015613e3f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351613e618184602088016134ac565b835190830190613e758183602088016134ac565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a21908301846134d0565b600060208284031215613f5a57600080fd5b815161270281613479565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef1e9876afcc3d7edeee6c58be48fafc09fb7213c62d8bc2d5a951fb82ff870864736f6c63430008120033a2646970667358221220e87a9a90f1462967a5a06d20a82772b28fa0236a5ffb9b25b37de55ab645ee8064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4243,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_projectsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2021_storage"
      },
      {
        "astId": 4246,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_isPaused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4248,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_campaignFeeManager",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4250,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_pmMembershipManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4252,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_pmTeamManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4254,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_creatorManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4259,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_poolsOfAUser",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4264,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_poolsOfATeam",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4269,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_stakingPoolsByToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4273,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "s_stakingPoolByID",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_struct(Counter)2021_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2020,
            "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}