{
  "address": "0x98f7D223777d0e495ee2f630e50b6b1b89A74fEE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICreatorManager",
          "name": "_creatorManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "Poolcreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectSymbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "teamDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectCover",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectAvatar",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "website",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "twitter",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "facebook",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "telegram",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "discord",
                  "type": "string"
                }
              ],
              "internalType": "struct StakingLibrary.SocialHandles",
              "name": "socialHandles",
              "type": "tuple"
            }
          ],
          "internalType": "struct StakingLibrary.ProjectInfo",
          "name": "projectInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingLibrary.RewardPoolInfo",
          "name": "rewardPoolInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "image_3_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_6_months",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image_12_months",
              "type": "string"
            }
          ],
          "internalType": "struct StakingLibrary.Images",
          "name": "images",
          "type": "tuple"
        }
      ],
      "name": "createAStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorManager",
      "outputs": [
        {
          "internalType": "contract ICreatorManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPoolByID",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPoolsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3871ad2259c9edf46265eea8c4f13faff791dd769e46f40da63568d6b2173060",
  "receipt": {
    "to": null,
    "from": "0xE813d775f33a97BDA25D71240525C724423D4Cd0",
    "contractAddress": "0x98f7D223777d0e495ee2f630e50b6b1b89A74fEE",
    "transactionIndex": 1,
    "gasUsed": "5425395",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000800000000100000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000100000000000000000000000000000000000000000",
    "blockHash": "0x822d3aaae62bb8991f0fe423aebfb68068d7292694b538b2b96ca0a2378450d5",
    "transactionHash": "0x3871ad2259c9edf46265eea8c4f13faff791dd769e46f40da63568d6b2173060",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11421589,
        "transactionHash": "0x3871ad2259c9edf46265eea8c4f13faff791dd769e46f40da63568d6b2173060",
        "address": "0x98f7D223777d0e495ee2f630e50b6b1b89A74fEE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e813d775f33a97bda25d71240525c724423d4cd0"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x822d3aaae62bb8991f0fe423aebfb68068d7292694b538b2b96ca0a2378450d5"
      }
    ],
    "blockNumber": 11421589,
    "cumulativeGasUsed": "5720037",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2B64DC525a7D61be41ab546a97d70DB057D545D1"
  ],
  "numDeployments": 3,
  "solcInputHash": "368864b5c65ce605d7a63c9d9df496aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICreatorManager\",\"name\":\"_creatorManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Poolcreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectCover\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectAvatar\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facebook\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"discord\",\"type\":\"string\"}],\"internalType\":\"struct StakingLibrary.SocialHandles\",\"name\":\"socialHandles\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingLibrary.ProjectInfo\",\"name\":\"projectInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image_3_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_6_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_12_months\",\"type\":\"string\"}],\"internalType\":\"struct StakingLibrary.Images\",\"name\":\"images\",\"type\":\"tuple\"}],\"name\":\"createAStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorManager\",\"outputs\":[{\"internalType\":\"contract ICreatorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPoolByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingContract/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\nimport \\\"../interfaces/ICreatorManager.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror NothingToWithdraw();\\r\\nerror POOL_NOT_STARTED();\\r\\nerror NOT_ENOUGH_REWARD();\\r\\nerror OWNER_ONLY();\\r\\n\\r\\ncontract StakingPool is ERC721Enumerable {\\r\\n   \\r\\n    uint256 internal constant ONE_DAY = 1;\\r\\n    address public creatorManager;\\r\\n\\r\\n    StakingLibrary.PoolInfo private poolInfo;\\r\\n    StakingLibrary.ProjectInfo private projectInfo;\\r\\n    StakingLibrary.RewardPoolInfo private rewardPoolInfo;\\r\\n    StakingLibrary.Images private images;\\r\\n\\r\\n    struct StakingCategeroy {\\r\\n        StakingType stakingType;\\r\\n        uint256 duration;\\r\\n        uint256 rewardPC;\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    enum StakingType {CATEGORY_ONE, CATEGORY_TWO, CATEGORY_THREE}\\r\\n\\r\\n    /// @notice - reward structure (3months -> 30%, 6months -> 50%, 12months -> 80%)\\r\\n    StakingCategeroy public CATEGORY_ONE = StakingCategeroy(StakingType.CATEGORY_ONE, 90*ONE_DAY, 30, \\\"\\\");\\r\\n    StakingCategeroy public CATEGORY_TWO = StakingCategeroy(StakingType.CATEGORY_TWO, 180*ONE_DAY, 50, \\\"\\\");\\r\\n    StakingCategeroy public CATEGORY_THREE = StakingCategeroy(StakingType.CATEGORY_THREE, 365*ONE_DAY, 80, \\\"\\\");\\r\\n    \\r\\n    mapping (StakingType => StakingCategeroy) private stakingInfo;\\r\\n    mapping (uint256 => StakingLibrary.TokenData) private tokenData;\\r\\n\\r\\n    constructor (\\r\\n        uint256 _poolId,\\r\\n        StakingLibrary.ProjectInfo memory _projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory _rewardPoolInfo,\\r\\n        StakingLibrary.Images memory _images,\\r\\n        address _creatorManager,\\r\\n        address _ownerOfProject\\r\\n        ) \\r\\n        ERC721(_projectInfo.projectName, _projectInfo.projectName) {\\r\\n\\r\\n        CATEGORY_ONE.image = _images.image_3_months;\\r\\n        CATEGORY_TWO.image = _images.image_6_months;\\r\\n        CATEGORY_THREE.image = _images.image_12_months;\\r\\n\\r\\n        stakingInfo[StakingType.CATEGORY_ONE] = CATEGORY_ONE;\\r\\n        stakingInfo[StakingType.CATEGORY_TWO] = CATEGORY_TWO;\\r\\n        stakingInfo[StakingType.CATEGORY_THREE] = CATEGORY_THREE;\\r\\n\\r\\n        projectInfo = _projectInfo;\\r\\n        rewardPoolInfo = _rewardPoolInfo;\\r\\n        images = _images;\\r\\n\\r\\n        poolInfo.poolId = _poolId;\\r\\n        poolInfo.poolAddress = address(this);\\r\\n        poolInfo.remainingPool = _rewardPoolInfo.poolAmount;\\r\\n        poolInfo.poolOwner = _ownerOfProject;\\r\\n\\r\\n        creatorManager = _creatorManager;\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice The main function to stake tokens\\r\\n    function stakeTokens(uint256 amount, StakingType _type) public {\\r\\n\\r\\n        // Check if pool has been started \\r\\n        if(block.timestamp < rewardPoolInfo.startedAt){\\r\\n            revert POOL_NOT_STARTED();\\r\\n        }\\r\\n\\r\\n        // Get Staking type info\\r\\n        StakingCategeroy memory category = stakingInfo[_type];\\r\\n\\r\\n        // Calculate reward of this person\\r\\n        uint256 reward = amount * category.rewardPC / 100;\\r\\n        // Check if pool has enough space to give this reward\\r\\n        if(poolInfo.remainingPool < reward){\\r\\n            revert NOT_ENOUGH_REWARD();\\r\\n        }\\r\\n\\r\\n        //Check if user has a creator contract\\r\\n        address creator = ICreatorManager(creatorManager).creatorAddress(msg.sender);\\r\\n        // Not already a creator then create one\\r\\n        if(creator == address(0)){\\r\\n            creator = ICreatorManager(creatorManager).createACreator(msg.sender);\\r\\n        }\\r\\n\\r\\n        // Update the tokenID\\r\\n        poolInfo.tokenCounter++;\\r\\n        // tokenUri\\r\\n        string memory tokenUri = stakingInfo[_type].image;\\r\\n\\r\\n\\r\\n        // Record the staking entry\\r\\n        tokenData[poolInfo.tokenCounter] = StakingLibrary.TokenData(\\r\\n            poolInfo.poolId,                        //poolId\\r\\n            amount,                                 //tokenStaked\\r\\n            projectInfo.tokenAddress,               //tokenAddress\\r\\n            address(msg.sender),                    //owner\\r\\n            address(creator),                       //creator\\r\\n            poolInfo.tokenCounter,                  //tokenID\\r\\n            tokenUri,                               //tokenUri\\r\\n            uint8(_type),                           //stakingType;\\r\\n            block.timestamp,                        //stakingTime\\r\\n            block.timestamp + category.duration,    //unlockTime\\r\\n            reward,                                 //expectedReward\\r\\n            false,                                  //isUnskated\\r\\n            0,                                      //redeemedReward\\r\\n            0                                       //pcReceived\\r\\n        );\\r\\n\\r\\n        // Transfer user's tokens to his creator contract\\r\\n        IERC20(projectInfo.tokenAddress).transferFrom(msg.sender, address(creator), amount);\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        poolInfo.remainingPool -= reward;\\r\\n        // Update the total staked tokens variable\\r\\n        poolInfo.totalTokensStaked += amount;\\r\\n        // update totalParicipants\\r\\n        poolInfo.totalParicipants++;\\r\\n\\r\\n        // Mint An NFT to the creator contract with token detials\\r\\n        _safeMint(address(creator), poolInfo.tokenCounter, abi.encodePacked(address(this)));\\r\\n\\r\\n        emit JoinedPool(poolInfo.poolId, poolInfo.tokenCounter, msg.sender, amount, uint8(_type));\\r\\n        \\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice unstakeTokens can only be called by creator contract of the token holder. \\r\\n    function unstakeTokens(uint256 _tokenId) public {\\r\\n\\r\\n        StakingLibrary.TokenData memory _tokenData = tokenData[_tokenId];\\r\\n        \\r\\n        require(msg.sender == _tokenData.creator, \\\"Not Authorized to Unstake\\\");\\r\\n        require(_tokenData.expectedReward > 0, \\\"Nothing to unstaked\\\");\\r\\n        require(!_tokenData.isUnskated, \\\"Already unstaked\\\");\\r\\n\\r\\n        tokenData[_tokenId].isUnskated = true;\\r\\n\\r\\n        /// @notice Calculating the reward after pelanty;\\r\\n        (uint256 redeemableReward, uint8 pcReceived) = findRedeemableReward(_tokenData.expectedReward, _tokenData.stakingTime, _tokenData.unlockTime);\\r\\n\\r\\n        tokenData[_tokenId].redeemedReward = redeemableReward;\\r\\n        tokenData[_tokenId].pcReceived = pcReceived;\\r\\n\\r\\n        uint256 leftoverReward = _tokenData.expectedReward - redeemableReward;\\r\\n\\r\\n        // Update the remianing reward pool\\r\\n        poolInfo.remainingPool += leftoverReward;\\r\\n        // _burn(_tokenData.tokenId);\\r\\n\\r\\n        IERC20(projectInfo.tokenAddress).transfer(_tokenData.owner, redeemableReward);\\r\\n\\r\\n        emit ExitedPool(poolInfo.poolId, msg.sender, _tokenData.tokenStaked, uint8(_tokenData.stakingType), redeemableReward);\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @notice - penalties (50% completion -> 30% reward, 80% completion -> 50% reward, 100% completion -> 100% reward)\\r\\n    /// @notice an internal function to compute redeemable reward after pelanties.\\r\\n    function findRedeemableReward(\\r\\n        uint256 _expectedReward, \\r\\n        uint256 _stakingTime, \\r\\n        uint256 _unlockTime\\r\\n        ) public view returns(uint256 redeemableReward, uint8 pcReceived) {\\r\\n        \\r\\n        // Either 90 days, 180 days or 365 days. \\r\\n        uint256 stakingPeriod = _unlockTime - _stakingTime;\\r\\n        uint256 durationCompleted = block.timestamp - _stakingTime;\\r\\n        uint256 pcCompleted = (durationCompleted * 100) / stakingPeriod;\\r\\n                \\r\\n        if(pcCompleted < 50 ){\\r\\n            pcReceived = 0;\\r\\n            redeemableReward = 0;\\r\\n        }\\r\\n        else if(pcCompleted >= 50 && pcCompleted < 80 ){\\r\\n            pcReceived = 30;\\r\\n            redeemableReward = (_expectedReward * pcReceived) / 100;\\r\\n        }\\r\\n        else if(pcCompleted >= 80 && pcCompleted < 100){\\r\\n            pcReceived = 50;\\r\\n            redeemableReward = (_expectedReward * 50) / 100;\\r\\n        }\\r\\n        else {\\r\\n            pcReceived = 100;\\r\\n            redeemableReward = _expectedReward;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function checkTokenReward(uint256 _tokenId) public view returns (\\r\\n        uint256 expectedReward, \\r\\n        uint256 redeemableReward\\r\\n        ) {\\r\\n        StakingLibrary.TokenData memory _tokenData = tokenData[_tokenId];\\r\\n        expectedReward = _tokenData.expectedReward;\\r\\n        (redeemableReward,) = findRedeemableReward(_tokenData.expectedReward, _tokenData.stakingTime, _tokenData.unlockTime);\\r\\n    }\\r\\n    \\r\\n    function updateSocialHandles(StakingLibrary.SocialHandles memory _socialHandles ) public {\\r\\n\\r\\n        if(msg.sender != poolInfo.poolOwner){\\r\\n            revert OWNER_ONLY();\\r\\n        }\\r\\n\\r\\n        projectInfo.socialHandles = _socialHandles;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Getter functions\\r\\n\\r\\n    function getProjectInfo() public view returns (\\r\\n        StakingLibrary.PoolFullInfo memory\\r\\n    ){\\r\\n        return StakingLibrary.PoolFullInfo(poolInfo, projectInfo, rewardPoolInfo, images);\\r\\n    }\\r\\n\\r\\n    function getTokenData(uint256 _tokenId) public view returns(StakingLibrary.TokenData memory){\\r\\n        return tokenData[_tokenId];\\r\\n    }\\r\\n\\r\\n    function getTokensData(address _user) public view returns (\\r\\n        StakingLibrary.ProjectInfo memory,\\r\\n        StakingLibrary.TokenData[] memory\\r\\n        ) {\\r\\n        uint256 myBalance = balanceOf(_user);\\r\\n        StakingLibrary.TokenData[] memory tokensData = new StakingLibrary.TokenData[](myBalance);\\r\\n        for(uint256 i = 0; i < myBalance; i++){\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(_user, i);\\r\\n            StakingLibrary.TokenData memory data = tokenData[tokenId];\\r\\n            tokensData[i] = data;\\r\\n        }\\r\\n        return (projectInfo, tokensData);\\r\\n    }\\r\\n      \\r\\n    event JoinedPool(uint poolId, uint tokenId, address user, uint contribution, uint8 category);\\r\\n    event ExitedPool(uint id, address creator, uint contribution, uint8 category, uint redeemableReward);\\r\\n\\r\\n}\",\"keccak256\":\"0xcbec538ff6373fabfcec4330d1095e5be4f08ca5945fb32b6d6b49ff8dba837b\",\"license\":\"MIT\"},\"contracts/StakingContract/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./StakingPool.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\nimport \\\"../interfaces/ICreatorManager.sol\\\";\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract StakingPoolFactory is Ownable {\\r\\n\\r\\n    ICreatorManager public creatorManager;\\r\\n    uint256 public fee = 0.5 ether;\\r\\n    uint256 public projectsCount;\\r\\n\\r\\n    mapping(address => address[]) private stakingPoolsByToken;\\r\\n    mapping(uint256 => address) private stakingPoolByID;\\r\\n\\r\\n    constructor(ICreatorManager _creatorManager){\\r\\n        creatorManager = _creatorManager;\\r\\n    }\\r\\n\\r\\n    function createAStakingPool(\\r\\n        StakingLibrary.ProjectInfo memory projectInfo,\\r\\n        StakingLibrary.RewardPoolInfo memory rewardPoolInfo,\\r\\n        StakingLibrary.Images memory images\\r\\n        ) public {\\r\\n        // require(msg.value >= fee, \\\"Unsufficient Funds\\\");\\r\\n\\r\\n        require(rewardPoolInfo.startedAt > block.timestamp, \\\"Start time should be in future\\\");\\r\\n\\r\\n        projectsCount++;\\r\\n        StakingPool stakingContract = new StakingPool(\\r\\n            projectsCount, projectInfo, rewardPoolInfo, images, address(creatorManager), msg.sender \\r\\n            );\\r\\n\\r\\n        stakingPoolsByToken[projectInfo.tokenAddress].push(address(stakingContract));\\r\\n        stakingPoolByID[projectsCount] = address(stakingContract);\\r\\n\\r\\n        IERC20(projectInfo.tokenAddress).transferFrom(msg.sender, address(stakingContract), rewardPoolInfo.poolAmount);\\r\\n\\r\\n        emit Poolcreated(projectsCount, address(stakingContract), projectInfo.tokenAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getPoolsByToken(address token) public view returns (address[] memory) {\\r\\n        return stakingPoolsByToken[token];\\r\\n    }\\r\\n\\r\\n    function getPoolByID(uint256 id) public view returns (address) {\\r\\n        return stakingPoolByID[id];\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event Poolcreated(uint256 poolId, address poolAddress, address tokenAddress);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb0399b07077ff0c67fbee90586865b153df3230cfbd6e1e8ccc36d56aea7038b\",\"license\":\"MIT\"},\"contracts/interfaces/ICreatorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n\\r\\ninterface ICreatorManager  {\\r\\n\\r\\n    function creatorAddress(address user) external view returns (address);\\r\\n    function createACreator(address user) external returns (address);\\r\\n    function walletAddress(address creator) external view returns (address);\\r\\n\\r\\n}\",\"keccak256\":\"0x901a3a9f7c856e16375f65c636ac263d64960e53db0c36ee8802c3a55cbf88f4\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    struct SocialHandles {\\r\\n        string website;\\r\\n        string twitter;\\r\\n        string facebook;\\r\\n        string telegram;\\r\\n        string discord;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        string teamDescription;\\r\\n        string projectDescription;\\r\\n        string projectCover;\\r\\n        string projectAvatar;\\r\\n        SocialHandles socialHandles;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo{\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct Images{\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_12_months;\\r\\n    }\\r\\n       \\r\\n    struct TokenData {\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        Images images;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x398f897cc60323d3d340e049f929da1668fb955fc2d8c47039e6ed70a43175c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526706f05b59d3b2000060025534801561001c57600080fd5b506040516160ec3803806160ec83398101604081905261003b916100b9565b61004433610069565b600180546001600160a01b0319166001600160a01b03929092169190911790556100e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100cb57600080fd5b81516001600160a01b03811681146100e257600080fd5b9392505050565b615ff4806100f86000396000f3fe60806040523480156200001157600080fd5b50600436106200009f5760003560e01c80638da5cb5b116200006e5780638da5cb5b1462000136578063c73b302e1462000148578063d4f47e931462000161578063ddca3f431462000175578063f2fde38b146200017f57600080fd5b80635055149c14620000a4578063715018a614620000ed5780637cf12d6614620000f957806386959b4b1462000110575b600080fd5b620000d0620000b53660046200056a565b6000908152600560205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b620000f762000196565b005b620000f76200010a366004620008b0565b620001ae565b620001276200012136600462000a9e565b620003b9565b604051620000e4919062000ac3565b6000546001600160a01b0316620000d0565b6200015260035481565b604051908152602001620000e4565b600154620000d0906001600160a01b031681565b6200015260025481565b620000f76200019036600462000a9e565b62000431565b620001a0620004b0565b620001ac60006200050c565b565b81514210620002045760405162461bcd60e51b815260206004820152601e60248201527f53746172742074696d652073686f756c6420626520696e20667574757265000060448201526064015b60405180910390fd5b60038054906000620002168362000b12565b91905055506000600354848484600160009054906101000a90046001600160a01b03163360405162000248906200055c565b620002599695949392919062000c69565b604051809103906000f08015801562000276573d6000803e3d6000fd5b50604085810180516001600160a01b0390811660009081526004602081815285832080546001810182559084528184200180548886166001600160a01b03199182168117909255600354855260058352938790208054909416811790935593519389015194516323b872dd60e01b8152339181019190915260248101919091526044810193909352929350909116906323b872dd90606401602060405180830381600087803b1580156200032957600080fd5b505af11580156200033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000364919062000e04565b5060035460408581015181519283526001600160a01b0384811660208501521682820152517fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d9181900360600190a150505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156200042557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000406575b50505050509050919050565b6200043b620004b0565b6001600160a01b038116620004a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001fb565b620004ad816200050c565b50565b6000546001600160a01b03163314620001ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6151968062000e2983390190565b6000602082840312156200057d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715620005c057620005c062000584565b60405290565b604051610140810167ffffffffffffffff81118282101715620005c057620005c062000584565b600082601f830112620005ff57600080fd5b813567ffffffffffffffff808211156200061d576200061d62000584565b604051601f8301601f19908116603f0116810190828211818310171562000648576200064862000584565b816040528381528660208588010111156200066257600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200069a57600080fd5b919050565b803560ff811681146200069a57600080fd5b600060a08284031215620006c457600080fd5b620006ce6200059a565b9050813567ffffffffffffffff80821115620006e957600080fd5b620006f785838601620005ed565b835260208401359150808211156200070e57600080fd5b6200071c85838601620005ed565b602084015260408401359150808211156200073657600080fd5b6200074485838601620005ed565b604084015260608401359150808211156200075e57600080fd5b6200076c85838601620005ed565b606084015260808401359150808211156200078657600080fd5b506200079584828501620005ed565b60808301525092915050565b600060408284031215620007b457600080fd5b6040516040810181811067ffffffffffffffff82111715620007da57620007da62000584565b604052823581526020928301359281019290925250919050565b6000606082840312156200080757600080fd5b6040516060810167ffffffffffffffff82821081831117156200082e576200082e62000584565b8160405282935084359150808211156200084757600080fd5b6200085586838701620005ed565b835260208501359150808211156200086c57600080fd5b6200087a86838701620005ed565b602084015260408501359150808211156200089457600080fd5b50620008a385828601620005ed565b6040830152505092915050565b600080600060808486031215620008c657600080fd5b833567ffffffffffffffff80821115620008df57600080fd5b908501906101408288031215620008f557600080fd5b620008ff620005c6565b8235828111156200090f57600080fd5b6200091d89828601620005ed565b8252506020830135828111156200093357600080fd5b6200094189828601620005ed565b602083015250620009556040840162000682565b604082015262000968606084016200069f565b60608201526080830135828111156200098057600080fd5b6200098e89828601620005ed565b60808301525060a083013582811115620009a757600080fd5b620009b589828601620005ed565b60a08301525060c083013582811115620009ce57600080fd5b620009dc89828601620005ed565b60c08301525060e083013582811115620009f557600080fd5b62000a0389828601620005ed565b60e083015250610100808401358381111562000a1e57600080fd5b62000a2c8a828701620005ed565b828401525050610120808401358381111562000a4757600080fd5b62000a558a828701620006b1565b8284015250508095505062000a6e8760208801620007a1565b9350606086013591508082111562000a8557600080fd5b5062000a9486828701620007f4565b9150509250925092565b60006020828403121562000ab157600080fd5b62000abc8262000682565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b065783516001600160a01b03168352928401929184019160010162000adf565b50909695505050505050565b600060001982141562000b3557634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845260005b8181101562000b645760208185018101518683018201520162000b46565b8181111562000b77576000602083870101525b50601f01601f19169290920160200192915050565b6000815160a0845262000ba360a085018262000b3c565b90506020830151848203602086015262000bbe828262000b3c565b9150506040830151848203604086015262000bda828262000b3c565b9150506060830151848203606086015262000bf6828262000b3c565b9150506080830151848203608086015262000c12828262000b3c565b95945050505050565b600081516060845262000c32606085018262000b3c565b90506020830151848203602086015262000c4d828262000b3c565b9150506040830151848203604086015262000c12828262000b3c565b86815260e06020820152600086516101408060e085015262000c9061022085018362000b3c565b9150602089015160df1961010081878603018188015262000cb2858462000b3c565b945060408c0151925061012062000cd3818901856001600160a01b03169052565b60608d015160ff811689870152935060808d01519450828887030161016089015262000d00868662000b3c565b955060a08d01519450828887030161018089015262000d20868662000b3c565b955060c08d0151945082888703016101a089015262000d40868662000b3c565b955060e08d0151945082888703016101c089015262000d60868662000b3c565b9550818d0151945082888703016101e089015262000d7f868662000b3c565b9550808d0151945050508086850301610200870152505062000da2828262000b8c565b8851604086015260208901516060860152915062000dbd9050565b828103608084015262000dd1818762000c1b565b91505062000dea60a08301856001600160a01b03169052565b6001600160a01b03831660c0830152979650505050505050565b60006020828403121562000e1757600080fd5b8151801515811462000abc57600080fdfe6101006040526000608090815260a06200001c6001605a620007d9565b8152601e6020808301919091526040805191820181526000825290910152805160248054909190829060ff19166001836002811115620000605762000060620007c3565b02179055506020828101516001830155604083015160028301556060830151805162000093926003850192019062000699565b5050604080516080810190915290508060018152602001620000b8600160b4620007d9565b815260326020808301919091526040805191820181526000825290910152805160288054909190829060ff19166001836002811115620000fc57620000fc620007c3565b0217905550602082810151600183015560408301516002830155606083015180516200012f926003850192019062000699565b505060408051608081019091529050806002815260200162000155600161016d620007d9565b8152605060208083019190915260408051918201815260008252909101528051602c8054909190829060ff19166001836002811115620001995762000199620007c3565b021790555060208281015160018301556040830151600283015560608301518051620001cc926003850192019062000699565b505050348015620001dc57600080fd5b506040516200519638038062005196833981016040819052620001ff9162000b62565b8451805181906200021890600090602084019062000699565b5080516200022e90600190602084019062000699565b5050835180516200024792506027916020019062000699565b5060208084015180516200026092602b92019062000699565b50604083015180516200027c91602f9160209091019062000699565b50600080526030602052602480547f686dc217b182b1fe88c7defdc5cd77807fc691ce05a160638669d7322051eee08054909160ff1690829060ff19166001836002811115620002d057620002d0620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620002ff9062000d7e565b6200030c92919062000728565b5050600160008190526030602052602880547fc7874712a1c7fb891b421aa6c0d42dbf3cd912d7a18f183783fb32e938cbaa0180549294509260ff90911691839160ff1990911690836002811115620003695762000369620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620003989062000d7e565b620003a592919062000728565b5050600260008190526030602052602c80547f89a47dfbb363dd4e64da56b4585033c9abd8a425d24b94630469c44bee7189c280549294509260ff90911691839160ff19909116906001908490811115620004045762000404620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620004339062000d7e565b6200044092919062000728565b5050855180518792506012916200045d9183916020019062000699565b50602082810151805162000478926001850192019062000699565b506040820151600282018054606085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560808201518051620004d091600384019160209091019062000699565b5060a08201518051620004ee91600484019160209091019062000699565b5060c082015180516200050c91600584019160209091019062000699565b5060e082015180516200052a91600684019160209091019062000699565b5061010082015180516200054991600784019160209091019062000699565b506101208201518051805160088401916200056a9183916020019062000699565b50602082810151805162000585926001850192019062000699565b5060408201518051620005a391600284019160209091019062000699565b5060608201518051620005c191600384019160209091019062000699565b5060808201518051620005df91600484019160209091019062000699565b50508651601f5550505060208085015181558351805185926021926200060c928492919091019062000699565b50602082810151805162000627926001850192019062000699565b50604082015180516200064591600284019160209091019062000699565b505050600b95909555600c8054306001600160a01b03199182161790915560209390930151600d556011805484166001600160a01b03968716179055600a805490931694169390931790555062000dbb9050565b828054620006a79062000d7e565b90600052602060002090601f016020900481019282620006cb576000855562000716565b82601f10620006e657805160ff191683800117855562000716565b8280016001018555821562000716579182015b8281111562000716578251825591602001919060010190620006f9565b5062000724929150620007ac565b5090565b828054620007369062000d7e565b90600052602060002090601f0160209004810192826200075a576000855562000716565b82601f106200076d578054855562000716565b828001600101855582156200071657600052602060002091601f016020900482015b82811115620007165782548255916001019190600101906200078f565b5b80821115620007245760008155600101620007ad565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156200080257634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000842576200084262000807565b60405290565b60405161014081016001600160401b038111828210171562000842576200084262000807565b604051601f8201601f191681016001600160401b038111828210171562000899576200089962000807565b604052919050565b600082601f830112620008b357600080fd5b81516001600160401b03811115620008cf57620008cf62000807565b6020620008e5601f8301601f191682016200086e565b8281528582848701011115620008fa57600080fd5b60005b838110156200091a578581018301518282018401528201620008fd565b838111156200092c5760008385840101525b5095945050505050565b80516001600160a01b03811681146200094e57600080fd5b919050565b805160ff811681146200094e57600080fd5b600060a082840312156200097857600080fd5b620009826200081d565b82519091506001600160401b03808211156200099d57600080fd5b620009ab85838601620008a1565b83526020840151915080821115620009c257600080fd5b620009d085838601620008a1565b60208401526040840151915080821115620009ea57600080fd5b620009f885838601620008a1565b6040840152606084015191508082111562000a1257600080fd5b62000a2085838601620008a1565b6060840152608084015191508082111562000a3a57600080fd5b5062000a4984828501620008a1565b60808301525092915050565b60006040828403121562000a6857600080fd5b604080519081016001600160401b038111828210171562000a8d5762000a8d62000807565b604052825181526020928301519281019290925250919050565b60006060828403121562000aba57600080fd5b604051606081016001600160401b03808211838310171562000ae05762000ae062000807565b81604052829350845191508082111562000af957600080fd5b62000b0786838701620008a1565b8352602085015191508082111562000b1e57600080fd5b62000b2c86838701620008a1565b6020840152604085015191508082111562000b4657600080fd5b5062000b5585828601620008a1565b6040830152505092915050565b60008060008060008060e0878903121562000b7c57600080fd5b865160208801519096506001600160401b038082111562000b9c57600080fd5b90880190610140828b03121562000bb257600080fd5b62000bbc62000848565b82518281111562000bcc57600080fd5b62000bda8c828601620008a1565b82525060208301518281111562000bf057600080fd5b62000bfe8c828601620008a1565b60208301525062000c126040840162000936565b604082015262000c256060840162000953565b606082015260808301518281111562000c3d57600080fd5b62000c4b8c828601620008a1565b60808301525060a08301518281111562000c6457600080fd5b62000c728c828601620008a1565b60a08301525060c08301518281111562000c8b57600080fd5b62000c998c828601620008a1565b60c08301525060e08301518281111562000cb257600080fd5b62000cc08c828601620008a1565b60e083015250610100808401518381111562000cdb57600080fd5b62000ce98d828701620008a1565b828401525050610120808401518381111562000d0457600080fd5b62000d128d82870162000965565b8284015250508097505062000d2b8a60408b0162000a55565b9550608089015191508082111562000d4257600080fd5b5062000d5189828a0162000aa7565b93505062000d6260a0880162000936565b915062000d7260c0880162000936565b90509295509295509295565b600181811c9082168062000d9357607f821691505b6020821081141562000db557634e487b7160e01b600052602260045260246000fd5b50919050565b6143cb8062000dcb6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636352211e116100f9578063b78bec7811610097578063c87b56dd11610071578063c87b56dd146103ee578063c948b74a14610401578063d4f47e9314610414578063e985e9c51461042757600080fd5b8063b78bec78146103cb578063b88d4fde146103d3578063c3880b22146103e657600080fd5b806395d89b41116100d357806395d89b4114610368578063a22cb46514610370578063a3a4393114610383578063b09afec1146103ab57600080fd5b80636352211e1461032d57806367c897fe1461034057806370a082311461035557600080fd5b806323b872dd116101665780633776ee78116101405780633776ee78146102dc57806342842e0e146102f45780634f6ccce714610307578063608e4dd01461031a57600080fd5b806323b872dd146102a3578063277c2d68146102b65780632f745c59146102c957600080fd5b8063095ea7b3116101a2578063095ea7b31461023157806318160ddd146102465780631df025c61461025857806320e0c51c1461028257600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d7366004613871565b610463565b60405190151581526020015b60405180910390f35b6101f961048e565b6040516101e891906138e6565b6102196102143660046138f9565b610520565b6040516001600160a01b0390911681526020016101e8565b61024461023f366004613927565b610547565b005b6008545b6040519081526020016101e8565b61026b610266366004613953565b610662565b6040805192835260ff9091166020830152016101e8565b61029561029036600461397f565b610720565b6040516101e8929190613c16565b6102446102b1366004613c88565b611065565b6102446102c4366004613cc9565b611096565b61024a6102d7366004613927565b61172c565b6102e46117c2565b6040516101e89493929190613d13565b610244610302366004613c88565b611867565b61024a6103153660046138f9565b611882565b6102446103283660046138f9565b611915565b61021961033b3660046138f9565b611cd6565b610348611d36565b6040516101e89190613d9e565b61024a61036336600461397f565b6126a8565b6101f961272e565b61024461037e366004613e57565b61273d565b6103966103913660046138f9565b61274c565b604080519283526020830191909152016101e8565b6103be6103b93660046138f9565b6128cf565b6040516101e89190613e85565b6102e4612a2f565b6102446103e1366004613f4d565b612a51565b6102e4612a89565b6101f96103fc3660046138f9565b612aab565b61024461040f366004613fed565b612b1f565b600a54610219906001600160a01b031681565b6101dc6104353660046140ea565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610488575061048882612bd1565b92915050565b60606000805461049d90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546104c990614118565b80156105165780601f106104eb57610100808354040283529160200191610516565b820191906000526020600020905b8154815290600101906020018083116104f957829003601f168201915b5050505050905090565b600061052b82612c21565b506000908152600460205260409020546001600160a01b031690565b600061055282611cd6565b9050806001600160a01b0316836001600160a01b031614156105c55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105e157506105e18133610435565b6106535760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105bc565b61065d8383612c83565b505050565b600080806106708585614169565b9050600061067e8642614169565b905060008261068e836064614180565b61069891906141b5565b905060328110156106b0576000935060009450610715565b603281101580156106c15750605081105b156106e757601e935060646106d6858a614180565b6106e091906141b5565b9450610715565b605081101580156106f85750606481105b1561070d576032935060646106d68986614180565b606493508794505b505050935093915050565b6107286135ed565b60606000610735846126a8565b905060008167ffffffffffffffff81111561075257610752613e98565b60405190808252806020026020018201604052801561078b57816020015b61077861367b565b8152602001906001900390816107705790505b50905060005b828110156109355760006107a5878361172c565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a083015260068101805494955092939192909160c08401919061082790614118565b80601f016020809104026020016040519081016040528092919081815260200182805461085390614118565b80156108a05780601f10610875576101008083540402835291602001916108a0565b820191906000526020600020905b81548152906001019060200180831161088357829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e09091015284519091508190859085908110610915576109156141c9565b60200260200101819052505050808061092d906141df565b915050610791565b50601281816040518061014001604052908160008201805461095690614118565b80601f016020809104026020016040519081016040528092919081815260200182805461098290614118565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081526020016001820180546109e890614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1490614118565b8015610a615780601f10610a3657610100808354040283529160200191610a61565b820191906000526020600020905b815481529060010190602001808311610a4457829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff166040820152600382018054606090920191610aa190614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610acd90614118565b8015610b1a5780601f10610aef57610100808354040283529160200191610b1a565b820191906000526020600020905b815481529060010190602001808311610afd57829003601f168201915b50505050508152602001600482018054610b3390614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f90614118565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b50505050508152602001600582018054610bc590614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190614118565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b50505050508152602001600682018054610c5790614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8390614118565b8015610cd05780601f10610ca557610100808354040283529160200191610cd0565b820191906000526020600020905b815481529060010190602001808311610cb357829003601f168201915b50505050508152602001600782018054610ce990614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590614118565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b50505050508152602001600882016040518060a0016040529081600082018054610d8b90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610db790614118565b8015610e045780601f10610dd957610100808354040283529160200191610e04565b820191906000526020600020905b815481529060010190602001808311610de757829003601f168201915b50505050508152602001600182018054610e1d90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4990614118565b8015610e965780601f10610e6b57610100808354040283529160200191610e96565b820191906000526020600020905b815481529060010190602001808311610e7957829003601f168201915b50505050508152602001600282018054610eaf90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610edb90614118565b8015610f285780601f10610efd57610100808354040283529160200191610f28565b820191906000526020600020905b815481529060010190602001808311610f0b57829003601f168201915b50505050508152602001600382018054610f4190614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6d90614118565b8015610fba5780601f10610f8f57610100808354040283529160200191610fba565b820191906000526020600020905b815481529060010190602001808311610f9d57829003601f168201915b50505050508152602001600482018054610fd390614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610fff90614118565b801561104c5780601f106110215761010080835404028352916020019161104c565b820191906000526020600020905b81548152906001019060200180831161102f57829003601f168201915b5050509190925250505090525097909650945050505050565b61106f3382612cf1565b61108b5760405162461bcd60e51b81526004016105bc906141fa565b61065d838383612d70565b601f544210156110b957604051638f2d4c2d60e01b815260040160405180910390fd5b6000603060008360028111156110d1576110d1613cfd565b60028111156110e2576110e2613cfd565b8152602081019190915260409081016000208151608081019092528054829060ff16600281111561111557611115613cfd565b600281111561112657611126613cfd565b8152602001600182015481526020016002820154815260200160038201805461114e90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461117a90614118565b80156111c75780601f1061119c576101008083540402835291602001916111c7565b820191906000526020600020905b8154815290600101906020018083116111aa57829003601f168201915b5050505050815250509050600060648260400151856111e69190614180565b6111f091906141b5565b905080600b600201541015611218576040516348eb126760e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b15801561125c57600080fd5b505afa158015611270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190614248565b90506001600160a01b03811661132457600a546040516331b77b8960e21b81523360048201526001600160a01b039091169063c6ddee2490602401602060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113219190614248565b90505b60108054906000611334836141df565b919050555060006030600086600281111561135157611351613cfd565b600281111561136257611362613cfd565b8152602001908152602001600020600301805461137e90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa90614118565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b5050604080516101c081018252600b548152602081018c90526014546001600160a01b0390811692820192909252336060820152908716608082015260105460a082015260c081018590529394505060e083019150879050600281111561146057611460613cfd565b60ff16815260200142815260200185602001514261147e9190614265565b8152602080820186905260006040808401829052606080850183905260809485018390526010548352603184529181902085518155858401516001820155908501516002820180546001600160a01b03199081166001600160a01b039384161790915592860151600383018054851691831691909117905593850151600482018054909316941693909317905560a0830151600583015560c0830151805161152c926006850192019061370d565b5060e082015160078201805460ff1990811660ff9384161790915561010084015160088401556101208401516009840155610140840151600a840155610160840151600b840180548316911515919091179055610180840151600c8401556101a090930151600d909201805490931691161790556014546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201899052909116906323b872dd90606401602060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c919061427d565b5082600b60020160008282546116429190614169565b9091555050600e805487919060009061165c908490614265565b9091555050600f8054906000611671836141df565b90915550506010546040516bffffffffffffffffffffffff193060601b1660208201526116b1918491603401604051602081830303815290604052612f17565b600b546010547fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa919033898960028111156116ee576116ee613cfd565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a1505050505050565b6000611737836126a8565b82106117995760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105bc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60288054602954602a54602b805460ff9094169492939192916117e490614118565b80601f016020809104026020016040519081016040528092919081815260200182805461181090614118565b801561185d5780601f106118325761010080835404028352916020019161185d565b820191906000526020600020905b81548152906001019060200180831161184057829003601f168201915b5050505050905084565b61065d83838360405180602001604052806000815250612a51565b600061188d60085490565b82106118f05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105bc565b60088281548110611903576119036141c9565b90600052602060002001549050919050565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a083015260068101805460c08401919061198e90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546119ba90614118565b8015611a075780601f106119dc57610100808354040283529160200191611a07565b820191906000526020600020905b8154815290600101906020018083116119ea57829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a830154608080840191909152600b8401548216151560a0840152600c84015460c0840152600d909301541660e0909101528101519091506001600160a01b03163314611ac25760405162461bcd60e51b815260206004820152601960248201527f4e6f7420417574686f72697a656420746f20556e7374616b650000000000000060448201526064016105bc565b600081610140015111611b0d5760405162461bcd60e51b8152602060048201526013602482015272139bdd1a1a5b99c81d1bc81d5b9cdd185ad959606a1b60448201526064016105bc565b80610160015115611b535760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5b9cdd185ad95960821b60448201526064016105bc565b6000828152603160205260408120600b01805460ff191660011790556101408201516101008301516101208401518392611b8e929091610662565b6000868152603160205260408120600c8101849055600d01805460ff191660ff841617905561014086015192945090925090611bcb908490614169565b905080600b6002016000828254611be29190614265565b9091555050601454606085015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c71919061427d565b50600b5460208581015160e08701516040805194855233938501939093529183015260ff166060820152608081018490527f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d9060a00160405180910390a15050505050565b6000818152600260205260408120546001600160a01b0316806104885760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105bc565b611d3e613791565b6040805161016081018252600b5460808201908152600c546001600160a01b0390811660a0840152600d5460c0840152600e5460e0840152600f5461010084015260105461012084015260115416610140808401919091529082528251908101909252601280549192602084019290919082908290611dbc90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611de890614118565b8015611e355780601f10611e0a57610100808354040283529160200191611e35565b820191906000526020600020905b815481529060010190602001808311611e1857829003601f168201915b50505050508152602001600182018054611e4e90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7a90614118565b8015611ec75780601f10611e9c57610100808354040283529160200191611ec7565b820191906000526020600020905b815481529060010190602001808311611eaa57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff166040820152600382018054606090920191611f0790614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3390614118565b8015611f805780601f10611f5557610100808354040283529160200191611f80565b820191906000526020600020905b815481529060010190602001808311611f6357829003601f168201915b50505050508152602001600482018054611f9990614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc590614118565b80156120125780601f10611fe757610100808354040283529160200191612012565b820191906000526020600020905b815481529060010190602001808311611ff557829003601f168201915b5050505050815260200160058201805461202b90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461205790614118565b80156120a45780601f10612079576101008083540402835291602001916120a4565b820191906000526020600020905b81548152906001019060200180831161208757829003601f168201915b505050505081526020016006820180546120bd90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546120e990614118565b80156121365780601f1061210b57610100808354040283529160200191612136565b820191906000526020600020905b81548152906001019060200180831161211957829003601f168201915b5050505050815260200160078201805461214f90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461217b90614118565b80156121c85780601f1061219d576101008083540402835291602001916121c8565b820191906000526020600020905b8154815290600101906020018083116121ab57829003601f168201915b50505050508152602001600882016040518060a00160405290816000820180546121f190614118565b80601f016020809104026020016040519081016040528092919081815260200182805461221d90614118565b801561226a5780601f1061223f5761010080835404028352916020019161226a565b820191906000526020600020905b81548152906001019060200180831161224d57829003601f168201915b5050505050815260200160018201805461228390614118565b80601f01602080910402602001604051908101604052809291908181526020018280546122af90614118565b80156122fc5780601f106122d1576101008083540402835291602001916122fc565b820191906000526020600020905b8154815290600101906020018083116122df57829003601f168201915b5050505050815260200160028201805461231590614118565b80601f016020809104026020016040519081016040528092919081815260200182805461234190614118565b801561238e5780601f106123635761010080835404028352916020019161238e565b820191906000526020600020905b81548152906001019060200180831161237157829003601f168201915b505050505081526020016003820180546123a790614118565b80601f01602080910402602001604051908101604052809291908181526020018280546123d390614118565b80156124205780601f106123f557610100808354040283529160200191612420565b820191906000526020600020905b81548152906001019060200180831161240357829003601f168201915b5050505050815260200160048201805461243990614118565b80601f016020809104026020016040519081016040528092919081815260200182805461246590614118565b80156124b25780601f10612487576101008083540402835291602001916124b2565b820191906000526020600020905b81548152906001019060200180831161249557829003601f168201915b505050919092525050509052508152604080518082018252601f548152602080548282015283015280516060810182526021805492909301929091829082906124fa90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461252690614118565b80156125735780601f1061254857610100808354040283529160200191612573565b820191906000526020600020905b81548152906001019060200180831161255657829003601f168201915b5050505050815260200160018201805461258c90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546125b890614118565b80156126055780601f106125da57610100808354040283529160200191612605565b820191906000526020600020905b8154815290600101906020018083116125e857829003601f168201915b5050505050815260200160028201805461261e90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461264a90614118565b80156126975780601f1061266c57610100808354040283529160200191612697565b820191906000526020600020905b81548152906001019060200180831161267a57829003601f168201915b505050505081525050815250905090565b60006001600160a01b0382166127125760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105bc565b506001600160a01b031660009081526003602052604090205490565b60606001805461049d90614118565b612748338383612f4a565b5050565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a0830152600681018054849384939092909160c0840191906127cd90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546127f990614118565b80156128465780601f1061281b57610100808354040283529160200191612846565b820191906000526020600020905b81548152906001019060200180831161282957829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e0909101526101408101516101008201516101208301519195509192506128c5918591610662565b5092949293505050565b6128d761367b565b60008281526031602090815260409182902082516101c0810184528154815260018201549281019290925260028101546001600160a01b039081169383019390935260038101548316606083015260048101549092166080820152600582015460a082015260068201805491929160c08401919061295490614118565b80601f016020809104026020016040519081016040528092919081815260200182805461298090614118565b80156129cd5780601f106129a2576101008083540402835291602001916129cd565b820191906000526020600020905b8154815290600101906020018083116129b057829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e09091015292915050565b602480546025546026546027805460ff9094169492939192916117e490614118565b612a5b3383612cf1565b612a775760405162461bcd60e51b81526004016105bc906141fa565b612a8384848484613019565b50505050565b602c8054602d54602e54602f805460ff9094169492939192916117e490614118565b6060612ab682612c21565b6000612acd60408051602081019091526000815290565b90506000815111612aed5760405180602001604052806000815250612b18565b80612af78461304c565b604051602001612b0892919061429a565b6040516020818303038152906040525b9392505050565b6011546001600160a01b03163314612b4a5760405163057e81db60e31b815260040160405180910390fd5b805180518291601a91612b6491839160209091019061370d565b506020828101518051612b7d926001850192019061370d565b5060408201518051612b9991600284019160209091019061370d565b5060608201518051612bb591600384019160209091019061370d565b5060808201518051612a8391600484019160209091019061370d565b60006001600160e01b031982166380ac58cd60e01b1480612c0257506001600160e01b03198216635b5e139f60e01b145b8061048857506301ffc9a760e01b6001600160e01b0319831614610488565b6000818152600260205260409020546001600160a01b0316612c805760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105bc565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612cb882611cd6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612cfd83611cd6565b9050806001600160a01b0316846001600160a01b03161480612d4457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80612d685750836001600160a01b0316612d5d84610520565b6001600160a01b0316145b949350505050565b826001600160a01b0316612d8382611cd6565b6001600160a01b031614612de75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105bc565b6001600160a01b038216612e495760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105bc565b612e5483838361314a565b612e5f600082612c83565b6001600160a01b0383166000908152600360205260408120805460019290612e88908490614169565b90915550506001600160a01b0382166000908152600360205260408120805460019290612eb6908490614265565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612f218383613202565b612f2e6000848484613350565b61065d5760405162461bcd60e51b81526004016105bc906142c9565b816001600160a01b0316836001600160a01b03161415612fac5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105bc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613024848484612d70565b61303084848484613350565b612a835760405162461bcd60e51b81526004016105bc906142c9565b6060816130705750506040805180820190915260018152600360fc1b602082015290565b8160005b811561309a5780613084816141df565b91506130939050600a836141b5565b9150613074565b60008167ffffffffffffffff8111156130b5576130b5613e98565b6040519080825280601f01601f1916602001820160405280156130df576020820181803683370190505b5090505b8415612d68576130f4600183614169565b9150613101600a8661431b565b61310c906030614265565b60f81b818381518110613121576131216141c9565b60200101906001600160f81b031916908160001a905350613143600a866141b5565b94506130e3565b6001600160a01b0383166131a5576131a081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6131c8565b816001600160a01b0316836001600160a01b0316146131c8576131c8838261345d565b6001600160a01b0382166131df5761065d816134fa565b826001600160a01b0316826001600160a01b03161461065d5761065d82826135a9565b6001600160a01b0382166132585760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105bc565b6000818152600260205260409020546001600160a01b0316156132bd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105bc565b6132c96000838361314a565b6001600160a01b03821660009081526003602052604081208054600192906132f2908490614265565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561345257604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061339490339089908890889060040161432f565b602060405180830381600087803b1580156133ae57600080fd5b505af19250505080156133de575060408051601f3d908101601f191682019092526133db91810190614362565b60015b613438573d80801561340c576040519150601f19603f3d011682016040523d82523d6000602084013e613411565b606091505b5080516134305760405162461bcd60e51b81526004016105bc906142c9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612d68565b506001949350505050565b6000600161346a846126a8565b6134749190614169565b6000838152600760205260409020549091508082146134c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061350c90600190614169565b60008381526009602052604081205460088054939450909284908110613534576135346141c9565b906000526020600020015490508060088381548110613555576135556141c9565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061358d5761358d61437f565b6001900381819060005260206000200160009055905550505050565b60006135b4836126a8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806101400160405280606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001606081526020016060815260200160608152602001606081526020016136766040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b905290565b604051806101c00160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b82805461371990614118565b90600052602060002090601f01602090048101928261373b5760008555613781565b82601f1061375457805160ff1916838001178555613781565b82800160010185558215613781579182015b82811115613781578251825591602001919060010190613766565b5061378d929150613846565b5090565b60405180608001604052806137ee6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016137fb6135ed565b815260200161381d604051806040016040528060008152602001600081525090565b815260200161367660405180606001604052806060815260200160608152602001606081525090565b5b8082111561378d5760008155600101613847565b6001600160e01b031981168114612c8057600080fd5b60006020828403121561388357600080fd5b8135612b188161385b565b60005b838110156138a9578181015183820152602001613891565b83811115612a835750506000910152565b600081518084526138d281602086016020860161388e565b601f01601f19169290920160200192915050565b602081526000612b1860208301846138ba565b60006020828403121561390b57600080fd5b5035919050565b6001600160a01b0381168114612c8057600080fd5b6000806040838503121561393a57600080fd5b823561394581613912565b946020939093013593505050565b60008060006060848603121561396857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561399157600080fd5b8135612b1881613912565b6000815160a084526139b160a08501826138ba565b9050602083015184820360208601526139ca82826138ba565b915050604083015184820360408601526139e482826138ba565b915050606083015184820360608601526139fe82826138ba565b91505060808301518482036080860152613a1882826138ba565b95945050505050565b60006101408251818552613a37828601826138ba565b91505060208301518482036020860152613a5182826138ba565b9150506040830151613a6e60408601826001600160a01b03169052565b506060830151613a83606086018260ff169052565b5060808301518482036080860152613a9b82826138ba565b91505060a083015184820360a0860152613ab582826138ba565b91505060c083015184820360c0860152613acf82826138ba565b91505060e083015184820360e0860152613ae982826138ba565b9150506101008084015185830382870152613b0483826138ba565b925050506101208084015185830382870152613b20838261399c565b9695505050505050565b60006101c082518452602083015160208501526040830151613b5760408601826001600160a01b03169052565b506060830151613b7260608601826001600160a01b03169052565b506080830151613b8d60808601826001600160a01b03169052565b5060a083015160a085015260c08301518160c0860152613baf828601826138ba565b91505060e0830151613bc660e086018260ff169052565b506101008381015190850152610120808401519085015261014080840151908501526101608084015115159085015261018080840151908501526101a09283015160ff1692909301919091525090565b604081526000613c296040830185613a21565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015613c7957601f19878403018552613c67838351613b2a565b94860194925090850190600101613c4b565b50909998505050505050505050565b600080600060608486031215613c9d57600080fd5b8335613ca881613912565b92506020840135613cb881613912565b929592945050506040919091013590565b60008060408385031215613cdc57600080fd5b82359150602083013560038110613cf257600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b600060038610613d3357634e487b7160e01b600052602160045260246000fd5b85825284602083015283604083015260806060830152613b2060808301846138ba565b6000815160608452613d6b60608501826138ba565b905060208301518482036020860152613d8482826138ba565b91505060408301518482036040860152613a1882826138ba565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e0860152505050602083015161016080610100850152613e15610180850183613a21565b60408601518051610120870152602001516101408601526060860151858203601f190183870152909250613b208382613d56565b8015158114612c8057600080fd5b60008060408385031215613e6a57600080fd5b8235613e7581613912565b91506020830135613cf281613e49565b602081526000612b186020830184613b2a565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613ed157613ed1613e98565b60405290565b600067ffffffffffffffff80841115613ef257613ef2613e98565b604051601f8501601f19908116603f01168101908282118183101715613f1a57613f1a613e98565b81604052809350858152868686011115613f3357600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613f6357600080fd5b8435613f6e81613912565b93506020850135613f7e81613912565b925060408501359150606085013567ffffffffffffffff811115613fa157600080fd5b8501601f81018713613fb257600080fd5b613fc187823560208401613ed7565b91505092959194509250565b600082601f830112613fde57600080fd5b612b1883833560208501613ed7565b600060208284031215613fff57600080fd5b813567ffffffffffffffff8082111561401757600080fd5b9083019060a0828603121561402b57600080fd5b614033613eae565b82358281111561404257600080fd5b61404e87828601613fcd565b82525060208301358281111561406357600080fd5b61406f87828601613fcd565b60208301525060408301358281111561408757600080fd5b61409387828601613fcd565b6040830152506060830135828111156140ab57600080fd5b6140b787828601613fcd565b6060830152506080830135828111156140cf57600080fd5b6140db87828601613fcd565b60808301525095945050505050565b600080604083850312156140fd57600080fd5b823561410881613912565b91506020830135613cf281613912565b600181811c9082168061412c57607f821691505b6020821081141561414d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561417b5761417b614153565b500390565b600081600019048311821515161561419a5761419a614153565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826141c4576141c461419f565b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156141f3576141f3614153565b5060010190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561425a57600080fd5b8151612b1881613912565b6000821982111561427857614278614153565b500190565b60006020828403121561428f57600080fd5b8151612b1881613e49565b600083516142ac81846020880161388e565b8351908301906142c081836020880161388e565b01949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261432a5761432a61419f565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613b20908301846138ba565b60006020828403121561437457600080fd5b8151612b188161385b565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f2538a25bf1abea670c9b8042a2ddaf71732830552368376a853f1eb9db1fcc664736f6c63430008090033a2646970667358221220155772e6d21fb48963c4c16dc2aea599965c1e2b0ff17817b15169ad010f2e2864736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200009f5760003560e01c80638da5cb5b116200006e5780638da5cb5b1462000136578063c73b302e1462000148578063d4f47e931462000161578063ddca3f431462000175578063f2fde38b146200017f57600080fd5b80635055149c14620000a4578063715018a614620000ed5780637cf12d6614620000f957806386959b4b1462000110575b600080fd5b620000d0620000b53660046200056a565b6000908152600560205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b620000f762000196565b005b620000f76200010a366004620008b0565b620001ae565b620001276200012136600462000a9e565b620003b9565b604051620000e4919062000ac3565b6000546001600160a01b0316620000d0565b6200015260035481565b604051908152602001620000e4565b600154620000d0906001600160a01b031681565b6200015260025481565b620000f76200019036600462000a9e565b62000431565b620001a0620004b0565b620001ac60006200050c565b565b81514210620002045760405162461bcd60e51b815260206004820152601e60248201527f53746172742074696d652073686f756c6420626520696e20667574757265000060448201526064015b60405180910390fd5b60038054906000620002168362000b12565b91905055506000600354848484600160009054906101000a90046001600160a01b03163360405162000248906200055c565b620002599695949392919062000c69565b604051809103906000f08015801562000276573d6000803e3d6000fd5b50604085810180516001600160a01b0390811660009081526004602081815285832080546001810182559084528184200180548886166001600160a01b03199182168117909255600354855260058352938790208054909416811790935593519389015194516323b872dd60e01b8152339181019190915260248101919091526044810193909352929350909116906323b872dd90606401602060405180830381600087803b1580156200032957600080fd5b505af11580156200033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000364919062000e04565b5060035460408581015181519283526001600160a01b0384811660208501521682820152517fdffe5be4b28e9feff47252db2cf2054aef948f89043d4ba606b2c6a0fd0cff0d9181900360600190a150505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156200042557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000406575b50505050509050919050565b6200043b620004b0565b6001600160a01b038116620004a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001fb565b620004ad816200050c565b50565b6000546001600160a01b03163314620001ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6151968062000e2983390190565b6000602082840312156200057d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715620005c057620005c062000584565b60405290565b604051610140810167ffffffffffffffff81118282101715620005c057620005c062000584565b600082601f830112620005ff57600080fd5b813567ffffffffffffffff808211156200061d576200061d62000584565b604051601f8301601f19908116603f0116810190828211818310171562000648576200064862000584565b816040528381528660208588010111156200066257600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200069a57600080fd5b919050565b803560ff811681146200069a57600080fd5b600060a08284031215620006c457600080fd5b620006ce6200059a565b9050813567ffffffffffffffff80821115620006e957600080fd5b620006f785838601620005ed565b835260208401359150808211156200070e57600080fd5b6200071c85838601620005ed565b602084015260408401359150808211156200073657600080fd5b6200074485838601620005ed565b604084015260608401359150808211156200075e57600080fd5b6200076c85838601620005ed565b606084015260808401359150808211156200078657600080fd5b506200079584828501620005ed565b60808301525092915050565b600060408284031215620007b457600080fd5b6040516040810181811067ffffffffffffffff82111715620007da57620007da62000584565b604052823581526020928301359281019290925250919050565b6000606082840312156200080757600080fd5b6040516060810167ffffffffffffffff82821081831117156200082e576200082e62000584565b8160405282935084359150808211156200084757600080fd5b6200085586838701620005ed565b835260208501359150808211156200086c57600080fd5b6200087a86838701620005ed565b602084015260408501359150808211156200089457600080fd5b50620008a385828601620005ed565b6040830152505092915050565b600080600060808486031215620008c657600080fd5b833567ffffffffffffffff80821115620008df57600080fd5b908501906101408288031215620008f557600080fd5b620008ff620005c6565b8235828111156200090f57600080fd5b6200091d89828601620005ed565b8252506020830135828111156200093357600080fd5b6200094189828601620005ed565b602083015250620009556040840162000682565b604082015262000968606084016200069f565b60608201526080830135828111156200098057600080fd5b6200098e89828601620005ed565b60808301525060a083013582811115620009a757600080fd5b620009b589828601620005ed565b60a08301525060c083013582811115620009ce57600080fd5b620009dc89828601620005ed565b60c08301525060e083013582811115620009f557600080fd5b62000a0389828601620005ed565b60e083015250610100808401358381111562000a1e57600080fd5b62000a2c8a828701620005ed565b828401525050610120808401358381111562000a4757600080fd5b62000a558a828701620006b1565b8284015250508095505062000a6e8760208801620007a1565b9350606086013591508082111562000a8557600080fd5b5062000a9486828701620007f4565b9150509250925092565b60006020828403121562000ab157600080fd5b62000abc8262000682565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101562000b065783516001600160a01b03168352928401929184019160010162000adf565b50909695505050505050565b600060001982141562000b3557634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815180845260005b8181101562000b645760208185018101518683018201520162000b46565b8181111562000b77576000602083870101525b50601f01601f19169290920160200192915050565b6000815160a0845262000ba360a085018262000b3c565b90506020830151848203602086015262000bbe828262000b3c565b9150506040830151848203604086015262000bda828262000b3c565b9150506060830151848203606086015262000bf6828262000b3c565b9150506080830151848203608086015262000c12828262000b3c565b95945050505050565b600081516060845262000c32606085018262000b3c565b90506020830151848203602086015262000c4d828262000b3c565b9150506040830151848203604086015262000c12828262000b3c565b86815260e06020820152600086516101408060e085015262000c9061022085018362000b3c565b9150602089015160df1961010081878603018188015262000cb2858462000b3c565b945060408c0151925061012062000cd3818901856001600160a01b03169052565b60608d015160ff811689870152935060808d01519450828887030161016089015262000d00868662000b3c565b955060a08d01519450828887030161018089015262000d20868662000b3c565b955060c08d0151945082888703016101a089015262000d40868662000b3c565b955060e08d0151945082888703016101c089015262000d60868662000b3c565b9550818d0151945082888703016101e089015262000d7f868662000b3c565b9550808d0151945050508086850301610200870152505062000da2828262000b8c565b8851604086015260208901516060860152915062000dbd9050565b828103608084015262000dd1818762000c1b565b91505062000dea60a08301856001600160a01b03169052565b6001600160a01b03831660c0830152979650505050505050565b60006020828403121562000e1757600080fd5b8151801515811462000abc57600080fdfe6101006040526000608090815260a06200001c6001605a620007d9565b8152601e6020808301919091526040805191820181526000825290910152805160248054909190829060ff19166001836002811115620000605762000060620007c3565b02179055506020828101516001830155604083015160028301556060830151805162000093926003850192019062000699565b5050604080516080810190915290508060018152602001620000b8600160b4620007d9565b815260326020808301919091526040805191820181526000825290910152805160288054909190829060ff19166001836002811115620000fc57620000fc620007c3565b0217905550602082810151600183015560408301516002830155606083015180516200012f926003850192019062000699565b505060408051608081019091529050806002815260200162000155600161016d620007d9565b8152605060208083019190915260408051918201815260008252909101528051602c8054909190829060ff19166001836002811115620001995762000199620007c3565b021790555060208281015160018301556040830151600283015560608301518051620001cc926003850192019062000699565b505050348015620001dc57600080fd5b506040516200519638038062005196833981016040819052620001ff9162000b62565b8451805181906200021890600090602084019062000699565b5080516200022e90600190602084019062000699565b5050835180516200024792506027916020019062000699565b5060208084015180516200026092602b92019062000699565b50604083015180516200027c91602f9160209091019062000699565b50600080526030602052602480547f686dc217b182b1fe88c7defdc5cd77807fc691ce05a160638669d7322051eee08054909160ff1690829060ff19166001836002811115620002d057620002d0620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620002ff9062000d7e565b6200030c92919062000728565b5050600160008190526030602052602880547fc7874712a1c7fb891b421aa6c0d42dbf3cd912d7a18f183783fb32e938cbaa0180549294509260ff90911691839160ff1990911690836002811115620003695762000369620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620003989062000d7e565b620003a592919062000728565b5050600260008190526030602052602c80547f89a47dfbb363dd4e64da56b4585033c9abd8a425d24b94630469c44bee7189c280549294509260ff90911691839160ff19909116906001908490811115620004045762000404620007c3565b021790555060018201548160010155600282015481600201556003820181600301908054620004339062000d7e565b6200044092919062000728565b5050855180518792506012916200045d9183916020019062000699565b50602082810151805162000478926001850192019062000699565b506040820151600282018054606085015160ff16600160a01b026001600160a81b03199091166001600160a01b039093169290921791909117905560808201518051620004d091600384019160209091019062000699565b5060a08201518051620004ee91600484019160209091019062000699565b5060c082015180516200050c91600584019160209091019062000699565b5060e082015180516200052a91600684019160209091019062000699565b5061010082015180516200054991600784019160209091019062000699565b506101208201518051805160088401916200056a9183916020019062000699565b50602082810151805162000585926001850192019062000699565b5060408201518051620005a391600284019160209091019062000699565b5060608201518051620005c191600384019160209091019062000699565b5060808201518051620005df91600484019160209091019062000699565b50508651601f5550505060208085015181558351805185926021926200060c928492919091019062000699565b50602082810151805162000627926001850192019062000699565b50604082015180516200064591600284019160209091019062000699565b505050600b95909555600c8054306001600160a01b03199182161790915560209390930151600d556011805484166001600160a01b03968716179055600a805490931694169390931790555062000dbb9050565b828054620006a79062000d7e565b90600052602060002090601f016020900481019282620006cb576000855562000716565b82601f10620006e657805160ff191683800117855562000716565b8280016001018555821562000716579182015b8281111562000716578251825591602001919060010190620006f9565b5062000724929150620007ac565b5090565b828054620007369062000d7e565b90600052602060002090601f0160209004810192826200075a576000855562000716565b82601f106200076d578054855562000716565b828001600101855582156200071657600052602060002091601f016020900482015b82811115620007165782548255916001019190600101906200078f565b5b80821115620007245760008155600101620007ad565b634e487b7160e01b600052602160045260246000fd5b60008160001904831182151516156200080257634e487b7160e01b600052601160045260246000fd5b500290565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000842576200084262000807565b60405290565b60405161014081016001600160401b038111828210171562000842576200084262000807565b604051601f8201601f191681016001600160401b038111828210171562000899576200089962000807565b604052919050565b600082601f830112620008b357600080fd5b81516001600160401b03811115620008cf57620008cf62000807565b6020620008e5601f8301601f191682016200086e565b8281528582848701011115620008fa57600080fd5b60005b838110156200091a578581018301518282018401528201620008fd565b838111156200092c5760008385840101525b5095945050505050565b80516001600160a01b03811681146200094e57600080fd5b919050565b805160ff811681146200094e57600080fd5b600060a082840312156200097857600080fd5b620009826200081d565b82519091506001600160401b03808211156200099d57600080fd5b620009ab85838601620008a1565b83526020840151915080821115620009c257600080fd5b620009d085838601620008a1565b60208401526040840151915080821115620009ea57600080fd5b620009f885838601620008a1565b6040840152606084015191508082111562000a1257600080fd5b62000a2085838601620008a1565b6060840152608084015191508082111562000a3a57600080fd5b5062000a4984828501620008a1565b60808301525092915050565b60006040828403121562000a6857600080fd5b604080519081016001600160401b038111828210171562000a8d5762000a8d62000807565b604052825181526020928301519281019290925250919050565b60006060828403121562000aba57600080fd5b604051606081016001600160401b03808211838310171562000ae05762000ae062000807565b81604052829350845191508082111562000af957600080fd5b62000b0786838701620008a1565b8352602085015191508082111562000b1e57600080fd5b62000b2c86838701620008a1565b6020840152604085015191508082111562000b4657600080fd5b5062000b5585828601620008a1565b6040830152505092915050565b60008060008060008060e0878903121562000b7c57600080fd5b865160208801519096506001600160401b038082111562000b9c57600080fd5b90880190610140828b03121562000bb257600080fd5b62000bbc62000848565b82518281111562000bcc57600080fd5b62000bda8c828601620008a1565b82525060208301518281111562000bf057600080fd5b62000bfe8c828601620008a1565b60208301525062000c126040840162000936565b604082015262000c256060840162000953565b606082015260808301518281111562000c3d57600080fd5b62000c4b8c828601620008a1565b60808301525060a08301518281111562000c6457600080fd5b62000c728c828601620008a1565b60a08301525060c08301518281111562000c8b57600080fd5b62000c998c828601620008a1565b60c08301525060e08301518281111562000cb257600080fd5b62000cc08c828601620008a1565b60e083015250610100808401518381111562000cdb57600080fd5b62000ce98d828701620008a1565b828401525050610120808401518381111562000d0457600080fd5b62000d128d82870162000965565b8284015250508097505062000d2b8a60408b0162000a55565b9550608089015191508082111562000d4257600080fd5b5062000d5189828a0162000aa7565b93505062000d6260a0880162000936565b915062000d7260c0880162000936565b90509295509295509295565b600181811c9082168062000d9357607f821691505b6020821081141562000db557634e487b7160e01b600052602260045260246000fd5b50919050565b6143cb8062000dcb6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636352211e116100f9578063b78bec7811610097578063c87b56dd11610071578063c87b56dd146103ee578063c948b74a14610401578063d4f47e9314610414578063e985e9c51461042757600080fd5b8063b78bec78146103cb578063b88d4fde146103d3578063c3880b22146103e657600080fd5b806395d89b41116100d357806395d89b4114610368578063a22cb46514610370578063a3a4393114610383578063b09afec1146103ab57600080fd5b80636352211e1461032d57806367c897fe1461034057806370a082311461035557600080fd5b806323b872dd116101665780633776ee78116101405780633776ee78146102dc57806342842e0e146102f45780634f6ccce714610307578063608e4dd01461031a57600080fd5b806323b872dd146102a3578063277c2d68146102b65780632f745c59146102c957600080fd5b8063095ea7b3116101a2578063095ea7b31461023157806318160ddd146102465780631df025c61461025857806320e0c51c1461028257600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d7366004613871565b610463565b60405190151581526020015b60405180910390f35b6101f961048e565b6040516101e891906138e6565b6102196102143660046138f9565b610520565b6040516001600160a01b0390911681526020016101e8565b61024461023f366004613927565b610547565b005b6008545b6040519081526020016101e8565b61026b610266366004613953565b610662565b6040805192835260ff9091166020830152016101e8565b61029561029036600461397f565b610720565b6040516101e8929190613c16565b6102446102b1366004613c88565b611065565b6102446102c4366004613cc9565b611096565b61024a6102d7366004613927565b61172c565b6102e46117c2565b6040516101e89493929190613d13565b610244610302366004613c88565b611867565b61024a6103153660046138f9565b611882565b6102446103283660046138f9565b611915565b61021961033b3660046138f9565b611cd6565b610348611d36565b6040516101e89190613d9e565b61024a61036336600461397f565b6126a8565b6101f961272e565b61024461037e366004613e57565b61273d565b6103966103913660046138f9565b61274c565b604080519283526020830191909152016101e8565b6103be6103b93660046138f9565b6128cf565b6040516101e89190613e85565b6102e4612a2f565b6102446103e1366004613f4d565b612a51565b6102e4612a89565b6101f96103fc3660046138f9565b612aab565b61024461040f366004613fed565b612b1f565b600a54610219906001600160a01b031681565b6101dc6104353660046140ea565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b1480610488575061048882612bd1565b92915050565b60606000805461049d90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546104c990614118565b80156105165780601f106104eb57610100808354040283529160200191610516565b820191906000526020600020905b8154815290600101906020018083116104f957829003601f168201915b5050505050905090565b600061052b82612c21565b506000908152600460205260409020546001600160a01b031690565b600061055282611cd6565b9050806001600160a01b0316836001600160a01b031614156105c55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105e157506105e18133610435565b6106535760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105bc565b61065d8383612c83565b505050565b600080806106708585614169565b9050600061067e8642614169565b905060008261068e836064614180565b61069891906141b5565b905060328110156106b0576000935060009450610715565b603281101580156106c15750605081105b156106e757601e935060646106d6858a614180565b6106e091906141b5565b9450610715565b605081101580156106f85750606481105b1561070d576032935060646106d68986614180565b606493508794505b505050935093915050565b6107286135ed565b60606000610735846126a8565b905060008167ffffffffffffffff81111561075257610752613e98565b60405190808252806020026020018201604052801561078b57816020015b61077861367b565b8152602001906001900390816107705790505b50905060005b828110156109355760006107a5878361172c565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a083015260068101805494955092939192909160c08401919061082790614118565b80601f016020809104026020016040519081016040528092919081815260200182805461085390614118565b80156108a05780601f10610875576101008083540402835291602001916108a0565b820191906000526020600020905b81548152906001019060200180831161088357829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e09091015284519091508190859085908110610915576109156141c9565b60200260200101819052505050808061092d906141df565b915050610791565b50601281816040518061014001604052908160008201805461095690614118565b80601f016020809104026020016040519081016040528092919081815260200182805461098290614118565b80156109cf5780601f106109a4576101008083540402835291602001916109cf565b820191906000526020600020905b8154815290600101906020018083116109b257829003601f168201915b505050505081526020016001820180546109e890614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1490614118565b8015610a615780601f10610a3657610100808354040283529160200191610a61565b820191906000526020600020905b815481529060010190602001808311610a4457829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff166040820152600382018054606090920191610aa190614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610acd90614118565b8015610b1a5780601f10610aef57610100808354040283529160200191610b1a565b820191906000526020600020905b815481529060010190602001808311610afd57829003601f168201915b50505050508152602001600482018054610b3390614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f90614118565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b50505050508152602001600582018054610bc590614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190614118565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b50505050508152602001600682018054610c5790614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8390614118565b8015610cd05780601f10610ca557610100808354040283529160200191610cd0565b820191906000526020600020905b815481529060010190602001808311610cb357829003601f168201915b50505050508152602001600782018054610ce990614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1590614118565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b50505050508152602001600882016040518060a0016040529081600082018054610d8b90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610db790614118565b8015610e045780601f10610dd957610100808354040283529160200191610e04565b820191906000526020600020905b815481529060010190602001808311610de757829003601f168201915b50505050508152602001600182018054610e1d90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4990614118565b8015610e965780601f10610e6b57610100808354040283529160200191610e96565b820191906000526020600020905b815481529060010190602001808311610e7957829003601f168201915b50505050508152602001600282018054610eaf90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610edb90614118565b8015610f285780601f10610efd57610100808354040283529160200191610f28565b820191906000526020600020905b815481529060010190602001808311610f0b57829003601f168201915b50505050508152602001600382018054610f4190614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6d90614118565b8015610fba5780601f10610f8f57610100808354040283529160200191610fba565b820191906000526020600020905b815481529060010190602001808311610f9d57829003601f168201915b50505050508152602001600482018054610fd390614118565b80601f0160208091040260200160405190810160405280929190818152602001828054610fff90614118565b801561104c5780601f106110215761010080835404028352916020019161104c565b820191906000526020600020905b81548152906001019060200180831161102f57829003601f168201915b5050509190925250505090525097909650945050505050565b61106f3382612cf1565b61108b5760405162461bcd60e51b81526004016105bc906141fa565b61065d838383612d70565b601f544210156110b957604051638f2d4c2d60e01b815260040160405180910390fd5b6000603060008360028111156110d1576110d1613cfd565b60028111156110e2576110e2613cfd565b8152602081019190915260409081016000208151608081019092528054829060ff16600281111561111557611115613cfd565b600281111561112657611126613cfd565b8152602001600182015481526020016002820154815260200160038201805461114e90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461117a90614118565b80156111c75780601f1061119c576101008083540402835291602001916111c7565b820191906000526020600020905b8154815290600101906020018083116111aa57829003601f168201915b5050505050815250509050600060648260400151856111e69190614180565b6111f091906141b5565b905080600b600201541015611218576040516348eb126760e11b815260040160405180910390fd5b600a5460405163677755bb60e01b81523360048201526000916001600160a01b03169063677755bb9060240160206040518083038186803b15801561125c57600080fd5b505afa158015611270573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112949190614248565b90506001600160a01b03811661132457600a546040516331b77b8960e21b81523360048201526001600160a01b039091169063c6ddee2490602401602060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113219190614248565b90505b60108054906000611334836141df565b919050555060006030600086600281111561135157611351613cfd565b600281111561136257611362613cfd565b8152602001908152602001600020600301805461137e90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa90614118565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b5050604080516101c081018252600b548152602081018c90526014546001600160a01b0390811692820192909252336060820152908716608082015260105460a082015260c081018590529394505060e083019150879050600281111561146057611460613cfd565b60ff16815260200142815260200185602001514261147e9190614265565b8152602080820186905260006040808401829052606080850183905260809485018390526010548352603184529181902085518155858401516001820155908501516002820180546001600160a01b03199081166001600160a01b039384161790915592860151600383018054851691831691909117905593850151600482018054909316941693909317905560a0830151600583015560c0830151805161152c926006850192019061370d565b5060e082015160078201805460ff1990811660ff9384161790915561010084015160088401556101208401516009840155610140840151600a840155610160840151600b840180548316911515919091179055610180840151600c8401556101a090930151600d909201805490931691161790556014546040516323b872dd60e01b81523360048201526001600160a01b03848116602483015260448201899052909116906323b872dd90606401602060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c919061427d565b5082600b60020160008282546116429190614169565b9091555050600e805487919060009061165c908490614265565b9091555050600f8054906000611671836141df565b90915550506010546040516bffffffffffffffffffffffff193060601b1660208201526116b1918491603401604051602081830303815290604052612f17565b600b546010547fbbd184b832a658705e19e15121bf8abb81df8e6c59469af906e22fdf841bbffa919033898960028111156116ee576116ee613cfd565b6040805195865260208601949094526001600160a01b039290921684840152606084015260ff166080830152519081900360a00190a1505050505050565b6000611737836126a8565b82106117995760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105bc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60288054602954602a54602b805460ff9094169492939192916117e490614118565b80601f016020809104026020016040519081016040528092919081815260200182805461181090614118565b801561185d5780601f106118325761010080835404028352916020019161185d565b820191906000526020600020905b81548152906001019060200180831161184057829003601f168201915b5050505050905084565b61065d83838360405180602001604052806000815250612a51565b600061188d60085490565b82106118f05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105bc565b60088281548110611903576119036141c9565b90600052602060002001549050919050565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a083015260068101805460c08401919061198e90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546119ba90614118565b8015611a075780601f106119dc57610100808354040283529160200191611a07565b820191906000526020600020905b8154815290600101906020018083116119ea57829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a830154608080840191909152600b8401548216151560a0840152600c84015460c0840152600d909301541660e0909101528101519091506001600160a01b03163314611ac25760405162461bcd60e51b815260206004820152601960248201527f4e6f7420417574686f72697a656420746f20556e7374616b650000000000000060448201526064016105bc565b600081610140015111611b0d5760405162461bcd60e51b8152602060048201526013602482015272139bdd1a1a5b99c81d1bc81d5b9cdd185ad959606a1b60448201526064016105bc565b80610160015115611b535760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481d5b9cdd185ad95960821b60448201526064016105bc565b6000828152603160205260408120600b01805460ff191660011790556101408201516101008301516101208401518392611b8e929091610662565b6000868152603160205260408120600c8101849055600d01805460ff191660ff841617905561014086015192945090925090611bcb908490614169565b905080600b6002016000828254611be29190614265565b9091555050601454606085015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291169063a9059cbb90604401602060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c71919061427d565b50600b5460208581015160e08701516040805194855233938501939093529183015260ff166060820152608081018490527f8958f0c58afef19b6642cac81ae35a14e955e85b5d55cdc65c7d502eb592fe0d9060a00160405180910390a15050505050565b6000818152600260205260408120546001600160a01b0316806104885760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105bc565b611d3e613791565b6040805161016081018252600b5460808201908152600c546001600160a01b0390811660a0840152600d5460c0840152600e5460e0840152600f5461010084015260105461012084015260115416610140808401919091529082528251908101909252601280549192602084019290919082908290611dbc90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611de890614118565b8015611e355780601f10611e0a57610100808354040283529160200191611e35565b820191906000526020600020905b815481529060010190602001808311611e1857829003601f168201915b50505050508152602001600182018054611e4e90614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7a90614118565b8015611ec75780601f10611e9c57610100808354040283529160200191611ec7565b820191906000526020600020905b815481529060010190602001808311611eaa57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff166040820152600382018054606090920191611f0790614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3390614118565b8015611f805780601f10611f5557610100808354040283529160200191611f80565b820191906000526020600020905b815481529060010190602001808311611f6357829003601f168201915b50505050508152602001600482018054611f9990614118565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc590614118565b80156120125780601f10611fe757610100808354040283529160200191612012565b820191906000526020600020905b815481529060010190602001808311611ff557829003601f168201915b5050505050815260200160058201805461202b90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461205790614118565b80156120a45780601f10612079576101008083540402835291602001916120a4565b820191906000526020600020905b81548152906001019060200180831161208757829003601f168201915b505050505081526020016006820180546120bd90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546120e990614118565b80156121365780601f1061210b57610100808354040283529160200191612136565b820191906000526020600020905b81548152906001019060200180831161211957829003601f168201915b5050505050815260200160078201805461214f90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461217b90614118565b80156121c85780601f1061219d576101008083540402835291602001916121c8565b820191906000526020600020905b8154815290600101906020018083116121ab57829003601f168201915b50505050508152602001600882016040518060a00160405290816000820180546121f190614118565b80601f016020809104026020016040519081016040528092919081815260200182805461221d90614118565b801561226a5780601f1061223f5761010080835404028352916020019161226a565b820191906000526020600020905b81548152906001019060200180831161224d57829003601f168201915b5050505050815260200160018201805461228390614118565b80601f01602080910402602001604051908101604052809291908181526020018280546122af90614118565b80156122fc5780601f106122d1576101008083540402835291602001916122fc565b820191906000526020600020905b8154815290600101906020018083116122df57829003601f168201915b5050505050815260200160028201805461231590614118565b80601f016020809104026020016040519081016040528092919081815260200182805461234190614118565b801561238e5780601f106123635761010080835404028352916020019161238e565b820191906000526020600020905b81548152906001019060200180831161237157829003601f168201915b505050505081526020016003820180546123a790614118565b80601f01602080910402602001604051908101604052809291908181526020018280546123d390614118565b80156124205780601f106123f557610100808354040283529160200191612420565b820191906000526020600020905b81548152906001019060200180831161240357829003601f168201915b5050505050815260200160048201805461243990614118565b80601f016020809104026020016040519081016040528092919081815260200182805461246590614118565b80156124b25780601f10612487576101008083540402835291602001916124b2565b820191906000526020600020905b81548152906001019060200180831161249557829003601f168201915b505050919092525050509052508152604080518082018252601f548152602080548282015283015280516060810182526021805492909301929091829082906124fa90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461252690614118565b80156125735780601f1061254857610100808354040283529160200191612573565b820191906000526020600020905b81548152906001019060200180831161255657829003601f168201915b5050505050815260200160018201805461258c90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546125b890614118565b80156126055780601f106125da57610100808354040283529160200191612605565b820191906000526020600020905b8154815290600101906020018083116125e857829003601f168201915b5050505050815260200160028201805461261e90614118565b80601f016020809104026020016040519081016040528092919081815260200182805461264a90614118565b80156126975780601f1061266c57610100808354040283529160200191612697565b820191906000526020600020905b81548152906001019060200180831161267a57829003601f168201915b505050505081525050815250905090565b60006001600160a01b0382166127125760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105bc565b506001600160a01b031660009081526003602052604090205490565b60606001805461049d90614118565b612748338383612f4a565b5050565b600081815260316020908152604080832081516101c0810183528154815260018201549381019390935260028101546001600160a01b039081169284019290925260038101548216606084015260048101549091166080830152600581015460a0830152600681018054849384939092909160c0840191906127cd90614118565b80601f01602080910402602001604051908101604052809291908181526020018280546127f990614118565b80156128465780601f1061281b57610100808354040283529160200191612846565b820191906000526020600020905b81548152906001019060200180831161282957829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e0909101526101408101516101008201516101208301519195509192506128c5918591610662565b5092949293505050565b6128d761367b565b60008281526031602090815260409182902082516101c0810184528154815260018201549281019290925260028101546001600160a01b039081169383019390935260038101548316606083015260048101549092166080820152600582015460a082015260068201805491929160c08401919061295490614118565b80601f016020809104026020016040519081016040528092919081815260200182805461298090614118565b80156129cd5780601f106129a2576101008083540402835291602001916129cd565b820191906000526020600020905b8154815290600101906020018083116129b057829003601f168201915b5050509183525050600782015460ff90811660208301526008830154604083015260098301546060830152600a8301546080830152600b8301548116151560a0830152600c83015460c0830152600d9092015490911660e09091015292915050565b602480546025546026546027805460ff9094169492939192916117e490614118565b612a5b3383612cf1565b612a775760405162461bcd60e51b81526004016105bc906141fa565b612a8384848484613019565b50505050565b602c8054602d54602e54602f805460ff9094169492939192916117e490614118565b6060612ab682612c21565b6000612acd60408051602081019091526000815290565b90506000815111612aed5760405180602001604052806000815250612b18565b80612af78461304c565b604051602001612b0892919061429a565b6040516020818303038152906040525b9392505050565b6011546001600160a01b03163314612b4a5760405163057e81db60e31b815260040160405180910390fd5b805180518291601a91612b6491839160209091019061370d565b506020828101518051612b7d926001850192019061370d565b5060408201518051612b9991600284019160209091019061370d565b5060608201518051612bb591600384019160209091019061370d565b5060808201518051612a8391600484019160209091019061370d565b60006001600160e01b031982166380ac58cd60e01b1480612c0257506001600160e01b03198216635b5e139f60e01b145b8061048857506301ffc9a760e01b6001600160e01b0319831614610488565b6000818152600260205260409020546001600160a01b0316612c805760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105bc565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612cb882611cd6565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612cfd83611cd6565b9050806001600160a01b0316846001600160a01b03161480612d4457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80612d685750836001600160a01b0316612d5d84610520565b6001600160a01b0316145b949350505050565b826001600160a01b0316612d8382611cd6565b6001600160a01b031614612de75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105bc565b6001600160a01b038216612e495760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105bc565b612e5483838361314a565b612e5f600082612c83565b6001600160a01b0383166000908152600360205260408120805460019290612e88908490614169565b90915550506001600160a01b0382166000908152600360205260408120805460019290612eb6908490614265565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612f218383613202565b612f2e6000848484613350565b61065d5760405162461bcd60e51b81526004016105bc906142c9565b816001600160a01b0316836001600160a01b03161415612fac5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105bc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613024848484612d70565b61303084848484613350565b612a835760405162461bcd60e51b81526004016105bc906142c9565b6060816130705750506040805180820190915260018152600360fc1b602082015290565b8160005b811561309a5780613084816141df565b91506130939050600a836141b5565b9150613074565b60008167ffffffffffffffff8111156130b5576130b5613e98565b6040519080825280601f01601f1916602001820160405280156130df576020820181803683370190505b5090505b8415612d68576130f4600183614169565b9150613101600a8661431b565b61310c906030614265565b60f81b818381518110613121576131216141c9565b60200101906001600160f81b031916908160001a905350613143600a866141b5565b94506130e3565b6001600160a01b0383166131a5576131a081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6131c8565b816001600160a01b0316836001600160a01b0316146131c8576131c8838261345d565b6001600160a01b0382166131df5761065d816134fa565b826001600160a01b0316826001600160a01b03161461065d5761065d82826135a9565b6001600160a01b0382166132585760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105bc565b6000818152600260205260409020546001600160a01b0316156132bd5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105bc565b6132c96000838361314a565b6001600160a01b03821660009081526003602052604081208054600192906132f2908490614265565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561345257604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061339490339089908890889060040161432f565b602060405180830381600087803b1580156133ae57600080fd5b505af19250505080156133de575060408051601f3d908101601f191682019092526133db91810190614362565b60015b613438573d80801561340c576040519150601f19603f3d011682016040523d82523d6000602084013e613411565b606091505b5080516134305760405162461bcd60e51b81526004016105bc906142c9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612d68565b506001949350505050565b6000600161346a846126a8565b6134749190614169565b6000838152600760205260409020549091508082146134c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061350c90600190614169565b60008381526009602052604081205460088054939450909284908110613534576135346141c9565b906000526020600020015490508060088381548110613555576135556141c9565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061358d5761358d61437f565b6001900381819060005260206000200160009055905550505050565b60006135b4836126a8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806101400160405280606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001606081526020016060815260200160608152602001606081526020016136766040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b905290565b604051806101c00160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160001515815260200160008152602001600060ff1681525090565b82805461371990614118565b90600052602060002090601f01602090048101928261373b5760008555613781565b82601f1061375457805160ff1916838001178555613781565b82800160010185558215613781579182015b82811115613781578251825591602001919060010190613766565b5061378d929150613846565b5090565b60405180608001604052806137ee6040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016137fb6135ed565b815260200161381d604051806040016040528060008152602001600081525090565b815260200161367660405180606001604052806060815260200160608152602001606081525090565b5b8082111561378d5760008155600101613847565b6001600160e01b031981168114612c8057600080fd5b60006020828403121561388357600080fd5b8135612b188161385b565b60005b838110156138a9578181015183820152602001613891565b83811115612a835750506000910152565b600081518084526138d281602086016020860161388e565b601f01601f19169290920160200192915050565b602081526000612b1860208301846138ba565b60006020828403121561390b57600080fd5b5035919050565b6001600160a01b0381168114612c8057600080fd5b6000806040838503121561393a57600080fd5b823561394581613912565b946020939093013593505050565b60008060006060848603121561396857600080fd5b505081359360208301359350604090920135919050565b60006020828403121561399157600080fd5b8135612b1881613912565b6000815160a084526139b160a08501826138ba565b9050602083015184820360208601526139ca82826138ba565b915050604083015184820360408601526139e482826138ba565b915050606083015184820360608601526139fe82826138ba565b91505060808301518482036080860152613a1882826138ba565b95945050505050565b60006101408251818552613a37828601826138ba565b91505060208301518482036020860152613a5182826138ba565b9150506040830151613a6e60408601826001600160a01b03169052565b506060830151613a83606086018260ff169052565b5060808301518482036080860152613a9b82826138ba565b91505060a083015184820360a0860152613ab582826138ba565b91505060c083015184820360c0860152613acf82826138ba565b91505060e083015184820360e0860152613ae982826138ba565b9150506101008084015185830382870152613b0483826138ba565b925050506101208084015185830382870152613b20838261399c565b9695505050505050565b60006101c082518452602083015160208501526040830151613b5760408601826001600160a01b03169052565b506060830151613b7260608601826001600160a01b03169052565b506080830151613b8d60808601826001600160a01b03169052565b5060a083015160a085015260c08301518160c0860152613baf828601826138ba565b91505060e0830151613bc660e086018260ff169052565b506101008381015190850152610120808401519085015261014080840151908501526101608084015115159085015261018080840151908501526101a09283015160ff1692909301919091525090565b604081526000613c296040830185613a21565b6020838203818501528185518084528284019150828160051b85010183880160005b83811015613c7957601f19878403018552613c67838351613b2a565b94860194925090850190600101613c4b565b50909998505050505050505050565b600080600060608486031215613c9d57600080fd5b8335613ca881613912565b92506020840135613cb881613912565b929592945050506040919091013590565b60008060408385031215613cdc57600080fd5b82359150602083013560038110613cf257600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b600060038610613d3357634e487b7160e01b600052602160045260246000fd5b85825284602083015283604083015260806060830152613b2060808301846138ba565b6000815160608452613d6b60608501826138ba565b905060208301518482036020860152613d8482826138ba565b91505060408301518482036040860152613a1882826138ba565b602081526000825180516020840152602081015160018060a01b0380821660408601526040830151606086015260608301516080860152608083015160a086015260a083015160c08601528060c08401511660e0860152505050602083015161016080610100850152613e15610180850183613a21565b60408601518051610120870152602001516101408601526060860151858203601f190183870152909250613b208382613d56565b8015158114612c8057600080fd5b60008060408385031215613e6a57600080fd5b8235613e7581613912565b91506020830135613cf281613e49565b602081526000612b186020830184613b2a565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613ed157613ed1613e98565b60405290565b600067ffffffffffffffff80841115613ef257613ef2613e98565b604051601f8501601f19908116603f01168101908282118183101715613f1a57613f1a613e98565b81604052809350858152868686011115613f3357600080fd5b858560208301376000602087830101525050509392505050565b60008060008060808587031215613f6357600080fd5b8435613f6e81613912565b93506020850135613f7e81613912565b925060408501359150606085013567ffffffffffffffff811115613fa157600080fd5b8501601f81018713613fb257600080fd5b613fc187823560208401613ed7565b91505092959194509250565b600082601f830112613fde57600080fd5b612b1883833560208501613ed7565b600060208284031215613fff57600080fd5b813567ffffffffffffffff8082111561401757600080fd5b9083019060a0828603121561402b57600080fd5b614033613eae565b82358281111561404257600080fd5b61404e87828601613fcd565b82525060208301358281111561406357600080fd5b61406f87828601613fcd565b60208301525060408301358281111561408757600080fd5b61409387828601613fcd565b6040830152506060830135828111156140ab57600080fd5b6140b787828601613fcd565b6060830152506080830135828111156140cf57600080fd5b6140db87828601613fcd565b60808301525095945050505050565b600080604083850312156140fd57600080fd5b823561410881613912565b91506020830135613cf281613912565b600181811c9082168061412c57607f821691505b6020821081141561414d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561417b5761417b614153565b500390565b600081600019048311821515161561419a5761419a614153565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826141c4576141c461419f565b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156141f3576141f3614153565b5060010190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60006020828403121561425a57600080fd5b8151612b1881613912565b6000821982111561427857614278614153565b500190565b60006020828403121561428f57600080fd5b8151612b1881613e49565b600083516142ac81846020880161388e565b8351908301906142c081836020880161388e565b01949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261432a5761432a61419f565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613b20908301846138ba565b60006020828403121561437457600080fd5b8151612b188161385b565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f2538a25bf1abea670c9b8042a2ddaf71732830552368376a853f1eb9db1fcc664736f6c63430008090033a2646970667358221220155772e6d21fb48963c4c16dc2aea599965c1e2b0ff17817b15169ad010f2e2864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5983,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "creatorManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICreatorManager)6329"
      },
      {
        "astId": 5986,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5988,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "projectsCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5993,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolsByToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5997,
        "contract": "contracts/StakingContract/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolByID",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(ICreatorManager)6329": {
        "encoding": "inplace",
        "label": "contract ICreatorManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}