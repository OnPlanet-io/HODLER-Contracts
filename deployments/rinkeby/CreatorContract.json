{
  "address": "0xAB5c572FC0b781C017fC546759Da1977C95b3f1c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingPoolFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALLREADY_UNSTAKED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_POOLID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_TOKEN_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_AUTHER",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "addPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyPoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "removePoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ccefce0e817f4c4900d241e674f503dcf13a4bb4ac3e75997b7267ca0ac4278",
  "receipt": {
    "to": null,
    "from": "0xE813d775f33a97BDA25D71240525C724423D4Cd0",
    "contractAddress": "0xAB5c572FC0b781C017fC546759Da1977C95b3f1c",
    "transactionIndex": 0,
    "gasUsed": "765064",
    "logsBloom": "0x
    "blockHash": "0x2b93a02121e4163e88a87c69b3e3307ffc17f1f8392740d22f66b1fb3a620b32",
    "transactionHash": "0x6ccefce0e817f4c4900d241e674f503dcf13a4bb4ac3e75997b7267ca0ac4278",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11421590,
        "transactionHash": "0x6ccefce0e817f4c4900d241e674f503dcf13a4bb4ac3e75997b7267ca0ac4278",
        "address": "0xAB5c572FC0b781C017fC546759Da1977C95b3f1c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e813d775f33a97bda25d71240525c724423d4cd0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2b93a02121e4163e88a87c69b3e3307ffc17f1f8392740d22f66b1fb3a620b32"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11421590,
        "transactionHash": "0x6ccefce0e817f4c4900d241e674f503dcf13a4bb4ac3e75997b7267ca0ac4278",
        "address": "0xAB5c572FC0b781C017fC546759Da1977C95b3f1c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e813d775f33a97bda25d71240525c724423d4cd0",
          "0x000000000000000000000000e813d775f33a97bda25d71240525c724423d4cd0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2b93a02121e4163e88a87c69b3e3307ffc17f1f8392740d22f66b1fb3a620b32"
      }
    ],
    "blockNumber": 11421590,
    "cumulativeGasUsed": "765064",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE813d775f33a97BDA25D71240525C724423D4Cd0",
    "0x98f7D223777d0e495ee2f630e50b6b1b89A74fEE"
  ],
  "numDeployments": 3,
  "solcInputHash": "368864b5c65ce605d7a63c9d9df496aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPoolFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALLREADY_UNSTAKED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_POOLID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_AUTHER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"addPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removePoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreatorContract/CreatorContract.sol\":\"CreatorContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/CreatorContract/CreatorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPoolFactory.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPool.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\n\\r\\n\\r\\ncontract CreatorContract is ERC721Holder, Ownable {\\r\\n    \\r\\n    EnumerableSet.AddressSet private myPoolAddresses;\\r\\n\\r\\n    uint256 public counter;\\r\\n    address public stakingPoolFactory;\\r\\n\\r\\n    constructor(address _owner, address _stakingPoolFactory){\\r\\n        transferOwnership(_owner);\\r\\n        stakingPoolFactory = _stakingPoolFactory;\\r\\n    }\\r\\n\\r\\n    function onERC721Received(address, address, uint256, bytes memory data) public virtual override returns (bytes4) {\\r\\n        // onERC721Received(address operator, address from, uint256 tokenId, bytes data) \\u2192 bytes4\\r\\n\\r\\n        address tokenAddress;\\r\\n        assembly {\\r\\n            tokenAddress := mload(add(data,20))\\r\\n        } \\r\\n        addPoolAddress(tokenAddress);\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    error INVALID_POOLID();\\r\\n    error INVALID_TOKEN_ID();\\r\\n    error NOT_AUTHER();\\r\\n    error ALLREADY_UNSTAKED();\\r\\n\\r\\n    function unstakeTokens(uint256 _tokenId, uint _poolId) public onlyOwner {\\r\\n        address stakingPool = IStakingPoolFactory(stakingPoolFactory).getPoolByID(_poolId);\\r\\n        if(stakingPool == address(0)){\\r\\n            revert INVALID_POOLID();\\r\\n        }\\r\\n\\r\\n        StakingLibrary.TokenData memory token = IStakingPool(stakingPool).getTokenData(_tokenId);\\r\\n        if(token.owner == address(0)){\\r\\n            revert INVALID_TOKEN_ID();\\r\\n        }\\r\\n\\r\\n        if(!token.isUnskated){\\r\\n            IERC20(token.tokenAddress).transfer(msg.sender, token.tokenStaked);\\r\\n            IStakingPool(stakingPool).unstakeTokens(_tokenId);\\r\\n            // if(IStakingPool(stakingPool).balanceOf(msg.sender) === 0){\\r\\n                // removePoolId(_poolId);\\r\\n            // }\\r\\n        }\\r\\n        else {\\r\\n            revert ALLREADY_UNSTAKED();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* Functions to deal with Pools */\\r\\n\\r\\n    function addPoolAddress(address _poolAddress) public {\\r\\n        EnumerableSet.add(myPoolAddresses, _poolAddress);\\r\\n    }\\r\\n\\r\\n    function removePoolAddress(address _poolAddress) public {\\r\\n        EnumerableSet.remove(myPoolAddresses, _poolAddress);\\r\\n    }\\r\\n\\r\\n    function getMyPoolAddresses() public view returns(address[] memory) {\\r\\n        return EnumerableSet.values(myPoolAddresses);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x49632a2068d924352383564e4e8eff912bd21bb0d72c8cdbbdc6791d92fe643d\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface IStakingPool is IERC721 {\\r\\n    \\r\\n    function unstakeTokens(uint256 _tokenId) external;  \\r\\n    function getTokenData(uint256 _tokenId) external view returns(StakingLibrary.TokenData memory);\\r\\n    function getProjectInfo() external view returns ( StakingLibrary.PoolFullInfo memory poolFullInfo);\\r\\n\\r\\n}\",\"keccak256\":\"0x0f9ac5676bb0b80122e99933e1d77191bd2e5ebd78127e5d22dfa5e9c008c545\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface IStakingPoolFactory  {\\r\\n\\r\\n    function getPoolByID(uint256 id) external view returns (address);\\r\\n\\r\\n}\",\"keccak256\":\"0x0b3b2b2439caf67b6629f282f9bd4513cfef3887314406b215ecbeed0b1af975\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    struct SocialHandles {\\r\\n        string website;\\r\\n        string twitter;\\r\\n        string facebook;\\r\\n        string telegram;\\r\\n        string discord;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        string teamDescription;\\r\\n        string projectDescription;\\r\\n        string projectCover;\\r\\n        string projectAvatar;\\r\\n        SocialHandles socialHandles;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo{\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct Images{\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_12_months;\\r\\n    }\\r\\n       \\r\\n    struct TokenData {\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        Images images;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x398f897cc60323d3d340e049f929da1668fb955fc2d8c47039e6ed70a43175c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000de438038062000de48339810160408190526200003491620001bf565b6200003f3362000071565b6200004a82620000c1565b600480546001600160a01b0319166001600160a01b039290921691909117905550620001f7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000cb62000144565b6001600160a01b038116620001365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001418162000071565b50565b6000546001600160a01b03163314620001a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200012d565b565b80516001600160a01b0381168114620001ba57600080fd5b919050565b60008060408385031215620001d357600080fd5b620001de83620001a2565b9150620001ee60208401620001a2565b90509250929050565b610bdd80620002076000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063838c003911610066578063838c00391461011b5780638da5cb5b1461012e578063a1b8adcb14610153578063ea2d03e014610166578063f2fde38b1461017b57600080fd5b8063150b7a02146100a357806343499844146100d457806361bc221a146100e95780636347503914610100578063715018a614610113575b600080fd5b6100b66100b136600461081b565b61018e565b6040516001600160e01b031990911681526020015b60405180910390f35b6100e76100e23660046108ca565b6101b1565b005b6100f260035481565b6040519081526020016100cb565b6100e761010e3660046108e7565b6101c0565b6100e7610430565b6100e76101293660046108ca565b610444565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cb565b60045461013b906001600160a01b031681565b61016e61044f565b6040516100cb9190610909565b6100e76101893660046108ca565b610460565b601481015160009061019f816101b1565b50630a85bd0160e11b95945050505050565b6101bc6001826104de565b5050565b6101c86104fc565b60048054604051631415452760e21b81529182018390526000916001600160a01b0390911690635055149c9060240160206040518083038186803b15801561020f57600080fd5b505afa158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610966565b90506001600160a01b03811661027057604051635011b19b60e11b815260040160405180910390fd5b60405163b09afec160e01b8152600481018490526000906001600160a01b0383169063b09afec19060240160006040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ef9190810190610a13565b60608101519091506001600160a01b031661031d5760405163b49aa3b560e01b815260040160405180910390fd5b806101600151610411576040808201516020830151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190610b3b565b50604051630608e4dd60e41b8152600481018590526001600160a01b0383169063608e4dd090602401600060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b5050505061042a565b60405163c47c6c3760e01b815260040160405180910390fd5b50505050565b6104386104fc565b6104426000610556565b565b6101bc6001826105a6565b606061045b60016105bb565b905090565b6104686104fc565b6001600160a01b0381166104d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104db81610556565b50565b60006104f3836001600160a01b0384166105cf565b90505b92915050565b6000546001600160a01b031633146104425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006104f3836001600160a01b03841661061e565b606060006105c883610711565b9392505050565b6000818152600183016020526040812054610616575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104f6565b5060006104f6565b60008181526001830160205260408120548015610707576000610642600183610b56565b855490915060009061065690600190610b56565b90508181146106bb57600086600001828154811061067657610676610b7b565b906000526020600020015490508087600001848154811061069957610699610b7b565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806106cc576106cc610b91565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104f6565b60009150506104f6565b60608160000180548060200260200160405190810160405280929190818152602001828054801561076157602002820191906000526020600020905b81548152602001906001019080831161074d575b50505050509050919050565b6001600160a01b03811681146104db57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156107bc576107bc610782565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107eb576107eb610782565b604052919050565b600067ffffffffffffffff82111561080d5761080d610782565b50601f01601f191660200190565b6000806000806080858703121561083157600080fd5b843561083c8161076d565b9350602085013561084c8161076d565b925060408501359150606085013567ffffffffffffffff81111561086f57600080fd5b8501601f8101871361088057600080fd5b803561089361088e826107f3565b6107c2565b8181528860208385010111156108a857600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000602082840312156108dc57600080fd5b81356105c88161076d565b600080604083850312156108fa57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561094a5783516001600160a01b031683529284019291840191600101610925565b50909695505050505050565b80516109618161076d565b919050565b60006020828403121561097857600080fd5b81516105c88161076d565b600082601f83011261099457600080fd5b81516109a261088e826107f3565b818152602085818487010111156109b857600080fd5b60005b838110156109d65785810182015183820183015281016109bb565b838111156109e75760008285850101525b509095945050505050565b805160ff8116811461096157600080fd5b8051801515811461096157600080fd5b600060208284031215610a2557600080fd5b815167ffffffffffffffff80821115610a3d57600080fd5b908301906101c08286031215610a5257600080fd5b610a5a610798565b8251815260208301516020820152610a7460408401610956565b6040820152610a8560608401610956565b6060820152610a9660808401610956565b608082015260a083015160a082015260c083015182811115610ab757600080fd5b610ac387828601610983565b60c083015250610ad560e084016109f2565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101609150610b0b828401610a03565b82820152610180915081830151828201526101a09150610b2c8284016109f2565b91810191909152949350505050565b600060208284031215610b4d57600080fd5b6104f382610a03565b600082821015610b7657634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122074f4c079b0ef4b27a4310658dd260ac533fa0637de84eeb9798ddcb573efa20f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063838c003911610066578063838c00391461011b5780638da5cb5b1461012e578063a1b8adcb14610153578063ea2d03e014610166578063f2fde38b1461017b57600080fd5b8063150b7a02146100a357806343499844146100d457806361bc221a146100e95780636347503914610100578063715018a614610113575b600080fd5b6100b66100b136600461081b565b61018e565b6040516001600160e01b031990911681526020015b60405180910390f35b6100e76100e23660046108ca565b6101b1565b005b6100f260035481565b6040519081526020016100cb565b6100e761010e3660046108e7565b6101c0565b6100e7610430565b6100e76101293660046108ca565b610444565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cb565b60045461013b906001600160a01b031681565b61016e61044f565b6040516100cb9190610909565b6100e76101893660046108ca565b610460565b601481015160009061019f816101b1565b50630a85bd0160e11b95945050505050565b6101bc6001826104de565b5050565b6101c86104fc565b60048054604051631415452760e21b81529182018390526000916001600160a01b0390911690635055149c9060240160206040518083038186803b15801561020f57600080fd5b505afa158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610966565b90506001600160a01b03811661027057604051635011b19b60e11b815260040160405180910390fd5b60405163b09afec160e01b8152600481018490526000906001600160a01b0383169063b09afec19060240160006040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102ef9190810190610a13565b60608101519091506001600160a01b031661031d5760405163b49aa3b560e01b815260040160405180910390fd5b806101600151610411576040808201516020830151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b19190610b3b565b50604051630608e4dd60e41b8152600481018590526001600160a01b0383169063608e4dd090602401600060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b5050505061042a565b60405163c47c6c3760e01b815260040160405180910390fd5b50505050565b6104386104fc565b6104426000610556565b565b6101bc6001826105a6565b606061045b60016105bb565b905090565b6104686104fc565b6001600160a01b0381166104d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104db81610556565b50565b60006104f3836001600160a01b0384166105cf565b90505b92915050565b6000546001600160a01b031633146104425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006104f3836001600160a01b03841661061e565b606060006105c883610711565b9392505050565b6000818152600183016020526040812054610616575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104f6565b5060006104f6565b60008181526001830160205260408120548015610707576000610642600183610b56565b855490915060009061065690600190610b56565b90508181146106bb57600086600001828154811061067657610676610b7b565b906000526020600020015490508087600001848154811061069957610699610b7b565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806106cc576106cc610b91565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104f6565b60009150506104f6565b60608160000180548060200260200160405190810160405280929190818152602001828054801561076157602002820191906000526020600020905b81548152602001906001019080831161074d575b50505050509050919050565b6001600160a01b03811681146104db57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156107bc576107bc610782565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156107eb576107eb610782565b604052919050565b600067ffffffffffffffff82111561080d5761080d610782565b50601f01601f191660200190565b6000806000806080858703121561083157600080fd5b843561083c8161076d565b9350602085013561084c8161076d565b925060408501359150606085013567ffffffffffffffff81111561086f57600080fd5b8501601f8101871361088057600080fd5b803561089361088e826107f3565b6107c2565b8181528860208385010111156108a857600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000602082840312156108dc57600080fd5b81356105c88161076d565b600080604083850312156108fa57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561094a5783516001600160a01b031683529284019291840191600101610925565b50909695505050505050565b80516109618161076d565b919050565b60006020828403121561097857600080fd5b81516105c88161076d565b600082601f83011261099457600080fd5b81516109a261088e826107f3565b818152602085818487010111156109b857600080fd5b60005b838110156109d65785810182015183820183015281016109bb565b838111156109e75760008285850101525b509095945050505050565b805160ff8116811461096157600080fd5b8051801515811461096157600080fd5b600060208284031215610a2557600080fd5b815167ffffffffffffffff80821115610a3d57600080fd5b908301906101c08286031215610a5257600080fd5b610a5a610798565b8251815260208301516020820152610a7460408401610956565b6040820152610a8560608401610956565b6060820152610a9660808401610956565b608082015260a083015160a082015260c083015182811115610ab757600080fd5b610ac387828601610983565b60c083015250610ad560e084016109f2565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101609150610b0b828401610a03565b82820152610180915081830151828201526101a09150610b2c8284016109f2565b91810191909152949350505050565b600060208284031215610b4d57600080fd5b6104f382610a03565b600082821015610b7657634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122074f4c079b0ef4b27a4310658dd260ac533fa0637de84eeb9798ddcb573efa20f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4820,
        "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
        "label": "myPoolAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)4517_storage"
      },
      {
        "astId": 4822,
        "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4824,
        "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
        "label": "stakingPoolFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4517_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4516,
            "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4216_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4216_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4211,
            "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4215,
            "contract": "contracts/CreatorContract/CreatorContract.sol:CreatorContract",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}