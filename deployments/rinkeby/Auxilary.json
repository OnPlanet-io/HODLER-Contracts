{
  "address": "0x8134afA9B62C5818130b99Eee9FC4878A7Dc3E98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getProjectsDetail",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingPool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalTokensStaked",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalParicipants",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenCounter",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "poolOwner",
                  "type": "address"
                }
              ],
              "internalType": "struct StakingLibrary.PoolInfo",
              "name": "poolInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "projectName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectSymbol",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenDecimals",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "teamDescription",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectDescription",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectCover",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "projectAvatar",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "website",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "twitter",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "facebook",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "telegram",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "discord",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct StakingLibrary.SocialHandles",
                  "name": "socialHandles",
                  "type": "tuple"
                }
              ],
              "internalType": "struct StakingLibrary.ProjectInfo",
              "name": "projectInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startedAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "poolAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StakingLibrary.RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "image_3_months",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "image_6_months",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "image_12_months",
                  "type": "string"
                }
              ],
              "internalType": "struct StakingLibrary.Images",
              "name": "images",
              "type": "tuple"
            }
          ],
          "internalType": "struct StakingLibrary.PoolFullInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolFactory",
      "outputs": [
        {
          "internalType": "contract IStakingPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f377b092dead56be9f34ad35698b30abd158d4fbd62287562ef77f0be00bd21",
  "receipt": {
    "to": null,
    "from": "0xE813d775f33a97BDA25D71240525C724423D4Cd0",
    "contractAddress": "0x8134afA9B62C5818130b99Eee9FC4878A7Dc3E98",
    "transactionIndex": 2,
    "gasUsed": "849409",
    "logsBloom": "0x
    "blockHash": "0x97a59221b149a1360f71164e2ca0f83e4e292a93ed829477d374eca2d7192727",
    "transactionHash": "0x3f377b092dead56be9f34ad35698b30abd158d4fbd62287562ef77f0be00bd21",
    "logs": [],
    "blockNumber": 11421591,
    "cumulativeGasUsed": "1285385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98f7D223777d0e495ee2f630e50b6b1b89A74fEE"
  ],
  "numDeployments": 3,
  "solcInputHash": "368864b5c65ce605d7a63c9d9df496aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getProjectsDetail\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remainingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParicipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCounter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"}],\"internalType\":\"struct StakingLibrary.PoolInfo\",\"name\":\"poolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectCover\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectAvatar\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facebook\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"discord\",\"type\":\"string\"}],\"internalType\":\"struct StakingLibrary.SocialHandles\",\"name\":\"socialHandles\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingLibrary.ProjectInfo\",\"name\":\"projectInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingLibrary.RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"image_3_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_6_months\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image_12_months\",\"type\":\"string\"}],\"internalType\":\"struct StakingLibrary.Images\",\"name\":\"images\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingLibrary.PoolFullInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolFactory\",\"outputs\":[{\"internalType\":\"contract IStakingPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Auxilary.sol\":\"Auxilary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface IStakingPool is IERC721 {\\r\\n    \\r\\n    function unstakeTokens(uint256 _tokenId) external;  \\r\\n    function getTokenData(uint256 _tokenId) external view returns(StakingLibrary.TokenData memory);\\r\\n    function getProjectInfo() external view returns ( StakingLibrary.PoolFullInfo memory poolFullInfo);\\r\\n\\r\\n}\",\"keccak256\":\"0x0f9ac5676bb0b80122e99933e1d77191bd2e5ebd78127e5d22dfa5e9c008c545\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\ninterface IStakingPoolFactory  {\\r\\n\\r\\n    function getPoolByID(uint256 id) external view returns (address);\\r\\n\\r\\n}\",\"keccak256\":\"0x0b3b2b2439caf67b6629f282f9bd4513cfef3887314406b215ecbeed0b1af975\",\"license\":\"MIT\"},\"contracts/library/Auxilary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IStakingPoolFactory.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPool.sol\\\";\\r\\nimport \\\"../library/StakingLibrary.sol\\\";\\r\\n\\r\\n\\r\\ncontract Auxilary {\\r\\n\\r\\n    IStakingPoolFactory public immutable stakingPoolFactory;\\r\\n\\r\\n    constructor(address factory){\\r\\n        stakingPoolFactory = IStakingPoolFactory(factory);\\r\\n    }\\r\\n\\r\\n    function getProjectsDetail(uint256 from, uint256 length) public view\\r\\n        returns (StakingLibrary.PoolFullInfo[] memory)\\r\\n        {\\r\\n        \\r\\n        require(from > 0 && length > 0, \\\"Not Alllowed\\\");\\r\\n        require(address(stakingPoolFactory) != address(0), \\\"Staking factory not set\\\" );\\r\\n\\r\\n        if(from <= length){\\r\\n            length = from;\\r\\n        }\\r\\n\\r\\n        StakingLibrary.PoolFullInfo[] memory fullData = new StakingLibrary.PoolFullInfo[](length);\\r\\n        uint8 index = 0;\\r\\n\\r\\n        for(uint256 i = from; i > from - length; i--){\\r\\n            address poolAddr = stakingPoolFactory.getPoolByID(i);\\r\\n            StakingLibrary.PoolFullInfo memory poolFullInfo = IStakingPool(poolAddr).getProjectInfo();\\r\\n            fullData[index] = poolFullInfo;\\r\\n            index++;\\r\\n        }\\r\\n        return fullData;\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5ca3a1fc909e115b4bb6d941a2572f7af5b28331f7855d24c4c8ec93beb5e365\",\"license\":\"MIT\"},\"contracts/library/StakingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary StakingLibrary {\\r\\n\\r\\n    struct SocialHandles {\\r\\n        string website;\\r\\n        string twitter;\\r\\n        string facebook;\\r\\n        string telegram;\\r\\n        string discord;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 poolId;\\r\\n        address poolAddress;\\r\\n        uint256 remainingPool;\\r\\n        uint256 totalTokensStaked;\\r\\n        uint256 totalParicipants;\\r\\n        uint256 tokenCounter;\\r\\n        address poolOwner;\\r\\n    }\\r\\n\\r\\n    struct ProjectInfo {\\r\\n        string projectName;\\r\\n        string projectSymbol;\\r\\n        address tokenAddress;\\r\\n        uint8 tokenDecimals;\\r\\n        string tokenSymbol;\\r\\n        string teamDescription;\\r\\n        string projectDescription;\\r\\n        string projectCover;\\r\\n        string projectAvatar;\\r\\n        SocialHandles socialHandles;\\r\\n    }\\r\\n\\r\\n    struct RewardPoolInfo{\\r\\n        uint256 startedAt;\\r\\n        uint256 poolAmount;\\r\\n    }\\r\\n\\r\\n    struct Images{\\r\\n        string image_3_months;\\r\\n        string image_6_months;\\r\\n        string image_12_months;\\r\\n    }\\r\\n       \\r\\n    struct TokenData {\\r\\n        uint256 poolId;\\r\\n        uint256 tokenStaked;\\r\\n        address tokenAddress;\\r\\n        address owner;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        string tokenUri;\\r\\n        uint8 stakingType;\\r\\n        uint256 stakingTime;\\r\\n        uint256 unlockTime;\\r\\n        uint256 expectedReward;\\r\\n        bool isUnskated;\\r\\n        uint256 redeemedReward;\\r\\n        uint8 pcReceived;\\r\\n    }\\r\\n\\r\\n    struct PoolFullInfo {\\r\\n        PoolInfo poolInfo;\\r\\n        ProjectInfo projectInfo; \\r\\n        RewardPoolInfo rewardPoolInfo; \\r\\n        Images images;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x398f897cc60323d3d340e049f929da1668fb955fc2d8c47039e6ed70a43175c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ef9380380610ef983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610e626100976000396000818160690152818160f701526101fb0152610e626000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063599449e51461003b578063a1b8adcb14610064575b600080fd5b61004e610049366004610489565b6100a3565b60405161005b91906106dd565b60405180910390f35b61008b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005b565b60606000831180156100b55750600082115b6100f55760405162461bcd60e51b815260206004820152600c60248201526b139bdd08105b1b1b1bddd95960a21b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661016b5760405162461bcd60e51b815260206004820152601760248201527f5374616b696e6720666163746f7279206e6f742073657400000000000000000060448201526064016100ec565b818311610176578291505b60008267ffffffffffffffff811115610191576101916107d4565b6040519080825280602002602001820160405280156101ca57816020015b6101b7610346565b8152602001906001900390816101af5790505b5090506000845b6101db8587610800565b81111561033c57604051631415452760e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635055149c9060240160206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190610833565b90506000816001600160a01b03166367c897fe6040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f69190810190610cc7565b905080858560ff168151811061030e5761030e610ddf565b6020026020010181905250838061032490610df5565b9450505050808061033490610e15565b9150506101d1565b5090949350505050565b60405180608001604052806103a36040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016103b0610400565b81526020016103d2604051806040016040528060008152602001600081525090565b81526020016103fb60405180606001604052806060815260200160608152602001606081525090565b905290565b604051806101400160405280606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001606081526020016060815260200160608152602001606081526020016103fb6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000806040838503121561049c57600080fd5b50508035926020909101359150565b60005b838110156104c65781810151838201526020016104ae565b838111156104d5576000848401525b50505050565b600081518084526104f38160208601602086016104ab565b601f01601f19169290920160200192915050565b6000815160a0845261051c60a08501826104db565b90506020830151848203602086015261053582826104db565b9150506040830151848203604086015261054f82826104db565b9150506060830151848203606086015261056982826104db565b9150506080830151848203608086015261058382826104db565b95945050505050565b600061014082518185526105a2828601826104db565b915050602083015184820360208601526105bc82826104db565b91505060408301516105d960408601826001600160a01b03169052565b5060608301516105ee606086018260ff169052565b506080830151848203608086015261060682826104db565b91505060a083015184820360a086015261062082826104db565b91505060c083015184820360c086015261063a82826104db565b91505060e083015184820360e086015261065482826104db565b915050610100808401518583038287015261066f83826104db565b92505050610120808401518583038287015261068b8382610507565b9695505050505050565b60008151606084526106aa60608501826104db565b9050602083015184820360208601526106c382826104db565b9150506040830151848203604086015261058382826104db565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156107c657888303603f190185528151805180518552888101516001600160a01b039081168a8701528882015189870152606080830151818801526080808401519088015260a0808401519088015260c092830151909116918601919091528882015161016060e08701819052916107818388018361058c565b8a85015180516101008a0152602001516101208901529301518684036101408801529291506107b290508183610695565b968901969450505090860190600101610704565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610812576108126107ea565b500390565b80516001600160a01b038116811461082e57600080fd5b919050565b60006020828403121561084557600080fd5b61084e82610817565b9392505050565b60405160a0810167ffffffffffffffff81118282101715610878576108786107d4565b60405290565b604051610140810167ffffffffffffffff81118282101715610878576108786107d4565b6040516080810167ffffffffffffffff81118282101715610878576108786107d4565b60405160e0810167ffffffffffffffff81118282101715610878576108786107d4565b600082601f8301126108f957600080fd5b815167ffffffffffffffff80821115610914576109146107d4565b604051601f8301601f19908116603f0116810190828211818310171561093c5761093c6107d4565b8160405283815286602085880101111561095557600080fd5b61068b8460208301602089016104ab565b805160ff8116811461082e57600080fd5b600060a0828403121561098957600080fd5b610991610855565b9050815167ffffffffffffffff808211156109ab57600080fd5b6109b7858386016108e8565b835260208401519150808211156109cd57600080fd5b6109d9858386016108e8565b602084015260408401519150808211156109f257600080fd5b6109fe858386016108e8565b60408401526060840151915080821115610a1757600080fd5b610a23858386016108e8565b60608401526080840151915080821115610a3c57600080fd5b50610a49848285016108e8565b60808301525092915050565b60006101408284031215610a6857600080fd5b610a7061087e565b9050815167ffffffffffffffff80821115610a8a57600080fd5b610a96858386016108e8565b83526020840151915080821115610aac57600080fd5b610ab8858386016108e8565b6020840152610ac960408501610817565b6040840152610ada60608501610966565b60608401526080840151915080821115610af357600080fd5b610aff858386016108e8565b608084015260a0840151915080821115610b1857600080fd5b610b24858386016108e8565b60a084015260c0840151915080821115610b3d57600080fd5b610b49858386016108e8565b60c084015260e0840151915080821115610b6257600080fd5b610b6e858386016108e8565b60e084015261010091508184015181811115610b8957600080fd5b610b95868287016108e8565b838501525061012091508184015181811115610bb057600080fd5b610bbc86828701610977565b8385015250505092915050565b600060408284031215610bdb57600080fd5b6040516040810181811067ffffffffffffffff82111715610bfe57610bfe6107d4565b604052825181526020928301519281019290925250919050565b600060608284031215610c2a57600080fd5b6040516060810167ffffffffffffffff8282108183111715610c4e57610c4e6107d4565b816040528293508451915080821115610c6657600080fd5b610c72868387016108e8565b83526020850151915080821115610c8857600080fd5b610c94868387016108e8565b60208401526040850151915080821115610cad57600080fd5b50610cba858286016108e8565b6040830152505092915050565b600060208284031215610cd957600080fd5b815167ffffffffffffffff80821115610cf157600080fd5b90830190818503610160811215610d0757600080fd5b610d0f6108a2565b60e0821215610d1d57600080fd5b610d256108c5565b915083518252610d3760208501610817565b602083015260408401516040830152606084015160608301526080840151608083015260a084015160a0830152610d7060c08501610817565b60c083015290815260e08301519082821115610d8b57600080fd5b610d9787838601610a55565b6020820152610daa876101008601610bc9565b6040820152610140840151915082821115610dc457600080fd5b610dd087838601610c18565b60608201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415610e0c57610e0c6107ea565b60010192915050565b600081610e2457610e246107ea565b50600019019056fea26469706673582212207a7129d5e6ea69778640f83b79e735257909d56ff0daea51552dc367fce28f5564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063599449e51461003b578063a1b8adcb14610064575b600080fd5b61004e610049366004610489565b6100a3565b60405161005b91906106dd565b60405180910390f35b61008b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005b565b60606000831180156100b55750600082115b6100f55760405162461bcd60e51b815260206004820152600c60248201526b139bdd08105b1b1b1bddd95960a21b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661016b5760405162461bcd60e51b815260206004820152601760248201527f5374616b696e6720666163746f7279206e6f742073657400000000000000000060448201526064016100ec565b818311610176578291505b60008267ffffffffffffffff811115610191576101916107d4565b6040519080825280602002602001820160405280156101ca57816020015b6101b7610346565b8152602001906001900390816101af5790505b5090506000845b6101db8587610800565b81111561033c57604051631415452760e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635055149c9060240160206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190610833565b90506000816001600160a01b03166367c897fe6040518163ffffffff1660e01b815260040160006040518083038186803b1580156102ba57600080fd5b505afa1580156102ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f69190810190610cc7565b905080858560ff168151811061030e5761030e610ddf565b6020026020010181905250838061032490610df5565b9450505050808061033490610e15565b9150506101d1565b5090949350505050565b60405180608001604052806103a36040518060e001604052806000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b81526020016103b0610400565b81526020016103d2604051806040016040528060008152602001600081525090565b81526020016103fb60405180606001604052806060815260200160608152602001606081525090565b905290565b604051806101400160405280606081526020016060815260200160006001600160a01b03168152602001600060ff16815260200160608152602001606081526020016060815260200160608152602001606081526020016103fb6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000806040838503121561049c57600080fd5b50508035926020909101359150565b60005b838110156104c65781810151838201526020016104ae565b838111156104d5576000848401525b50505050565b600081518084526104f38160208601602086016104ab565b601f01601f19169290920160200192915050565b6000815160a0845261051c60a08501826104db565b90506020830151848203602086015261053582826104db565b9150506040830151848203604086015261054f82826104db565b9150506060830151848203606086015261056982826104db565b9150506080830151848203608086015261058382826104db565b95945050505050565b600061014082518185526105a2828601826104db565b915050602083015184820360208601526105bc82826104db565b91505060408301516105d960408601826001600160a01b03169052565b5060608301516105ee606086018260ff169052565b506080830151848203608086015261060682826104db565b91505060a083015184820360a086015261062082826104db565b91505060c083015184820360c086015261063a82826104db565b91505060e083015184820360e086015261065482826104db565b915050610100808401518583038287015261066f83826104db565b92505050610120808401518583038287015261068b8382610507565b9695505050505050565b60008151606084526106aa60608501826104db565b9050602083015184820360208601526106c382826104db565b9150506040830151848203604086015261058382826104db565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156107c657888303603f190185528151805180518552888101516001600160a01b039081168a8701528882015189870152606080830151818801526080808401519088015260a0808401519088015260c092830151909116918601919091528882015161016060e08701819052916107818388018361058c565b8a85015180516101008a0152602001516101208901529301518684036101408801529291506107b290508183610695565b968901969450505090860190600101610704565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610812576108126107ea565b500390565b80516001600160a01b038116811461082e57600080fd5b919050565b60006020828403121561084557600080fd5b61084e82610817565b9392505050565b60405160a0810167ffffffffffffffff81118282101715610878576108786107d4565b60405290565b604051610140810167ffffffffffffffff81118282101715610878576108786107d4565b6040516080810167ffffffffffffffff81118282101715610878576108786107d4565b60405160e0810167ffffffffffffffff81118282101715610878576108786107d4565b600082601f8301126108f957600080fd5b815167ffffffffffffffff80821115610914576109146107d4565b604051601f8301601f19908116603f0116810190828211818310171561093c5761093c6107d4565b8160405283815286602085880101111561095557600080fd5b61068b8460208301602089016104ab565b805160ff8116811461082e57600080fd5b600060a0828403121561098957600080fd5b610991610855565b9050815167ffffffffffffffff808211156109ab57600080fd5b6109b7858386016108e8565b835260208401519150808211156109cd57600080fd5b6109d9858386016108e8565b602084015260408401519150808211156109f257600080fd5b6109fe858386016108e8565b60408401526060840151915080821115610a1757600080fd5b610a23858386016108e8565b60608401526080840151915080821115610a3c57600080fd5b50610a49848285016108e8565b60808301525092915050565b60006101408284031215610a6857600080fd5b610a7061087e565b9050815167ffffffffffffffff80821115610a8a57600080fd5b610a96858386016108e8565b83526020840151915080821115610aac57600080fd5b610ab8858386016108e8565b6020840152610ac960408501610817565b6040840152610ada60608501610966565b60608401526080840151915080821115610af357600080fd5b610aff858386016108e8565b608084015260a0840151915080821115610b1857600080fd5b610b24858386016108e8565b60a084015260c0840151915080821115610b3d57600080fd5b610b49858386016108e8565b60c084015260e0840151915080821115610b6257600080fd5b610b6e858386016108e8565b60e084015261010091508184015181811115610b8957600080fd5b610b95868287016108e8565b838501525061012091508184015181811115610bb057600080fd5b610bbc86828701610977565b8385015250505092915050565b600060408284031215610bdb57600080fd5b6040516040810181811067ffffffffffffffff82111715610bfe57610bfe6107d4565b604052825181526020928301519281019290925250919050565b600060608284031215610c2a57600080fd5b6040516060810167ffffffffffffffff8282108183111715610c4e57610c4e6107d4565b816040528293508451915080821115610c6657600080fd5b610c72868387016108e8565b83526020850151915080821115610c8857600080fd5b610c94868387016108e8565b60208401526040850151915080821115610cad57600080fd5b50610cba858286016108e8565b6040830152505092915050565b600060208284031215610cd957600080fd5b815167ffffffffffffffff80821115610cf157600080fd5b90830190818503610160811215610d0757600080fd5b610d0f6108a2565b60e0821215610d1d57600080fd5b610d256108c5565b915083518252610d3760208501610817565b602083015260408401516040830152606084015160608301526080840151608083015260a084015160a0830152610d7060c08501610817565b60c083015290815260e08301519082821115610d8b57600080fd5b610d9787838601610a55565b6020820152610daa876101008601610bc9565b6040820152610140840151915082821115610dc457600080fd5b610dd087838601610c18565b60608201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415610e0c57610e0c6107ea565b60010192915050565b600081610e2457610e246107ea565b50600019019056fea26469706673582212207a7129d5e6ea69778640f83b79e735257909d56ff0daea51552dc367fce28f5564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}